<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ru"><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="https://st4lk.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://st4lk.github.io/" rel="alternate" type="text/html" hreflang="ru" /><updated>2022-11-23T01:46:13+00:00</updated><id>https://st4lk.github.io/feed.xml</id><title type="html">Developer articles</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Sublime Text и Language Server Protocol</title><link href="https://st4lk.github.io/blog/2019/02/19/sublime-text-and-language-server-protocol-lsp.html" rel="alternate" type="text/html" title="Sublime Text и Language Server Protocol" /><published>2019-02-19T18:19:43+00:00</published><updated>2019-02-19T18:19:43+00:00</updated><id>https://st4lk.github.io/blog/2019/02/19/sublime-text-and-language-server-protocol-lsp</id><content type="html" xml:base="https://st4lk.github.io/blog/2019/02/19/sublime-text-and-language-server-protocol-lsp.html">&lt;p&gt;&lt;a href=&quot;/blog/2019/02/19/sublime-text-and-language-server-protocol-lsp.html&quot;&gt;&lt;img src=&quot;https://i.ibb.co/4K4zp06/sublime-256-lsp-light.png&quot; alt=&quot;Sublime Text и Language Server Protocol (LSP)&quot; title=&quot;Sublime Text и Language Server Protocol (LSP)&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;language-server-protocol-lsp&quot;&gt;Language Server Protocol (LSP)&lt;/h2&gt;

&lt;p&gt;Language Server Protocol (LSP) - протокол для общения между IDE и языковым сервером. Сервер предоставляет такие функции, как автокомплит, переход к функции (goto) и прочее. Т.е. когда IDE нужно показать автокомплит на языке, скажем, python - происходит запрос к специальному серверу. В ответе возвращаются необходимые данные, которые IDE уже может отобразить. Радует то, что это инициатива крупной компании - Microsoft.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Но в чем же смысл, ведь в большинстве IDE это итак уже работает?&lt;/p&gt;

&lt;p&gt;Смысл в унификации таких возможностей, в простоте разработки самих IDE. Получается, что сервер - один, а сред разработки - много. И все они могут общаться с одним сервером, им не нужно реализоваывать стандартные функции, специфичные для каждого конкретного языка. Все, что нужно сделать - это реализовать общение с сервером согласно LSP.&lt;/p&gt;

&lt;p&gt;С точки зрения пользователей самих IDE тоже есть плюс. К примеру, если на сервере добавят что-то новое, то такие обновления вы получите быстрее. Не важно, каким именно IDE или редактором кода вы пользуетесь, теперь это не зависит от этого. Главное, что ваш редактор должен поддерживать - это протокол общения с сервером. Можем считать, что он будет стабильным в ближайшее время. Тем более его поддерживает такой гигант, как Microsoft.&lt;/p&gt;

&lt;p&gt;Некоторые ссылки:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Официальная страница LSP: &lt;a href=&quot;https://microsoft.github.io/language-server-protocol/&quot;&gt;https://microsoft.github.io/language-server-protocol/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Список реализаций серверов: &lt;a href=&quot;https://microsoft.github.io/language-server-protocol/implementors/servers/&quot;&gt;https://microsoft.github.io/language-server-protocol/implementors/servers/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Страница, поддерживаемая сообществом: &lt;a href=&quot;https://langserver.org/&quot;&gt;https://langserver.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;python-server&quot;&gt;Python Server&lt;/h2&gt;
&lt;p&gt;Давайте попробуем подружить IDE (на примере Sublime Text) с python language server.&lt;/p&gt;

&lt;p&gt;Первое, что нам понадобиться - это сам сервер, который будет отвечать на запросы LSP.
На момент написания статьи, самый поддерживаемый сервер, написанный на python’e, этот: &lt;a href=&quot;https://github.com/palantir/python-language-server&quot;&gt;https://github.com/palantir/python-language-server&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Есть так же сервер от Microsoft: &lt;a href=&quot;https://github.com/Microsoft/python-language-server/&quot;&gt;https://github.com/Microsoft/python-language-server/&lt;/a&gt;.
И даже есть &lt;a href=&quot;https://github.com/Microsoft/python-language-server/blob/master/Using_in_sublime_text.md&quot;&gt;краткая инструкция&lt;/a&gt; по настройке с Sublime Text. Для запуска этого сервера понадобится &lt;a href=&quot;https://dotnet.microsoft.com/download/dotnet-core/2.1&quot;&gt;dotnet&lt;/a&gt;.
Пробовал ставить, однако в полной мере он не выдавал нужный мне функционал. Возможно, я что-то недонастроил. К тому же я редко сталкиваюсь с C# в работе, поэтому понять внутренности для меня трудно, а иногда это бывает полезно.&lt;/p&gt;

&lt;p&gt;Но вернемся к серверу на питоне.
Схема в голове была такая:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;У нас есть отдельный virtualenv, созданный исключительно для установки сервера LSP&lt;/li&gt;
  &lt;li&gt;В virtualenv нашего проекта никаких LSP серверов нет&lt;/li&gt;
  &lt;li&gt;Наш IDE будет общаться с сервером, передавая параметры virtualenv’а нашего проекта.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Таким образом, раз установив сервер, мы можем использовать его для разных проектов.
Но на момент описания этой статьи сделать это было не просто. По крайней мере четкой документации, как это сделять, я не нашел. В документации к этому серверу как-то неявно предполагается, что он должен быть установлен в той же среде, что и ваш проект. В том же virtualenv. Но мне кажется это не совсем удобно.
Поэтому пришлось создать &lt;a href=&quot;https://github.com/palantir/python-language-server/pull/401&quot;&gt;PR&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Так же, этот LSP не хотел брать настройки линтера из директории проекта. Например, в корне проекта у меня лежит setup.cfg с такими настройками:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ignore = D202,D205,D211
max-line-length = 99
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Чтобы сервер мог подхватывать их, понадобился еще один &lt;a href=&quot;https://github.com/palantir/python-language-server/pull/413&quot;&gt;PR&lt;/a&gt;.
Который в свою очередь преобразовался в &lt;a href=&quot;https://github.com/palantir/python-language-server/pull/418&quot;&gt;этот&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Были и другие проблемы, тоже приходилось погружаться в код и создавать PR’ы.
Надеюсь, их скоро примут и включат в релиз. А пока, создал релиз в своем &lt;a href=&quot;https://github.com/st4lk/python-language-server/releases/tag/0.22.0a1&quot;&gt;форке&lt;/a&gt;, где найденные мной ошибки исправлены.&lt;/p&gt;

&lt;p&gt;По порядку:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Создаем virtualenv специально для сервера LSP. Лучше python3.6+.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Устанавливаем туда наш сервер (этот релиз уже содержит упомянутые выше исправления):&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  pip install https://github.com/st4lk/python-language-server/archive/0.22.0a1.zip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Если хотите создать requirements.txt - то туда можно вставлять ссылку на zip файл без каких-либо префиксов/суффиксов.&lt;/p&gt;

&lt;p&gt;Хотя возможно, что на момент чтения статьи это уже все исправлено в официальной версии &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;gt; 0.22&lt;/code&gt;. Не поленитесь проверить основной репозиторий.&lt;/p&gt;

&lt;h2 id=&quot;sublime-text&quot;&gt;Sublime Text&lt;/h2&gt;
&lt;p&gt;Теперь перейдем к настройке IDE. В этом посте речь пойдет о Sublime Text. Мне нравится этот редактор кода. Хоть это и не полноценный IDE, но я люблю его скорость, его vintage режим, мультикурсоры и много других маленьких фишек.&lt;/p&gt;

&lt;p&gt;Итак, как же подружить Sublime с LSP?
В первую очередь, нам понадобится плагин для общения с LSP сервером: &lt;a href=&quot;https://github.com/tomv564/LSP&quot;&gt;https://github.com/tomv564/LSP&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Теперь самое важное - правильно его настроить.
Идем в настройки нашего плагина (на MacOS это &lt;em&gt;Sublime Text -&amp;gt; Preferences -&amp;gt; Package Settings -&amp;gt; LSP -&amp;gt; Settings&lt;/em&gt;).
В пользовательских настройках вводим примерно следующее:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;clients&quot;: {
    &quot;pyls&quot;:
    {
      &quot;enabled&quot;: true,
      &quot;command&quot;: [
        &quot;~/.virtualenvs/python-language-server/bin/pyls&quot;
      ],
      &quot;settings&quot;: {
        &quot;pyls&quot;: {
          &quot;configurationSources&quot;: [&quot;flake8&quot;],
          &quot;plugins&quot;: {
            &quot;jedi_definition&quot;: {
              &quot;follow_imports&quot;: true
            }
          }
        }
      },
      &quot;scopes&quot;: [&quot;source.python&quot;],
      &quot;syntaxes&quot;: [
        &quot;Packages/Python/Python.sublime-syntax&quot;,
        &quot;Packages/Djaneiro/Syntaxes/Python Django.tmLanguage&quot;
      ],
      &quot;languageId&quot;: &quot;python&quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Давайте пройдемся по основным настройкам.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“command”&lt;/strong&gt; - путь к исполняемому файлу нашего pyls сервера. Как видно, у меня он установлен в virtualenv &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.virtualenvs/python-language-server/&lt;/code&gt; (я использую &lt;a href=&quot;https://virtualenvwrapper.readthedocs.io/en/latest/&quot;&gt;virtualenvwrapper&lt;/a&gt;). Это не виртуальное окружение вашего проекта! Здесь установлен только pyls.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“settings” : “pyls” : “configurationSources”&lt;/strong&gt;. Тут можно указать, где брать настройки линтера для проекта. По умолчанию это “pycodestyle”, однако я чаще использую flake8. Т.о. pyls будет искать настройки в таких файлах:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&apos;.flake8&apos;, &apos;setup.cfg&apos; (секция [flake8]), &apos;tox.ini&apos;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Настройка &lt;strong&gt;“follow_imports”: true&lt;/strong&gt;. Без нее, goto будет показывать лишь место импорта, а не саму реализацию. Мне кажется такое поведение не приносит особой пользы, обычно я хочу посмотреть именно на реализацию функции или класса, а не то, откуда он был импорирован. Кстати, чтобы это было воспринято сервером, потребовался небольшой патч: &lt;a href=&quot;https://github.com/palantir/python-language-server/pull/404/&quot;&gt;https://github.com/palantir/python-language-server/pull/404/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Еще важный момент: настройка &lt;strong&gt;“syntaxes”&lt;/strong&gt;. Если вы используйте плагин &lt;a href=&quot;https://github.com/squ1b3r/Djaneiro&quot;&gt;Djaneiro&lt;/a&gt; (добавляет ряд фишек для работы с Django проектом), то sublime будет считать синтаксис python файлов - Djaneiro, а не дефолтный Python. Поэтому нужно указать его для нашего LSP сервера, иначе Sublime просто не будет его запускать.&lt;/p&gt;

&lt;p&gt;Тут мы объявили глобальные настройки, которые будут применяться ко всем файлам с синтаксисом python.
А как объявить настройки, специфичные для каждого конкретного проекта?&lt;/p&gt;

&lt;p&gt;Как ни странно, их можно объявить в настройках проекта :). Идем &lt;em&gt;Project -&amp;gt; Edit project&lt;/em&gt; и добавляем следующее:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;folders&quot;:
  [
      {
          &quot;path&quot;: &quot;/Path/to/my/project&quot;
      },
  ],
  &quot;settings&quot;:
  {
    &quot;LSP&quot;:
    {
      &quot;pyls&quot;:
      {
        &quot;env&quot;:
        {
          &quot;VIRTUAL_ENV&quot;: &quot;/path/to/my/project/virtualenv/&quot;
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;С помощью &lt;strong&gt;“VIRTUAL_ENV”&lt;/strong&gt; мы можем указать, где живет virtualenv проекта. Т.о. pyls будет знать, где искать установленные пакеты для автокомплита, goto и прочего.&lt;/p&gt;

&lt;p&gt;Итак, запускаем. Предположим, у нас такой django проект:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;project
├── ...
├── my_app
│   ├── ...
│   ├── forms.py
│   └── models.py
├── manage.py
└── setup.cfg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Простейший файл models.py:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from django.db import models


class Book(models.Model):
    &quot;&quot;&quot;
    This is docstring of Book model.
    Example for LSP demostration.
    &quot;&quot;&quot;

    title = models.CharField(max_length=50)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;и forms.py:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from django.forms import ModelForm
from .models import Book


class BookForm(ModelForm):

    class Meta:
        model = Book
        fields = &apos;__all__&apos;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;В файле setup.cfg есть секция &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[flake8]&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[flake8]
ignore = D202,D205,D211
max-line-length = 99
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Что же нам теперь доступно?
Из коробки, сервер предоставляет возможности &lt;a href=&quot;https://jedi.readthedocs.io/en/latest/&quot;&gt;jedi&lt;/a&gt;, например Definitions (goto), References, автокомплит и кое-что еще.&lt;/p&gt;

&lt;p&gt;При наведении курсора отображается docstring объекта, а так же возможные действия над ним:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.ibb.co/0yW1sRd/sublime-lsp-popup-with-docstring-and-actions.png&quot; alt=&quot;Sublime Text и Language Server Protocol (LSP): окно при наведении курсора с документацией и действиям&quot; title=&quot;Sublime Text и Language Server Protocol (LSP): окно при наведении курсора с документацией и действиями&quot; /&gt;&lt;/p&gt;

&lt;p&gt;При нажатии на Definition мы перейдем в файл и место, где класс объявлен.
При нажатии на References - увидим, где объект используется:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.ibb.co/26LW2ys/sublime-lsp-references.png&quot; alt=&quot;Sublime Text и Language Server Protocol (LSP): References&quot; title=&quot;Sublime Text и Language Server Protocol (LSP): References&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Так же работает автокомплит:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.ibb.co/cb2gKDJ/sublime-lsp-autocomplete-methods.png&quot; alt=&quot;Sublime Text и Language Server Protocol (LSP): автокомплит методов&quot; title=&quot;Sublime Text и Language Server Protocol (LSP): автокомплит методов&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.ibb.co/zQ6ZXHh/sublime-lsp-autocomplete-fields.png&quot; alt=&quot;Sublime Text и Language Server Protocol (LSP): автокомплит полей&quot; title=&quot;Sublime Text и Language Server Protocol (LSP): автокомплит полей&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Но ошибки синтаксиса и pep8 отображаться не будут. Чтобы они проверялись, нужно установить в virtualenv с нашим python language server’ом эти пакеты:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install mccabe
pip install pyflakes
pip install pycodestyle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Вуаля, теперь редактор выдает подсказки:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.ibb.co/VYCWVtY/sublime-lsp-invalid-syntax.png&quot; alt=&quot;Sublime Text и Language Server Protocol (LSP): ошибка синтаксиса&quot; title=&quot;Sublime Text и Language Server Protocol (LSP): ошибка синтаксиса&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.ibb.co/rph2V6X/sublime-lsp-pep8-warning.png&quot; alt=&quot;Sublime Text и Language Server Protocol (LSP): сообщение об ошибке стиля кодирования&quot; title=&quot;Sublime Text и Language Server Protocol (LSP): сообщение об ошибке стиля кодирования&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Напомню, что настройки для линтера автоматически берутся из setup.cfg (согласно моим настройкам pyls).
Т.е. правила &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D202,D205,D211&lt;/code&gt; будут игнорироваться, а максимальная длина строки будет 99, вместо дефолтной 80.&lt;/p&gt;

&lt;p&gt;Можно еще подключить к серверу &lt;a href=&quot;http://mypy-lang.org/&quot;&gt;mypy&lt;/a&gt;. Для этого нужен соответствующий &lt;a href=&quot;https://github.com/tomv564/pyls-mypy&quot;&gt;плагин&lt;/a&gt;. Но это постараюсь описать в будущей статье, если руки дойдут, там тоже есть вопросы.&lt;/p&gt;

&lt;p&gt;В итоге у нас есть работающий Python Language Server в Sublime Text 3.
Как видно, опыт не из простых, но я все еще держусь за этот редактор кода, привычка.
Да, я иногда использую Pycharm, где фишек очень и очень много. И Visual Studio Code неплох, но к sublime’у сердце прикипело что ли.&lt;/p&gt;

&lt;p&gt;Какие могу стделать выводы:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;немного сыровато все, приходится делать PR’ы, а принимаются они долго.&lt;/li&gt;
  &lt;li&gt;Sublime LSP не работает в правом окне (&lt;em&gt;View -&amp;gt; Layout -&amp;gt; Columns: 2&lt;/em&gt;), нужно видимо опять дорабатывать&lt;/li&gt;
  &lt;li&gt;стоит пристальнее посмотреть в сторону реализации &lt;a href=&quot;https://github.com/Microsoft/python-language-server/&quot;&gt;python language server от microsoft&lt;/a&gt;, т.к. скорее всего тренд будет за ним.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ну а пока получился вполне рабочий вариант, пользуюсь им в повседневной работе.&lt;/p&gt;

&lt;p&gt;И спасибо &lt;a href=&quot;https://twitter.com/grigoryvp&quot;&gt;Григорию Петрову&lt;/a&gt; за его &lt;a href=&quot;http://www.moscowpython.ru/meetup/58/pyre-type-checker/&quot;&gt;доклад на Moscow Python&lt;/a&gt;. Из него я и узнал о существовании language server protocol.&lt;/p&gt;</content><author><name></name></author><category term="python" /><category term="sublime" /><category term="lsp" /><summary type="html">Language Server Protocol (LSP) Language Server Protocol (LSP) - протокол для общения между IDE и языковым сервером. Сервер предоставляет такие функции, как автокомплит, переход к функции (goto) и прочее. Т.е. когда IDE нужно показать автокомплит на языке, скажем, python - происходит запрос к специальному серверу. В ответе возвращаются необходимые данные, которые IDE уже может отобразить. Радует то, что это инициатива крупной компании - Microsoft.</summary></entry><entry><title type="html">Ловушка при подсчете связанных объектов в Django</title><link href="https://st4lk.github.io/blog/2017/01/14/count-filtered-related-objects-django.html" rel="alternate" type="text/html" title="Ловушка при подсчете связанных объектов в Django" /><published>2017-01-14T18:19:43+00:00</published><updated>2017-01-14T18:19:43+00:00</updated><id>https://st4lk.github.io/blog/2017/01/14/count-filtered-related-objects-django</id><content type="html" xml:base="https://st4lk.github.io/blog/2017/01/14/count-filtered-related-objects-django.html">&lt;p&gt;&lt;a href=&quot;/blog/2017/01/14/count-filtered-related-objects-django.html&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/172931/85893628.c6b/0_1f68eb_c4171bf7_L.png&quot; alt=&quot;Ловушка при подсчете связанных объектов в Django&quot; title=&quot;Ловушка при подсчете связанных объектов в Django&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Задача: для каждого объекта подсчитать количество связанных объектов, удовлетворяющих определенному условию.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Пример:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Category(models.Model):
    title = models.CharField(max_length=50)

class Article(models.Model):
    title = models.CharField(max_length=50)
    category = models.ForeignKey(Category)
    approved_at = models.DateTimeField(blank=True, null=True)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Видим, что поле &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Article.approved_at&lt;/code&gt; хранит время одобрения статьи, причем оно может быть пустым (т.е. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt; в базе данных).&lt;/p&gt;

&lt;p&gt;Создадим тестовые данные:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from django.utils import timezone

c1 = Category.objects.create(title=&apos;c1&apos;)
c2 = Category.objects.create(title=&apos;c2&apos;)

a1 = Article.objects.create(category=c1, title=&apos;a1&apos;)
a2 = Article.objects.create(category=c1, title=&apos;a2&apos;, approved_at=timezone.now())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Итого у нас две категории. У первой есть одна одобренная статья и одна неодобренная. У второй категории статей нет.&lt;/p&gt;

&lt;p&gt;Для начала подсчитаем, сколько вообще статей в каждой категории:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from django.db.models import Count

&amp;gt;&amp;gt;&amp;gt; Category.objects.annotate(
...     article_count=Count(&apos;article&apos;)
... ).values(&apos;title&apos;, &apos;article_count&apos;)

&amp;lt;QuerySet [{&apos;article_count&apos;: 2, &apos;title&apos;: u&apos;c1&apos;}, {&apos;article_count&apos;: 0, &apos;title&apos;: u&apos;c2&apos;}]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;SQL запрос, который построила ORM Django, вполне ожидаем:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT &quot;main_category&quot;.&quot;title&quot;, COUNT(&quot;main_article&quot;.&quot;id&quot;) AS &quot;article_count&quot;
    FROM &quot;main_category&quot;
    LEFT OUTER JOIN &quot;main_article&quot; ON (&quot;main_category&quot;.&quot;id&quot; = &quot;main_article&quot;.&quot;category_id&quot;)
    GROUP BY &quot;main_category&quot;.&quot;id&quot;, &quot;main_category&quot;.&quot;title&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ок, давайте подсчитаем только одобренные статьи. Если бы мы писали на SQL, то можно было бы просто добавить еще одно условие для JOIN:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT &quot;main_category&quot;.&quot;title&quot;, COUNT(&quot;main_article&quot;.&quot;id&quot;) AS &quot;article_count&quot;
    FROM &quot;main_category&quot;
    LEFT OUTER JOIN &quot;main_article&quot; 
        ON (&quot;main_category&quot;.&quot;id&quot; = &quot;main_article&quot;.&quot;category_id&quot; AND
            &quot;main_article&quot;.&quot;approved_at&quot; IS NOT NULL)
    GROUP BY &quot;main_category&quot;.&quot;id&quot;, &quot;main_category&quot;.&quot;title&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;К сожалению, Django ORM не поддерживает фильтры для &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Count&lt;/code&gt;  (по крайне мере v1.10). Но начиная с v1.8 у нас есть &lt;a href=&quot;https://docs.djangoproject.com/en/dev/ref/models/conditional-expressions/&quot;&gt;условные выражения&lt;/a&gt; и с помощью них можно выполнить такой трюк:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from django.db.models import Count, Case, When

&amp;gt;&amp;gt;&amp;gt; Category.objects.annotate(
...     article_count=Count(
...         Case(When(article__approved_at__isnull=False, then=1))
...     )
... ).values(&apos;title&apos;, &apos;article_count&apos;)

&amp;lt;QuerySet [{&apos;article_count&apos;: 1, &apos;title&apos;: u&apos;c1&apos;}, {&apos;article_count&apos;: 0, &apos;title&apos;: u&apos;c2&apos;}]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Данные верные. SQL запрос получился таким:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT &quot;main_category&quot;.&quot;title&quot;, COUNT(
    CASE WHEN &quot;main_article&quot;.&quot;approved_at&quot; IS NOT NULL THEN 1 ELSE NULL END
) AS &quot;article_count&quot;
FROM &quot;main_category&quot;
LEFT OUTER JOIN &quot;main_article&quot; ON (&quot;main_category&quot;.&quot;id&quot; = &quot;main_article&quot;.&quot;category_id&quot;)
GROUP BY &quot;main_category&quot;.&quot;id&quot;, &quot;main_category&quot;.&quot;title&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;ловушка&quot;&gt;Ловушка&lt;/h2&gt;

&lt;p&gt;Теперь интересный вопрос, как нам подсчитать количество &lt;em&gt;неодобренных&lt;/em&gt; статей?&lt;/p&gt;

&lt;p&gt;Первое, что приходит в голову, это просто поменять &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;False&lt;/code&gt; на &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;True&lt;/code&gt; в запросе:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; Category.objects.annotate(
...     article_count=Count(
...         Case(When(article__approved_at__isnull=True, then=1))
...     )
... ).values(&apos;title&apos;, &apos;article_count&apos;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Вот только ответ получим не совсем правильный:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;QuerySet [{&apos;article_count&apos;: 1, &apos;title&apos;: u&apos;c1&apos;}, {&apos;article_count&apos;: 1, &apos;title&apos;: u&apos;c2&apos;}]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;У второй категории откуда-то нашлась неодобренная статья.&lt;/p&gt;

&lt;p&gt;Смотрим SQL:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT &quot;main_category&quot;.&quot;title&quot;, COUNT(
    CASE WHEN &quot;main_article&quot;.&quot;approved_at&quot; IS NULL THEN 1 ELSE NULL END
) AS &quot;article_count&quot;
FROM &quot;main_category&quot;
LEFT OUTER JOIN &quot;main_article&quot; ON (&quot;main_category&quot;.&quot;id&quot; = &quot;main_article&quot;.&quot;category_id&quot;)
GROUP BY &quot;main_category&quot;.&quot;id&quot;, &quot;main_category&quot;.&quot;title&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Условие&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CASE WHEN &quot;main_article&quot;.&quot;approved_at&quot; IS NULL THEN 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;срабатывает даже тогда, когда у категории вообще нет статьи.&lt;/p&gt;

&lt;p&gt;В нашем случае запрос можно исправить так:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; Category.objects.annotate(
...     article_count=Count(
...         Case(
...             When(
...                 article__id__isnull=False,
...                 article__approved_at__isnull=True,
...                 then=1
...             )
...         )
...     )
... ).values(&apos;title&apos;, &apos;article_count&apos;)

&amp;lt;QuerySet [{&apos;article_count&apos;: 1, &apos;title&apos;: u&apos;c1&apos;}, {&apos;article_count&apos;: 0, &apos;title&apos;: u&apos;c2&apos;}]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;мораль&quot;&gt;Мораль&lt;/h2&gt;

&lt;p&gt;При проверках вида &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IS NULL&lt;/code&gt; нужно быть особенно осторожным и прикидывать возможные побочные эффекты!&lt;/p&gt;</content><author><name></name></author><category term="database" /><category term="django" /><category term="sql" /><summary type="html">Задача: для каждого объекта подсчитать количество связанных объектов, удовлетворяющих определенному условию.</summary></entry><entry><title type="html">Django: сигнал или метод модели?</title><link href="https://st4lk.github.io/blog/2016/08/01/django-signal-or-model-method.html" rel="alternate" type="text/html" title="Django: сигнал или метод модели?" /><published>2016-08-01T18:19:43+00:00</published><updated>2016-08-01T18:19:43+00:00</updated><id>https://st4lk.github.io/blog/2016/08/01/django-signal-or-model-method</id><content type="html" xml:base="https://st4lk.github.io/blog/2016/08/01/django-signal-or-model-method.html">&lt;p&gt;&lt;a href=&quot;/blog/2016/08/01/django-signal-or-model-method.html&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/95108/85893628.c69/0_1d577c_baad2650_orig.png&quot; alt=&quot;Django: сигнал или метод модели?&quot; title=&quot;Django: сигнал или метод модели?&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Когда нужно написать какой-либо функционал, который должен быть выполнен при сохранении django модели, у меня всегда возникал вопрос - где его лучше реализовать. В сигнале или в методе &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;save()&lt;/code&gt; модели? Давайте разберемся, что и в каких ситуациях более удобно.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;в-каких-случаях-использовать-методы-модели-save-delete&quot;&gt;В каких случаях использовать методы модели save(), delete()?&lt;/h3&gt;

&lt;p&gt;На мой взгляд, использовать методы уместно, когда функционал касается исключительно данной модели. Например, при сохранении модели нужно заполнить какое-то поле автоматически, исходя из совокупности данных других полей.&lt;/p&gt;

&lt;p&gt;Часто приводят аргумент в пользу сигналов, что якобы их удобно использовать в похожих случаях. Т.е. один и тот же сигнал можно прикрепить к разным моделям. Аргумент для меня довольно странный, ведь точно так же можно объявить функцию или метод в классе-миксине и использовать их в &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;save()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;В принципе, все это можно сделать и в сигналах, почему я предпочитаю метод save? Ответ простой - это нагляднее. Когда вы смотрите на код модели, вы сразу видите, что будет происходить что-то при ее сохранении. В случае сигналов, особенно если нет четкого правила, где они объявлены, логика часто ускользает из виду.&lt;/p&gt;

&lt;p&gt;Следует отметить, что сигналы на удаление &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pre_delete&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;post_delete&lt;/code&gt; имеют то преимущество над методом &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;delete()&lt;/code&gt;, что они &lt;a href=&quot;https://docs.djangoproject.com/en/1.9/topics/db/models/#overriding-predefined-model-methods&quot;&gt;вызываются&lt;/a&gt; при каскадном удалении объектов и при удалении всего queryset’а, чего не происходит в случае с методом модели. Тут нужно смотреть по ситуации, возможно массовым удалением можно пренебречь.&lt;/p&gt;

&lt;p&gt;А вот при массовом создании или обновлении объектов не вызывается ни метод модели save(), ни сигналы pre_save, post_save. Тут они равнозначны.
Да, если вы переопределяете save() или delete(), не забудьте вызывать метод родительского класса.&lt;/p&gt;

&lt;h3 id=&quot;когда-лучше-использовать-сигналы&quot;&gt;Когда лучше использовать сигналы?&lt;/h3&gt;

&lt;p&gt;Сигналы намного удобнее, если вы создаете переиспользуемое приложение.
Тогда пользователи вашего приложения могут легко прикрепить ваши сигналы к своим моделям, не меняя код этих моделей.&lt;/p&gt;

&lt;p&gt;Альтернатива - это функция или класс-миксин. Но согласитесь, что логику из сторонней аппы все же удобнее прикрепить в виде сигнала. Это красивей и удобней. Кроме того, если вдруг вы решите отказаться от стороннего приложения, вы можете легко отцепить и его сигналы.&lt;/p&gt;

&lt;p&gt;Это справедливо и в том случае, когда у вас есть два приложения в рамках одного проекта (это не какие-то переиспользуемые аппы), и при сохранении модели из одного приложения вам нужно что-то сделать с моделью из другого.&lt;/p&gt;

&lt;p&gt;Например, есть аппа пользователей и аппа отчетов. При создании пользователя вам нужно автоматически создать отчет. В этом случае я предпочитаю создать сигнал в той аппе, к которой относится функционал, т.е. в приложении с отчетами.&lt;/p&gt;

&lt;p&gt;Почему так?&lt;/p&gt;

&lt;p&gt;Во-первых, мы держим логику в том месте, к которому эта логика относится.
Во-вторых, если по каким-то причинам мы решим удалить отчеты из проекта, мы никак не затронем приложение пользователей.&lt;/p&gt;

&lt;h3 id=&quot;где-объявлять-сигналы-и-где-их-прикреплять&quot;&gt;Где объявлять сигналы и где их прикреплять?&lt;/h3&gt;

&lt;p&gt;Как советует &lt;a href=&quot;https://docs.djangoproject.com/en/1.9/topics/signals/#connecting-receiver-functions&quot;&gt;документация django&lt;/a&gt; (секция “Where should this code live?”), сигналы лучше хранить не в моделях и не в __init__.py, а в отдельном подмодуле
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;signals&lt;/code&gt; приложения. Это уберет головную боль с импортами.&lt;/p&gt;

&lt;p&gt;Но чтобы сигналы прикрепились, должен быть исполнен код, который их прикрепляет. Когда мы объявляем их в модуле с моделями, то код импортируется автоматически. Однако если код с сигналами объявлен в другом месте - он автоматически не выполнится. Поэтому нужно использовать метод &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ready()&lt;/code&gt; &lt;a href=&quot;https://docs.djangoproject.com/en/1.9/ref/applications/&quot;&gt;конфигурационного класса приложения&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;В целом, я следую рекомендации из &lt;a href=&quot;http://stackoverflow.com/a/22924754/821594&quot;&gt;этого&lt;/a&gt; ответа на stackoverflow.
Приведу пример кода для уже упомянутого случая, когда есть приложение с отчетами (report) и нам нужно создавать отчет при создании нового пользователя.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Создаем в приложении подмодуль &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;signals&lt;/code&gt;, в котором будет файл handlers.py&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; reports/signals/__init__.py
 reports/signals/handlers.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Объявляем наши сигналы именно в файле handlers.py&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; from django.db.models.signals import post_save
 from django.dispatch import receiver
 from django.contrib.auth import get_user_model

 from reports.models import Report

 User = get_user_model()

 @receiver(post_save, sender=User)
 def create_user_report(sender, instance, created, **kwargs):
     if created:
         Report.objects.create(user=instance)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Создаем класс конфигурации приложения&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; reports/apps.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;С кодом:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; from django.apps import AppConfig

 class ReportsConfig(AppConfig):
     name = &apos;reports&apos;
     verbose_name = &apos;Reports&apos;

     def ready(self):
         import reports.signals.handlers  # noqa
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Таким образом мы прикрепили сигнал. В данном случаем мы использовали декоратор &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@receiver&lt;/code&gt;, поэтому нам достаточно просто сделать импорт. Вместо декоратора тут можно было явно вызвать метод connect сигнала. Кому что больше нравится.&lt;/p&gt;

    &lt;p&gt;Не забываем указать, что наш класс &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReportsConfig&lt;/code&gt; - это конфиг приложения. Для этого в reports/__init__.py добавляем строку:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; default_app_config = &apos;reports.apps.ReportsConfig&apos;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Либо указываем явно ReportsConfig в settings.INSTALLED_APPS. Смотри &lt;a href=&quot;https://docs.djangoproject.com/en/dev/ref/applications/#configuring-applications&quot;&gt;доки django&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Если придерживаться такой схемы, то мы будем всегда знать, где находятся обработчики. Соответственно, не нужно бегать по всему модулю с моделями в поисках сигналов.&lt;/p&gt;</content><author><name></name></author><category term="django" /><category term="signal" /><summary type="html">Когда нужно написать какой-либо функционал, который должен быть выполнен при сохранении django модели, у меня всегда возникал вопрос - где его лучше реализовать. В сигнале или в методе save() модели? Давайте разберемся, что и в каких ситуациях более удобно.</summary></entry><entry><title type="html">Пробуем JSON в Django и PostgreSQL (и сравниваем с MongoDB)</title><link href="https://st4lk.github.io/blog/2015/09/30/trying-json-combo-django-and-postgresql.html" rel="alternate" type="text/html" title="Пробуем JSON в Django и PostgreSQL (и сравниваем с MongoDB)" /><published>2015-09-30T18:19:43+00:00</published><updated>2015-09-30T18:19:43+00:00</updated><id>https://st4lk.github.io/blog/2015/09/30/trying-json-combo-django-and-postgresql</id><content type="html" xml:base="https://st4lk.github.io/blog/2015/09/30/trying-json-combo-django-and-postgresql.html">&lt;p&gt;&lt;a href=&quot;/blog/2015/09/30/trying-json-combo-django-and-postgresql.html&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/3706/85893628.c69/0_19430e_cafd0257_XL.png&quot; alt=&quot;Пробуем JSON в Django и PostgreSQL&quot; title=&quot;Пробуем JSON в Django и PostgreSQL&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;В Django 1.9 будет добавлено поле &lt;a href=&quot;https://docs.djangoproject.com/en/1.9/ref/contrib/postgres/fields/#jsonfield&quot;&gt;JSONField&lt;/a&gt;, его можно использовать с базой данных PostgreSQL &amp;gt;= 9.4. Давайте попробуем с ним поработать и оценить, насколько оно удобно.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;На данный момент доступна альфа версия django 1.9, финальная запланирована на декабрь 2015.
Установить альфа версию можно так:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install --pre django
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Итак представим, что у нас есть интернет магазин, в котором мы предлагаем товары разных типов. Например, ноутбуки и футболки. Очевидно, что у таких товаров будет разный набор параметров: у футболок будет размер, цвет, а у ноутбуков - размер экрана, частота процессора, объем жесткого диска и прочее.
Один из подходов для работы с такими данными в SQL - &lt;a href=&quot;https://en.wikipedia.org/wiki/Entity%E2%80%93attribute%E2%80%93value_model&quot;&gt;Entity–attribute–value model (EAV)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Но теперь у нас есть JSON, попробуем организовать данные с помощью этого типа.&lt;/p&gt;

&lt;p&gt;Создадим простейшую модель для товаров:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from django.db import models
from django.contrib.postgres.fields import JSONField

class Category(models.Model):
    name = models.CharField(max_length=100)

class Product(models.Model):
    name = models.CharField(max_length=100)
    category = models.ForeignKey(Category)
    price = models.IntegerField()
    attributes = JSONField()

    def __str__(self):
        return self.name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Как видим, у нас будет несколько общих полей для всех товаров (name, category, price), а также специфичные для каждого наименования атрибуты (attributes) в виде поля JSON.&lt;/p&gt;

&lt;p&gt;Создадим несколько объектов:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tshirt = Category.objects.create(name=&apos;tshirts&apos;)
notebook = Category.objects.create(name=&apos;notebook&apos;)

# Tshirts
Product.objects.create(name=&apos;Silk tshirt&apos;, category=tshirt, price=100, attributes={
    &apos;colors&apos;: [&apos;red&apos;, &apos;black&apos;],
    &apos;sizes&apos;: [&apos;S&apos;, &apos;M&apos;],
    &apos;model&apos;: &apos;polo&apos;,
    &apos;material&apos;: &apos;silk&apos;,
})

Product.objects.create(name=&apos;Bamboo tshirt&apos;, category=tshirt, price=120, attributes={
    &apos;colors&apos;: [&apos;white&apos;, &apos;yellow&apos;],
    &apos;sizes&apos;: [&apos;M&apos;, &apos;L&apos;, &apos;XL&apos;],
    &apos;model&apos;: &apos;poet&apos;,
    &apos;material&apos;: &apos;bamboo&apos;,
})

# Notebooks
Product.objects.create(name=&apos;MacBook Pro&apos;, category=notebook, price=2000, attributes={
    &apos;brand&apos;: &apos;Apple&apos;,
    &apos;screen&apos;: 15.0,
    &apos;speed&apos;: 2200,
    &apos;hd&apos;: 256,
})

Product.objects.create(name=&apos;ATIV Book 9&apos;, category=notebook, price=1200, attributes={
    &apos;brand&apos;: &apos;Samsung&apos;,
    &apos;screen&apos;: 12.2,
    &apos;speed&apos;: 2400,
    &apos;hd&apos;: 128,
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;запросы&quot;&gt;Запросы&lt;/h3&gt;

&lt;p&gt;Посмотрим, какие запросы мы можем делать.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Получить все футболки размера ‘M’ и ‘L’ (у товара есть оба размера):&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt; Product.objects.filter(category=tshirt, attributes__contains={&apos;sizes&apos;: [&apos;M&apos;, &apos;L&apos;]})
 [&amp;lt;Product: Bamboo tshirt&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Получить все футболки с размерами ‘M’ и ‘L’, белого и желтого цветов, с надписей (model = poet):&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt; Product.objects.filter(category=tshirt,
     attributes__contains={&apos;sizes&apos;: [&apos;M&apos;, &apos;L&apos;], &apos;colors&apos;: [&apos;white&apos;, &apos;yellow&apos;],
     &apos;model&apos;: &apos;poet&apos;})
 [&amp;lt;Product: Bamboo tshirt&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Получить все ноутбуки с частотой процессора 2400 и диагональю экрана 12.2&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt; Product.objects.filter(category=notebook,
     attributes__contains={&apos;speed&apos;: 2400, &apos;screen&apos;: 12.2})
 [&amp;lt;Product: ATIV Book 9&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Получить все футболки красного цвета, поло, с размерами ‘M’ или ‘L’&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt; Product.objects.filter(category=tshirt,
     attributes__contains={&apos;colors&apos;: [&apos;red&apos;], &apos;model&apos;: &apos;polo&apos;},
     attributes__sizes__has_any_keys=[&apos;M&apos;, &apos;L&apos;])
 [&amp;lt;Product: Silk tshirt&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Получить все ноутбуки с частотой процессора свыше 2000 и диагональю экрана больше 13&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt; Product.objects.filter(category=notebook, attributes__speed__gt=2000,
     attributes__screen__gt=13)
 [&amp;lt;Product: MacBook Pro&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Получить все ноутбуки с частотой процессора 2200 или 2400&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt; Product.objects.filter(category=notebook, attributes__speed__in=(2200, 2400))
 [&amp;lt;Product: ATIV Book 9&amp;gt;, &amp;lt;Product: MacBook Pro&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;или так:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt; from django.db.models import Q
 &amp;gt;&amp;gt;&amp;gt; Product.objects.filter(category=notebook).filter(
     Q(attributes__contains={&apos;speed&apos;: 2200}) | Q(attributes__contains={&apos;speed&apos;: 2400}))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;индексы&quot;&gt;Индексы&lt;/h3&gt;

&lt;p&gt;Посмотрим, насколько эффективны могут быть наши запросы.&lt;/p&gt;

&lt;p&gt;В PostgreSQL для JSON полей можно применять &lt;a href=&quot;http://www.postgresql.org/docs/9.4/static/datatype-json.html#JSON-INDEXING&quot;&gt;разные индексы&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;GIN&lt;/p&gt;

    &lt;p&gt;данный индекс в свою очередь может поддерживать различные операторы:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;jsonb_ops (по умолчанию), поддерживает операторы &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@&amp;gt;, ?, ?&amp;amp;, ?|&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;jsonb_path_ops, поддерживает только оператор &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@&amp;gt;&lt;/code&gt;, но работает быстрее и занимает меньше места&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;btree&lt;/p&gt;

    &lt;p&gt;может быть полезен только для поиска полного соответствия json документов&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;hash&lt;/p&gt;

    &lt;p&gt;как и btree, полезен для поиска полного соответствия json документов&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;соответсвие-некоторых-операций-в-django-и-postgres-операторов&quot;&gt;Соответсвие некоторых операций в django и postgres операторов&lt;/h4&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Django        Postgres
----------------------
contains      @&amp;gt;
contained_by  &amp;lt;@
has_key       ?
has_any_keys  ?|
has_keys      ?&amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;В нашем случае наиболее интересный оператор - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@&amp;gt;&lt;/code&gt;, именно в него django транслирует фильтр &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;contains&lt;/code&gt; для json полей.&lt;/p&gt;

&lt;p&gt;Если мы просто добавим &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;db_index=True&lt;/code&gt;, будет создан btree индекс:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Product(models.Model):
    ...
    attributes = JSONField(db_index=True)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Для наших запросов намного полезней будет GIN индекс. Для его создания воспользуемся операцией &lt;a href=&quot;https://docs.djangoproject.com/en/dev/ref/migration-operations/#django.db.migrations.operations.RunSQL&quot;&gt;RunSQL&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Сперва создадим пустую миграцию. В моем случае приложение с товарами называется catalogue_simple&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python manage.py makemigrations --empty catalogue_simple
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;В созданном файле (у меня это 0002_auto_20150928_1610.py) добавим пару импортов, а также команды для создания и отката индекса:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from catalogue_simple.models import Product
from psycopg2.extensions import AsIs

class Migration(migrations.Migration):
    # ...
    operations = [
        migrations.RunSQL(
            [(&quot;CREATE INDEX catalogue_product_attrs_gin ON %s USING gin&quot;
                &quot;(attributes jsonb_path_ops);&quot;, [AsIs(Product._meta.db_table)])],
            [(&apos;DROP INDEX catalogue_product_attrs_gin;&apos;, None)],
        )
    ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Здесь catalogue_product_attrs_gin - это название индекса (выбираем сами), attributes - название JSON поля, Product - модель товара. Создаем индекс jsonb_path_ops, т.к. в основном нам будет интересна только операция contains.
Конструкция AsIs нужна, чтобы соответствующий параметр &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%s&lt;/code&gt; не оборачивался в одиночные кавычки.&lt;/p&gt;

&lt;p&gt;А btree индекс нам не нужен, поэтому не будем добавлять &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;db_index=True&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Product(models.Model):
    ...
    attributes = JSONField()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;тестовые-данные&quot;&gt;Тестовые данные&lt;/h4&gt;

&lt;p&gt;Я сгенерил 1 000 000 товаров 4-х разных категорий, по 250 000 в каждой. У каждой категории товаров - свои атрибуты, от 4-х до 7. Некоторые значения - скалярные величины (material у футболок), некоторые - списки (sizes у футболок).&lt;/p&gt;

&lt;h4 id=&quot;запросы-по-индексам&quot;&gt;Запросы по индексам&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Получить все футболки размера ‘M’ и ‘L’ (у товара есть оба размера):&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt; Product.objects.filter(category=tshirt, attributes__contains={&apos;sizes&apos;: [&apos;M&apos;, &apos;L&apos;]})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Соответсвующий SQL (я заменил перечисление всех полей на &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt; для краткости):&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; SELECT * FROM &quot;catalogue_simple_product&quot; WHERE
 (&quot;catalogue_simple_product&quot;.&quot;category_id&quot; = 5
     AND
 &quot;catalogue_simple_product&quot;.&quot;attributes&quot; @&amp;gt; &apos;{&quot;sizes&quot;: [&quot;M&quot;, &quot;L&quot;]}&apos;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Без GIN индекса для поля attributes запрос выполняется 292 ms, &lt;a href=&quot;http://explain.depesz.com/s/xmWS&quot;&gt;EXPLAIN ANALYSE&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;Этот же запрос после создания GIN индекса для поля attributes - 250 ms, &lt;a href=&quot;http://explain.depesz.com/s/cHk&quot;&gt;EXPLAIN ANALYSE&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;В данном случае большого выйгрыша мы не получили (было 292ms, стало 250ms), но это потому что результат содержит много строк: 66412.
 Это называется “low selectivity”.
 Selectivity - отношение отфильтрованных записей к их общему числу. Если это отношение стремится к 1, говорят low selectivity, если к 0 - high selectivity.
 С помощью этого показателя можно оценить эффективность индекса. При low selectivity индекс не принесет особой пользы.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Получить все футболки с размерами ‘M’ и ‘L’, белого и желтого цветов, с надписей (model = poet):&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt; Product.objects.filter(category=tshirt,
     attributes__contains={&apos;sizes&apos;: [&apos;M&apos;, &apos;L&apos;], &apos;colors&apos;: [&apos;white&apos;, &apos;yellow&apos;],
     &apos;model&apos;: &apos;poet&apos;})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Соответствующий SQL:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; SELECT * FROM &quot;catalogue_simple_product&quot; WHERE
 (&quot;catalogue_simple_product&quot;.&quot;category_id&quot; = 5
     AND
 &quot;catalogue_simple_product&quot;.&quot;attributes&quot; @&amp;gt; &apos;{
     &quot;colors&quot;: [&quot;white&quot;, &quot;yellow&quot;],
     &quot;model&quot;: &quot;poet&quot;,
     &quot;sizes&quot;: [&quot;M&quot;, &quot;L&quot;]
 }&apos;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Без GIN индекса - 240 ms, &lt;a href=&quot;http://explain.depesz.com/s/8Zx5&quot;&gt;EXPLAIN ANALYSE&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;После создания GIN индекса - 49 ms, &lt;a href=&quot;http://explain.depesz.com/s/qYN&quot;&gt;EXPLAIN ANALYSE&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;Прирост заметен: 240 ms vs 49 ms. Запрос возращает 3737 строк, большая selectivity чем в предыдущем запросе.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Получить все ноутбуки с частотой процессора 2400 и диагональю экрана 12.2&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt; Product.objects.filter(category=notebook,
     attributes__contains={&apos;speed&apos;: 2400, &apos;screen&apos;: 12.2})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Соответствующий SQL:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; SELECT * FROM &quot;catalogue_simple_product&quot; WHERE
 (&quot;catalogue_simple_product&quot;.&quot;category_id&quot; = 7
     AND
 &quot;catalogue_simple_product&quot;.&quot;attributes&quot; @&amp;gt; &apos;{&quot;screen&quot;: 12.2, &quot;speed&quot;: 2400}&apos;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Без GIN индекса - 222 ms, &lt;a href=&quot;http://explain.depesz.com/s/Ocgt&quot;&gt;EXPLAIN ANALYSE&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;После создания GIN индекса - 34 ms, &lt;a href=&quot;http://explain.depesz.com/s/Ik8E&quot;&gt;EXPLAIN ANALYSE&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;222ms vs 34ms. Запрос возращает 10389 строк.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Получить все футболки красного цвета, поло, с размерами ‘M’ или ‘L’&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt; Product.objects.filter(category=tshirt,
     attributes__contains={&apos;colors&apos;: [&apos;red&apos;], &apos;model&apos;: &apos;polo&apos;},
     attributes__sizes__has_any_keys=[&apos;M&apos;, &apos;L&apos;])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Соответствующий SQL:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; SELECT * FROM &quot;catalogue_simple_product&quot; WHERE
 (&quot;catalogue_simple_product&quot;.&quot;category_id&quot; = 5
     AND
 &quot;catalogue_simple_product&quot;.&quot;attributes&quot; @&amp;gt; &apos;{&quot;colors&quot;: [&quot;red&quot;], &quot;model&quot;: &quot;polo&quot;}&apos;
     AND
 &quot;catalogue_simple_product&quot;.&quot;attributes&quot; -&amp;gt; &apos;sizes&apos; ?| ARRAY[&apos;M&apos;, &apos;L&apos;]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Без GIN индекса - 253 ms, &lt;a href=&quot;http://explain.depesz.com/s/6SJ&quot;&gt;EXPLAIN ANALYSE&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;После создания GIN индекса - 78 ms, &lt;a href=&quot;http://explain.depesz.com/s/Lgb&quot;&gt;EXPLAIN ANALYSE&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;253 ms против 78 ms. Запрос возвращает 18428 строк. В этом запросе операция &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;has_any_keys&lt;/code&gt;
 никак не может использовать индекс, т.к. мы объявили индекс вида jsonb_path_ops.
 Однако, запрос вида &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;attributes&quot; -&amp;gt; &apos;sizes&apos; ?| ARRAY[&apos;M&apos;, &apos;L&apos;]&lt;/code&gt; не будет использовать и jsonb_ops индекс, т.к. мы ищем не по ключам первого уровня, а по значениям списка.
 Если нам часто нужен такой запрос и у него будет большая selectivity, то можно создать индекс именно на этот ключ в JSON поле. Примерно так:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; CREATE INDEX gin_sizes ON catalogue_simple_product USING gin ((attributes -&amp;gt; &apos;sizes&apos;));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Но в нашем случае этого делать не нужно, т.к. фильтр &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;attributes&quot; -&amp;gt; &apos;sizes&apos; ?| ARRAY[&apos;M&apos;, &apos;L&apos;]&lt;/code&gt; обладет низкой selectivity:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt; Product.objects.filter(category=tshirt,
     attributes__contains={&apos;colors&apos;: [&apos;red&apos;], &apos;model&apos;: &apos;polo&apos;},
     attributes__sizes__has_any_keys=[&apos;M&apos;, &apos;L&apos;]).count()
 18428

 &amp;gt;&amp;gt;&amp;gt; Product.objects.filter(category=tshirt,
     attributes__contains={&apos;colors&apos;: [&apos;red&apos;], &apos;model&apos;: &apos;polo&apos;}).count()
 25162
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Т.е. по размеру мы отфильтровываем лишь ~25%.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Получить все ноутбуки с частотой процессора свыше 2000 и диагональю экрана больше 13&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt; Product.objects.filter(category=notebook, attributes__speed__gt=2000,
     attributes__screen__gt=13)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Соответствующий SQL:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; SELECT * FROM &quot;catalogue_simple_product&quot; WHERE
 (&quot;catalogue_simple_product&quot;.&quot;category_id&quot; = 7
     AND
 &quot;catalogue_simple_product&quot;.&quot;attributes&quot; -&amp;gt; &apos;screen&apos; &amp;gt; &apos;13&apos;
     AND
 &quot;catalogue_simple_product&quot;.&quot;attributes&quot; -&amp;gt; &apos;speed&apos; &amp;gt; &apos;2000&apos;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;В данном случае GIN индекс нам не поможет. Если такие запросы используются часто,
 возможно имеет смысл создать btree индекс по конкретным ключам из JSON поля:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; CREATE INDEX attrs_screen_speed ON catalogue_simple_product ((attributes -&amp;gt; &apos;screen&apos;), (attributes -&amp;gt; &apos;speed&apos;));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Запрос возвращает 10536 строк.&lt;/p&gt;

    &lt;p&gt;Без btree индекса attrs_screen_speed - 352 ms, &lt;a href=&quot;http://explain.depesz.com/s/GWNM&quot;&gt;EXPLAIN ANALYSE&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;После создания btree индекса attrs_screen_speed - 46 ms, &lt;a href=&quot;http://explain.depesz.com/s/YQO&quot;&gt;EXPLAIN ANALYSE&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Получить все ноутбуки с частотой процессора 2200 или 2400&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt; Product.objects.filter(category=notebook, attributes__speed__in=(2200, 2400))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Соответствующий SQL:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; SELECT * FROM &quot;catalogue_simple_product&quot; WHERE
 (&quot;catalogue_simple_product&quot;.&quot;category_id&quot; = 7
     AND
 &quot;catalogue_simple_product&quot;.&quot;attributes&quot; -&amp;gt; &apos;speed&apos; IN (&apos;2200&apos;, &apos;2400&apos;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Этот запрос &lt;strong&gt;не&lt;/strong&gt; покрывается нашим GIN индексом. Время выполнения ~ 389 ms, &lt;a href=&quot;http://explain.depesz.com/s/6U9&quot;&gt;EXPLAIN ANALYSE&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;Попробуем переписать этот же запрос с использованием существующего GIN индекса&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt; from django.db.models import Q
 &amp;gt;&amp;gt;&amp;gt; Product.objects.filter(category=notebook).filter(Q(attributes__contains={&apos;speed&apos;: 2200}) | Q(attributes__contains={&apos;speed&apos;: 2400}))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;SQL:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; SELECT * FROM &quot;catalogue_simple_product&quot; WHERE
 (&quot;catalogue_simple_product&quot;.&quot;category_id&quot; = 7
     AND
 (&quot;catalogue_simple_product&quot;.&quot;attributes&quot; @&amp;gt; &apos;{&quot;speed&quot;: 2200}&apos;
         OR 
 &quot;catalogue_simple_product&quot;.&quot;attributes&quot; @&amp;gt; &apos;{&quot;speed&quot;: 2400}&apos;));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Здесь GIN индекс может быть использован, время выполнения ~ 337 ms &lt;a href=&quot;http://explain.depesz.com/s/Sdq&quot;&gt;EXPLAIN ANALYSE&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;Особой разницы нет. Однако, посмотрим на selectivity данного запроса.
 В результате мы имеем 124 995 строк из 250 000 возможных для данной категории, т.е. имеем очень низкий selectivty.&lt;/p&gt;

    &lt;p&gt;Создадим 100 ноутбуков с частотой процессора 3200 и 100 ноутбуков с частотой 3500. Других ноутбуков с такими скоростями в БД нет.
 Посмотрим насколько эффективно будет использовать индекс в этом случае.&lt;/p&gt;

    &lt;p&gt;Запрос без GIN индекса:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt; Product.objects.filter(category=notebook, attributes__speed__in=(3200, 3500))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Получаем те же ~ 391 ms &lt;a href=&quot;http://explain.depesz.com/s/ThI&quot;&gt;EXPLAIN ANALYSE&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;Теперь запрос, в котором может быт использован GIN индекс:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt; Product.objects.filter(category=notebook).filter(Q(attributes__contains={&apos;speed&apos;: 3200}) | Q(attributes__contains={&apos;speed&apos;: 3500}))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;В итоге получаем время выполнения лишь 0.773 ms! &lt;a href=&quot;http://explain.depesz.com/s/rqXN&quot;&gt;EXPLAIN ANALYSE&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;резюме-по-индексам&quot;&gt;Резюме по индексам&lt;/h4&gt;

&lt;p&gt;Как мы видим, мы можем использовать один индекс GIN (jsonb_path_ops) в запросах по всем атрибутам, а не по одному конкретному ключу!
Конечно, это не серебряная пуля, всегда нужно анализировать те данные, с которыми мы работаем и выбирать индексы исходя из нужных запросов.&lt;/p&gt;

&lt;h3 id=&quot;nosql-database-mongodb&quot;&gt;NoSQL database (MongoDB)&lt;/h3&gt;

&lt;p&gt;Давайте посмотрим, как мы можем хранить те же данные и выполнять аналогичные запросы в MongoDB (v3.0.6).&lt;/p&gt;

&lt;p&gt;Для того, чтобы использовать один индекс при фильтрации по неизвестным заранее полям в MongoDB, нам нужно будет использовать немного другую структуру данных.&lt;/p&gt;

&lt;p&gt;Поле attributes у нас будет списком, а значения - вложенные документы с ключами name и value:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; db.catalogue_simple.find().pretty()
{
    &quot;_id&quot; : ObjectId(&quot;560ab1970a0a88fe77d00f02&quot;),
    &quot;category&quot; : &quot;tshirts&quot;,
    &quot;name&quot; : &quot;Silk tshirt&quot;,
    &quot;price&quot; : 100,
    &quot;attributes&quot; : [
        {
            &quot;name&quot; : &quot;colors&quot;,
            &quot;value&quot; : &quot;red&quot;
        },
        {
            &quot;name&quot; : &quot;colors&quot;,
            &quot;value&quot; : &quot;black&quot;
        },
        {
            &quot;name&quot; : &quot;sizes&quot;,
            &quot;value&quot; : &quot;S&quot;
        },
        {
            &quot;name&quot; : &quot;sizes&quot;,
            &quot;value&quot; : &quot;M&quot;
        },
        {
            &quot;name&quot; : &quot;model&quot;,
            &quot;value&quot; : &quot;polo&quot;
        },
        {
            &quot;name&quot; : &quot;material&quot;,
            &quot;value&quot; : &quot;silk&quot;
        }
    ]
}
{
    &quot;_id&quot; : ObjectId(&quot;560ab1dd0a0a88fe77d00f03&quot;),
    &quot;category&quot; : &quot;tshirts&quot;,
    &quot;name&quot; : &quot;Bamboo tshirt&quot;,
    &quot;price&quot; : 120,
    &quot;attributes&quot; : [
        {
            &quot;name&quot; : &quot;colors&quot;,
            &quot;value&quot; : &quot;white&quot;
        },
        {
            &quot;name&quot; : &quot;colors&quot;,
            &quot;value&quot; : &quot;yellow&quot;
        },
        {
            &quot;name&quot; : &quot;sizes&quot;,
            &quot;value&quot; : &quot;M&quot;
        },
        {
            &quot;name&quot; : &quot;sizes&quot;,
            &quot;value&quot; : &quot;L&quot;
        },
        {
            &quot;name&quot; : &quot;sizes&quot;,
            &quot;value&quot; : &quot;XL&quot;
        },
        {
            &quot;name&quot; : &quot;model&quot;,
            &quot;value&quot; : &quot;poet&quot;
        },
        {
            &quot;name&quot; : &quot;material&quot;,
            &quot;value&quot; : &quot;bamboo&quot;
        }
    ]
}
{
    &quot;_id&quot; : ObjectId(&quot;560ab2cb0a0a88fe77d00f04&quot;),
    &quot;category&quot; : &quot;notebook&quot;,
    &quot;name&quot; : &quot;MacBook Pro&quot;,
    &quot;price&quot; : 2000,
    &quot;attributes&quot; : [
        {
            &quot;name&quot; : &quot;brand&quot;,
            &quot;value&quot; : &quot;Apple&quot;
        },
        {
            &quot;name&quot; : &quot;screen&quot;,
            &quot;value&quot; : 15
        },
        {
            &quot;name&quot; : &quot;speed&quot;,
            &quot;value&quot; : 2200
        },
        {
            &quot;name&quot; : &quot;hd&quot;,
            &quot;value&quot; : 256
        }
    ]
}
{
    &quot;_id&quot; : ObjectId(&quot;560ab2ec0a0a88fe77d00f05&quot;),
    &quot;category&quot; : &quot;notebook&quot;,
    &quot;name&quot; : &quot;ATIV Book 9&quot;,
    &quot;price&quot; : 1200,
    &quot;attributes&quot; : [
        {
            &quot;name&quot; : &quot;brand&quot;,
            &quot;value&quot; : &quot;Samsung&quot;
        },
        {
            &quot;name&quot; : &quot;screen&quot;,
            &quot;value&quot; : 12.2
        },
        {
            &quot;name&quot; : &quot;speed&quot;,
            &quot;value&quot; : 2400
        },
        {
            &quot;name&quot; : &quot;hd&quot;,
            &quot;value&quot; : 128
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;запросы-mongodb&quot;&gt;Запросы (MongoDB)&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Получить все футболки размера ‘M’ и ‘L’ (у товара есть оба размера):&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt; db.catalogue_simple.find({attributes: {$all: [
     {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;sizes&quot;, &quot;value&quot;: &quot;M&quot;}},
     {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;sizes&quot;, &quot;value&quot;: &quot;L&quot;}}
 ]}, category: &apos;tshirts&apos;})

 {&quot;name&quot; : &quot;Bamboo tshirt&quot;, /* ... */}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Получить все футболки с размерами ‘M’ и ‘L’, белого и желтого цветов, с надписей (model = poet):&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt; db.catalogue_simple.find({attributes: {$all: [
     {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;sizes&quot;, &quot;value&quot;: &quot;M&quot;}},
     {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;sizes&quot;, &quot;value&quot;: &quot;L&quot;}},
     {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;colors&quot;, &quot;value&quot;: &quot;white&quot;}},
     {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;colors&quot;, &quot;value&quot;: &quot;yellow&quot;}},
     {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;model&quot;, &quot;value&quot;: &quot;poet&quot;}}
 ]}, category: &apos;tshirts&apos;})

 {&quot;name&quot; : &quot;Bamboo tshirt&quot;, /* ... */}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Получить все ноутбуки с частотой процессора 2400 и диагональю экрана 12.2&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt; db.catalogue_simple.find({attributes: {$all: [
     {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;speed&quot;, &quot;value&quot;: 2400}},
     {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;screen&quot;, &quot;value&quot;: 12.2}}
 ]}, category: &apos;notebook&apos;})

 {&quot;name&quot; : &quot;ATIV Book 9&quot;, /* ... */}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Получить все футболки красного цвета, поло, с размерами ‘M’ или ‘L’&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt; db.catalogue_simple.find({attributes: {$all: [
     {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;colors&quot;, &quot;value&quot;: &quot;red&quot;}},
     {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;model&quot;, &quot;value&quot;: &quot;polo&quot;}},
     {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;sizes&quot;, &quot;value&quot;: {&quot;$in&quot;: [&quot;M&quot;, &quot;L&quot;]}}}
 ]}, category: &apos;tshirts&apos;})

 {&quot;name&quot; : &quot;Silk tshirt&quot;, /* ... */}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Получить все ноутбуки с частотой процессора свыше 2000 и диагональю экрана больше 13&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt; db.catalogue_simple.find({attributes: {$all: [
     {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;speed&quot;, &quot;value&quot;: {&quot;$gt&quot;: 2000}}},
     {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;screen&quot;, &quot;value&quot;: {&quot;$gt&quot;: 13}}}
 ]}, category: &apos;notebook&apos;})

 {&quot;name&quot; : &quot;MacBook Pro&quot;, /* ... */}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Получить все ноутбуки с частотой процессора 2200 или 2400&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt; db.catalogue_simple.find({attributes: {$all: [
     {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;speed&quot;, &quot;value&quot;: {&quot;$in&quot;: [2200, 2400]}}},
 ]}, category: &apos;notebook&apos;})

 {&quot;name&quot; : &quot;MacBook Pro&quot;, /* ... */}, {&quot;name&quot; : &quot;ATIV Book 9&quot;, /* ... */}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;индексы-mongodb&quot;&gt;Индексы (MongoDB)&lt;/h3&gt;

&lt;p&gt;В данной орагнизации данных мы можем создать &lt;a href=&quot;http://docs.mongodb.org/manual/core/index-multikey/#index-arrays-with-embedded-documents&quot;&gt;multikey index&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; db.catalogue_simple.ensureIndex({&quot;attributes.name&quot; : 1, &quot;attributes.value&quot; : 1})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Для честного сравнения создадим индекс по полю category (django автоматически создает его для ForeignKey полей)&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; db.catalogue_simple.ensureIndex({&quot;category&quot;: 1})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Еще следует учитывать, что mongodb будет использовать индекс только для первого фильтра оператора $all. Хоть в доках MongoDB говорится о &lt;a href=&quot;http://docs.mongodb.org/manual/core/index-intersection/&quot;&gt;index intersesection&lt;/a&gt;, однако похоже, что пересечение индексов не работает в данных запросах.&lt;/p&gt;

&lt;p&gt;Наглядный пример. Пусть у нас в базе только 1 товар с размером “XXXS”, и очень много товаров с размером “M”.&lt;/p&gt;

&lt;p&gt;Мы хотим найти товары, у которых есть оба размера “XXXS” и “M”.&lt;/p&gt;

&lt;p&gt;Можем сделать такой запрос:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; db.catalogue_simple.find({attributes: {$all: [
    {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;sizes&quot;, &quot;value&quot;: &quot;M&quot;}},
    {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;sizes&quot;, &quot;value&quot;: &quot;XXXS&quot;}},
]}, category: &apos;tshirts&apos;})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;В этом случае MongoDB применит индекс к значению “M”. В итоге будет просканированно много сущностей, затрачено много времени, а в результате только 1 документ:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;nReturned&quot; : 1,
&quot;executionTimeMillis&quot; : 1902,
&quot;totalKeysExamined&quot; : 249934,
&quot;totalDocsExamined&quot; : 249934,
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;А если сделаем запрос так (“XXXS” на первом месте):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; db.catalogue_simple.find({attributes: {$all: [
    {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;sizes&quot;, &quot;value&quot;: &quot;XXXS&quot;}},
    {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;sizes&quot;, &quot;value&quot;: &quot;M&quot;}},
]}, category: &apos;tshirts&apos;})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;то результат получим сразу:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;nReturned&quot; : 1,
&quot;executionTimeMillis&quot; : 0,
&quot;totalKeysExamined&quot; : 1,
&quot;totalDocsExamined&quot; : 1,
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Мораль такая, что на первое место нужно ставить поле с наибольшим selectivity. Если у нас конечно есть такая инфорамция.&lt;/p&gt;

&lt;h4 id=&quot;тестовые-данные-mongodb&quot;&gt;Тестовые данные (MongoDB)&lt;/h4&gt;

&lt;p&gt;Тестовые данные полностью идентичны использованным в PostgreSQL (за исключением структуры): 4 категории, по 250 000 товаров в каждой, всего 1 000 000.&lt;/p&gt;

&lt;h4 id=&quot;запросы-по-индексам-mongodb&quot;&gt;Запросы по индексам (MongoDB)&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Получить все футболки размера ‘M’ и ‘L’ (у товара есть оба размера):&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt; db.catalogue_simple.find({attributes: {$all: [
     {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;sizes&quot;, &quot;value&quot;: &quot;M&quot;}},
     {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;sizes&quot;, &quot;value&quot;: &quot;L&quot;}}
 ]}, category: &apos;tshirts&apos;})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Без индекса по attributes запрос выполняется 706 ms, используется индекс category.&lt;/p&gt;

    &lt;p&gt;Вывод &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.explain(&apos;executionStats&apos;)&lt;/code&gt;:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &quot;winningPlan&quot; : {
     // ...
     &quot;indexName&quot; : &quot;category_1&quot;,
 }
 &quot;executionStats&quot; : {
     &quot;nReturned&quot; : 66412,
     &quot;executionTimeMillis&quot; : 706,
     &quot;totalKeysExamined&quot; : 250001,
     &quot;totalDocsExamined&quot; : 250001,
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;С индексом по attributes ничего не меняется, т.к. optimizer не считает этот индекс лучше чем category (видимо малая selectivity).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Получить все футболки с размерами ‘M’ и ‘L’, белого и желтого цветов, с надписей (model = poet):&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt; db.catalogue_simple.find({attributes: {$all: [
     {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;sizes&quot;, &quot;value&quot;: &quot;M&quot;}},
     {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;sizes&quot;, &quot;value&quot;: &quot;L&quot;}},
     {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;colors&quot;, &quot;value&quot;: &quot;white&quot;}},
     {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;colors&quot;, &quot;value&quot;: &quot;yellow&quot;}},
     {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;model&quot;, &quot;value&quot;: &quot;poet&quot;}},
 ]}, category: &apos;tshirts&apos;})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Ситуация аналогична первому примеру.&lt;/p&gt;

    &lt;p&gt;Она может поменяться, если на первое место мы поставим значение с большой selectivity. В тестовых данных цветов больше, чем размеров. Поэтому, если поставить цвет на первое место, то будет использоваться индекс attributes:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt; db.catalogue_simple.find({attributes: {$all: [
         {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;colors&quot;, &quot;value&quot;: &quot;white&quot;}},
         {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;sizes&quot;, &quot;value&quot;: &quot;M&quot;}},
         {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;sizes&quot;, &quot;value&quot;: &quot;L&quot;}},
         {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;colors&quot;, &quot;value&quot;: &quot;yellow&quot;}},
         {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;model&quot;, &quot;value&quot;: &quot;poet&quot;}},
     ]}, category: &apos;tshirts&apos;}).explain(&apos;executionStats&apos;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Вывод:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &quot;winningPlan&quot; : {
     // ...
     &quot;indexName&quot; : &quot;attributes.name_1_attributes.value_1&quot;,
 }
 &quot;executionStats&quot; : {
     &quot;nReturned&quot; : 3737,
     &quot;executionTimeMillis&quot; : 658,
     &quot;totalKeysExamined&quot; : 124902,
     &quot;totalDocsExamined&quot; : 124902,
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Время запроса - 658 ms.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Получить все ноутбуки с частотой процессора 2400 и диагональю экрана 12.2&lt;/p&gt;

    &lt;p&gt;Аналогично пунктам 1 и 2.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Получить все футболки красного цвета, поло, с размерами ‘M’ или ‘L’&lt;/p&gt;

    &lt;p&gt;Аналогично пунктам 1 и 2.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Получить все ноутбуки с частотой процессора свыше 2000 и диагональю экрана больше 13&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt; db.catalogue_simple.find({attributes: {$all: [
     {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;speed&quot;, &quot;value&quot;: {&quot;$gt&quot;: 2000}}},
     {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;screen&quot;, &quot;value&quot;: {&quot;$gt&quot;: 13}}}
 ]}, category: &apos;notebook&apos;}).explain(&apos;executionStats&apos;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Как мы помним, в PostgreSQL мы не могли использовать GIN индекс для этого запроса.
 Однако в случае структуры данных, которую мы используем в MongoDB, существующий индекс будет работать.
 Вопрос лишь в том, какой процент данных этот фильтр отсекает.
 Тут selectivity оказалась относительно хорошей:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &quot;winningPlan&quot; : {
     // ...
     &quot;indexName&quot; : &quot;attributes.name_1_attributes.value_1&quot;,
 }
 &quot;executionStats&quot; : {
     &quot;nReturned&quot; : 10536,
     &quot;executionTimeMillis&quot; : 160,
     &quot;totalKeysExamined&quot; : 62472,
     &quot;totalDocsExamined&quot; : 62472,
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Получить все ноутбуки с частотой процессора 2200 или 2400&lt;/p&gt;

    &lt;p&gt;Аналогично предыдущим пунктам.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;итоги&quot;&gt;Итоги&lt;/h3&gt;

&lt;p&gt;В PostgreSQL 9.4 появился тип jsonb, который можно эффективно использовать в запросах.
Причем создав лишь один индекс мы можем фильтровать по всем ключам из JSON. Не все операции будут доступны (например больше/меньше, для них придется создавать отдельный индекс на каждый JSON ключ), но тем не менее этого  достаточно для широкого круга задач. И начиная с Django 1.9 эти функции доступны из коробки.&lt;/p&gt;

&lt;p&gt;В MongoDB аналога оператору &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@&amp;gt;&lt;/code&gt; нет. Можно изменить структуру данных и делать аналогичные запросы по группе полей, используя один индекс. Но это менее эффективно, чем в PostgreSQL. Ведь индекс будет применяться только к первому ключу, а не ко всем.
Зато MongoDB поддерживает гораздо больше операций при фильтрации по &lt;em&gt;одному&lt;/em&gt; &lt;em&gt;любому&lt;/em&gt; ключу, используя один индекс.&lt;/p&gt;

&lt;p&gt;Пока мне очень нравится JSON в PostgreSQL, оно здорово облегчает решение многих задач. При этом мы сохраняем возможности SQL: транзакции и join’ы, которых нет в MongoDB. И теперь это поддерживается Django ORM.&lt;/p&gt;

&lt;h3 id=&quot;полезные-ссылки&quot;&gt;Полезные ссылки&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.djangoproject.com/en/dev/ref/contrib/postgres/fields/#jsonfield&quot;&gt;Django JSONField docs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.postgresql.org/docs/9.4/static/datatype-json.html&quot;&gt;PostgreSQL JSON type docs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.postgresql.org/docs/9.4/static/functions-json.html&quot;&gt;PostgreSQL JSON functions and operations docs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=78A2gJBgL9g&quot;&gt;Christophe Pettus - PostgreSQL Proficiency for Python People - PyCon 2015 (video)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://thebuild.com/presentations/json2015-pgconfus.pdf&quot;&gt;PostgreSQL and JSON: 2015. Christophe Pettus. PGConf US 2015 (slides)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://events.yandex.ru/lib/talks/1707/&quot;&gt;Asya Kamsky, Yandex 2014 MongoDB meetup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="database" /><category term="django" /><category term="mongodb" /><category term="postgresql" /><category term="sql" /><summary type="html">В Django 1.9 будет добавлено поле JSONField, его можно использовать с базой данных PostgreSQL &amp;gt;= 9.4. Давайте попробуем с ним поработать и оценить, насколько оно удобно.</summary></entry><entry><title type="html">OAuth и django rest framework</title><link href="https://st4lk.github.io/blog/2015/07/18/oauth-and-django-rest-framework.html" rel="alternate" type="text/html" title="OAuth и django rest framework" /><published>2015-07-18T18:19:43+00:00</published><updated>2015-07-18T18:19:43+00:00</updated><id>https://st4lk.github.io/blog/2015/07/18/oauth-and-django-rest-framework</id><content type="html" xml:base="https://st4lk.github.io/blog/2015/07/18/oauth-and-django-rest-framework.html">&lt;p&gt;&lt;a class=&quot;github-button&quot; href=&quot;https://github.com/st4lk/django-rest-social-auth&quot; data-color-scheme=&quot;no-preference: light; light: light; dark: dark;&quot; data-size=&quot;large&quot; data-show-count=&quot;true&quot; aria-label=&quot;Star st4lk/django-rest-social-auth on GitHub&quot;&gt;Star&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/blog/2015/07/18/oauth-and-django-rest-framework.html&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/6615/85893628.c69/0_18e574_16d44873_XL.png&quot; alt=&quot;OAuth и django rest framework&quot; title=&quot;OAuth и django rest framework&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Тема избитая, но мне не удалось найти готового решения, которое полностью бы меня устроило. Поэтому пишу сам :).&lt;/p&gt;

&lt;p&gt;Итак, у нас есть “одностраничный” веб сайт, который общается с бекендом посредством REST API.  Клиентская часть может быть написана с помощью ember, angularjs или чего-то подобного. Бекенд - django rest framework (DRF). И есть тривиальная задача - добавить вход через социальные сети (OAuth протокол).&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Как бы это выглядело в случае обычного (олд-скульного) сайта? Пользователь нажимает логин, открывается страница социальной сети (Oauth провайдера). Человек подтверждает доступ, соц. сеть делает редирект обратно на наш сайт, передавая определенный код. Мы узнаем код из url’а и делаем логин. Для такого процесса есть несколько готовых django библиотек, мне больше всего нравится &lt;a href=&quot;https://github.com/omab/python-social-auth&quot;&gt;python-social-auth&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;В случае одностраничного сайта можно впринципе сделать так же. Однако, часто разработка фронтенда и бекенда разделена. Более того, бывает что апи работает на другом поддомене, таким образом бекенд не может напрямую обработать редирект.&lt;/p&gt;

&lt;p&gt;В итоге следующая схема получается наиболее оптимальной. Пользователь нажимает логин, открывается попап окно с подтверждением в соц. сети. После подтверждения попап передает параметры родительскому окну (фронтенд приложению), который в свою очередь отправляет запрос на бекенд для конечного логина.&lt;/p&gt;

&lt;p&gt;Т.о. бекенд разработчику нужно реализовать API ресурс, на вход которого передаются параметры от OAuth провайдера, а на выходе - данные пользователя + сессия (например id сессии в куках или токен). Этот ресурс будет вызываться фронтендом.&lt;/p&gt;

&lt;p&gt;Вопрос, какие данные лучше передавать в этот ресурс? Возьмем OAuth 2.0. Тут два варианта - либо request token, либо access token. В первом случае сервер должен будет сам обменять request token на access token. Во втором - этого делать не надо (фронтенд уже получил access token). Казалось бы, последний вариант проще. Однако у этого способа есть недостатки.&lt;/p&gt;

&lt;p&gt;Во-первых, access token, полученный фронтенд’ом, имеет очень маленький срок жизни (несколько часов). Мы могли бы сохранить access token в базе данных и при определенных условиях обратиться к социальной сети позднее (написать что-то на стене пользователя). С коротким сроком жизни токена это делать неудобно. Во-вторых, access token будет передан фронтендом на наш апи сервер. Возникает потенциальная угроза безопасности. Если наш апи работает не по HTTPS, то access token можно легко перехватить. Этого токена достаточно, чтобы делать валидные запросы.&lt;/p&gt;

&lt;p&gt;Поискав готовые решения для DRF, я нашел &lt;a href=&quot;https://github.com/Tivix/django-rest-auth&quot;&gt;django-rest-auth&lt;/a&gt;. Он предлагает готовый ресурс, который получает access token. А вот готового ресурса, который получал бы request token и все остальное делал бы сам, нету. Так же этот пакет основан на библиотеке &lt;a href=&quot;https://github.com/pennersr/django-allauth&quot;&gt;django-allauth&lt;/a&gt;, которая по-моему мнению не очень удобна в части OAuth регистрации.&lt;/p&gt;

&lt;p&gt;Исходя из всего вышесказанного, я решил написать свою тулзу, которая связывала бы django-rest-framework, python-social-auth и реализовывала ресурс для логина по request token’у.&lt;/p&gt;

&lt;p&gt;Вот она: &lt;a href=&quot;https://github.com/st4lk/django-rest-social-auth&quot;&gt;&lt;strong&gt;django-rest-social-auth&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Подробности по использованию можно почитать в readme. Это довольно маленький, но удобный пакет. Вся кастомизация, доступная в python-social-auth, доступна и здесь.&lt;/p&gt;

&lt;p&gt;Живой пример - сайт &lt;a href=&quot;http://www.woobie.ru/&quot;&gt;woobie.ru&lt;/a&gt;, там используется именно эта библиотека.&lt;/p&gt;</content><author><name></name></author><category term="api" /><category term="django" /><category term="oauth" /><summary type="html">Star Тема избитая, но мне не удалось найти готового решения, которое полностью бы меня устроило. Поэтому пишу сам :). Итак, у нас есть “одностраничный” веб сайт, который общается с бекендом посредством REST API. Клиентская часть может быть написана с помощью ember, angularjs или чего-то подобного. Бекенд - django rest framework (DRF). И есть тривиальная задача - добавить вход через социальные сети (OAuth протокол).</summary></entry><entry><title type="html">Tornado and pgettext</title><link href="https://st4lk.github.io/blog/2015/06/05/tornado-and-pgettext.html" rel="alternate" type="text/html" title="Tornado and pgettext" /><published>2015-06-05T18:19:43+00:00</published><updated>2015-06-05T18:19:43+00:00</updated><id>https://st4lk.github.io/blog/2015/06/05/tornado-and-pgettext</id><content type="html" xml:base="https://st4lk.github.io/blog/2015/06/05/tornado-and-pgettext.html">&lt;p&gt;&lt;a href=&quot;/blog/2015/06/05/tornado-and-pgettext.html&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/15560/85893628.c68/0_18816d_971d97b2_L.png&quot; alt=&quot;Tornado and pgettext&quot; title=&quot;Tornado and pgettext&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Недавно (26 мая 2015 года) вышел релиз &lt;a href=&quot;http://www.tornadoweb.org/en/latest/releases/v4.2.0.html&quot;&gt;tornado 4.2&lt;/a&gt;. В него вошли разные дополнения, пожалуй основные из них - модули tornado.locks и tornado.queues. Они перекочевали из пакета Toro, подробное описание процесса от Jesse Jiryu Davis в его &lt;a href=&quot;http://emptysqua.re/blog/tornado-locks-and-queues/&quot;&gt;блоге&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Здесь же хочу рассказать о другой маленькой функции, которая была добавлена с моей помощью - &lt;a href=&quot;http://www.tornadoweb.org/en/latest/locale.html#tornado.locale.GettextLocale.pgettext&quot;&gt;pgettext&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Она может быть полезна, когда вы создаете перевод для неоднозначных строк. Допустим есть слово “bat”, которое нужно вывести либо на английском, либо на русском, в зависимости от языка пользователя. Для этого можно воспользоваться соответствующими функциями перевода.&lt;/p&gt;

&lt;p&gt;Например так (html шаблон):&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;{{_(&quot;Bat&quot;)}}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Далее мы с помощью утилиты xgettext создадим файл перевода, в котором будет что-то такое (подробно про процесс i18n можно почитать &lt;a href=&quot;/i18n/async/tornado/2015/01/31/tornado-internationalization-and-localization.html&quot;&gt;тут&lt;/a&gt;)&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msgid &quot;Bat&quot;
msgstr &quot;&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Теперь на месте пустой строки нам нужно вставить перевод. Но что означает слово “Bat”? В английском языке это слово может означать “летучая мышь”, а может “дубина”, в зависимости от контекста. Переводчику будет очень трудно понять, что же имелось в виду.&lt;/p&gt;

&lt;p&gt;Вот где пригодится функция pgettext, ей в качестве первого аргумента передается контекст фразы:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;{{ pgettext(&quot;mammal&quot;, &quot;Bat&quot;) }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;При генерации перевода нужно дополнительно указать такие опции для утилиты xgettext:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;--keyword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;pgettext:1c,2 &lt;span class=&quot;nt&quot;&gt;--keyword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;pgettext:1c,2,3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;После этого файл перевода будет выглядеть так:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msgctxt &quot;mammal&quot;
msgid &quot;Bat&quot;
msgstr &quot;&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Переводчик поймет, что в данном случае имелась в виду именно летучая мышь, поэтому перевод однозначен:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msgctxt &quot;mammal&quot;
msgid &quot;Bat&quot;
msgstr &quot;Летучая мышь&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Множественные формы так же поддерживаются:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;{{ pgettext(&quot;mammal&quot;, &quot;Bat&quot;, &quot;Bats&quot;, 2) }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;В python коде (не в шаблоне) это будет выглядеть так:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HomeHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tornado&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RequestHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;home.html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;locale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pgettext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mammal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Bat&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Bats&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Сам перевод множественных значений:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msgctxt &quot;mammal&quot;
msgid &quot;Bat&quot;
msgid_plural &quot;Bats&quot;
msgstr[0] &quot;Летучая мышь&quot;
msgstr[1] &quot;Летучие мыши&quot;
msgstr[2] &quot;Летучих мышей&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="i18n" /><category term="tornado" /><summary type="html">Недавно (26 мая 2015 года) вышел релиз tornado 4.2. В него вошли разные дополнения, пожалуй основные из них - модули tornado.locks и tornado.queues. Они перекочевали из пакета Toro, подробное описание процесса от Jesse Jiryu Davis в его блоге. Здесь же хочу рассказать о другой маленькой функции, которая была добавлена с моей помощью - pgettext.</summary></entry><entry><title type="html">OAuth step by step</title><link href="https://st4lk.github.io/blog/2015/05/16/oauth-step-step.html" rel="alternate" type="text/html" title="OAuth step by step" /><published>2015-05-16T18:19:43+00:00</published><updated>2015-05-16T18:19:43+00:00</updated><id>https://st4lk.github.io/blog/2015/05/16/oauth-step-step</id><content type="html" xml:base="https://st4lk.github.io/blog/2015/05/16/oauth-step-step.html">&lt;div class=&quot;gist-wrp&quot;&gt;&lt;div class=&quot;github-btn&quot; id=&quot;github-btn&quot; style=&quot;float:right;&quot;&gt; &lt;a class=&quot;gh-btn&quot; id=&quot;gh-btn&quot; href=&quot;https://gist.github.com/st4lk/4b71b72007a666435f81&quot; target=&quot;_blank&quot;&gt; &lt;span class=&quot;gh-ico&quot;&gt;&lt;/span&gt; &lt;span class=&quot;gh-text&quot; id=&quot;gh-text&quot;&gt;Gist&lt;/span&gt; &lt;/a&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/blog/2015/05/16/oauth-step-step.html&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/9819/85893628.c68/0_185253_82b5fefa_M.png&quot; alt=&quot;OAuth step by step&quot; title=&quot;OAuth step by step&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OAuth протокол бывает двух версий: 1.0 и 2.0.&lt;/p&gt;

&lt;p&gt;Большинство сервисов сегодня используют версию 2.0, вероятно потому что
ее проще реализовать. Так же версию 2.0 можно относительно безопасно использовать в
standalone-приложениях (те, которые без сервера).&lt;/p&gt;

&lt;p&gt;Для понимания протоколов очень полезно взглянуть на их реализацию.
Тут я приведу несколько скриптов, которые общаются с OAuth-провайдерами разных версий.
Т.е. все скрипты реализуют функционал клиента (не сервера).
Используются только стандартные python библиотеки.
Вот почему глядя на них лучше понимаешь сам протокол OAuth - все перед глазами и все более-менее знакомое.
Конечно, для реальной работы нужно использовать только готовые и проверенные временем пакеты.
Эти скрипты только для понимания процесса. Разбираться с готовыми библиотеками порой бывает сложно, они разбиты на много модулей, могут использоваться разные сторонние пакеты, и в итоге общая картина ускользает из виду.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Для начала немного теории.
Наверняка вы знаете, что есть два понятия - &lt;em&gt;аутентификация&lt;/em&gt; (authentication) и &lt;em&gt;авторизация&lt;/em&gt; (authorization).
Они вроде бы об одном и том же, но все-таки немного о разном.
На всякий случай напомню:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;аутентификация - это процесс подтверждения подлинности.
  Т.е. нам нужно просто узнать, что данный человек действительно владеет аккаунтом google с таким id и нам этого достаточно.
  Просто залогинить пользователя, не получая никаких прав на какие-либо действия с аккаунтом google’а.
  Этим занимается например протокол OpenID (хотя сейчас google предлагает &lt;a href=&quot;https://developers.google.com/identity/sign-in/auth-migration#sign-in&quot;&gt;другой способ&lt;/a&gt;, OpenID - &lt;a href=&quot;https://developers.google.com/identity/protocols/OpenID2&quot;&gt;deprecated&lt;/a&gt;).&lt;/li&gt;
  &lt;li&gt;авторизация - процесс предоставления полномочий что-то делать с аккаунтом.
  Авторизация уже включает в себя аутентификацию, но дает дополнительные возможности.
  Например, не просто подтвердить, что пользователь действительно является владельцем аккаунта с определенным id, но еще и узнать его email. А возможно и написать что-то на его стене.
  Вот это предоставляет протокол OAuth.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Чтобы легче запомнить я использую слово “автор”. Если есть “автор” - значит речь идет о правах (авторстве). Если нет - значит просто проверка подлинности.&lt;/p&gt;

&lt;h3 id=&quot;oauth-10&quot;&gt;OAuth 1.0&lt;/h3&gt;

&lt;p&gt;Спецификация: &lt;a href=&quot;http://tools.ietf.org/html/rfc5849&quot;&gt;http://tools.ietf.org/html/rfc5849&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Самое главное, что нужно запомнить - в OAuth 1.0 &lt;strong&gt;все&lt;/strong&gt; запросы подписываются секретным ключом.
Секретный ключ нужно хранить только в безопасном месте, единственное такое место - это сервер.
Благодаря этому протокол обеспечивает полную безопасность, даже если не используется https.
Безопасность в том плане, что даже подслушав запрос злоумышленник не сможет сделать другой валидный запрос.
Подслушать сами передаваемые данные он конечно сможет, чтобы их скрыть нужен https.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/st4lk/314e181faaea7d671d0e.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;oauth-10-less-legged-2-legged-1-legged-0-legged&quot;&gt;OAuth 1.0 less-legged (2-legged, 1-legged, 0-legged)&lt;/h3&gt;

&lt;p&gt;Это модификация протокола OAuth 1.0, в котором пользователь никак не зайдествован.
Формально это уже не OAuth протокол, т.к. в спецификции такая последовательность не описана.
Просто используются те же приемы, поэтому и называют так же.
В этом случае клиентское приложение является пользователем, оно может запрашивать либо общедоступные ресурсы, либо ресурсы, доступные самому клиентскому приложению (даже приватные).&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/st4lk/719729c03cf0314179b4.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;oauth-20-с-участием-сервера&quot;&gt;OAuth 2.0 с участием сервера&lt;/h3&gt;

&lt;p&gt;Спецификация: &lt;a href=&quot;http://tools.ietf.org/html/rfc6749&quot;&gt;http://tools.ietf.org/html/rfc6749&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Интересно, что в заглавии спецификации OAuth 2.0 назван фреймворком.
В то время как в заглавии &lt;a href=&quot;http://tools.ietf.org/html/rfc5849&quot;&gt;спецификации&lt;/a&gt; OAuth 1.0 назван протоколом.&lt;/p&gt;

&lt;p&gt;Для обеспечения полной безопасности OAuth 2.0 необходимо отправлять запросы по https (https должен обеспечивать service provider, например facebook).
Получив access_token уже не нужно подписывать запросы секретным ключом.
Т.е. если кто-то подслушает запрос и увидит access_token, то он сможет сделать валидный запрос. Вот зачем нужен https.
Кроме того при получении access_token, секрет передается по http в открытом виде.&lt;/p&gt;

&lt;p&gt;У полученного access_token всегда есть ограниченное время жизни.&lt;/p&gt;

&lt;p&gt;В связи с этими особенностями (и некоторыми другими), один из проектировщиков протокола OAuth 1.0 даже отказался от участия в разработке OAuth 2.0, ведь последний очень легко реализовать неправильно и в результате безопасность не будет гарантирована. Подробности можно почитать по &lt;a href=&quot;http://hueniverse.com/2012/07/26/oauth-2-0-and-the-road-to-hell/&quot;&gt;ссылке&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Последовательность шагов для получения access_token по OAuth 2.0, которая включает сервер.
Сервер для получения access_token отправляет секретный код. Обратите внимание, не используется ни одна крипто-библиотека.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/st4lk/4b71b72007a666435f81.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;oauth-20-без-участия-сервера&quot;&gt;OAuth 2.0 без участия сервера&lt;/h3&gt;

&lt;p&gt;С OAuth 2.0 можно работать и без сервера по упрощенной схеме. В этом случае мы тоже получаем access_token, но для его получения не нужно знать секрет приложения! Обычно время жизни у access_token, полученного таким способом, маленькое (1-2 часа), в то время как время жизни, полученного с участием сервера больше (может быть несколько десятков дней).&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/st4lk/af1db97e36897b918f22.js&quot;&gt;&lt;/script&gt;</content><author><name></name></author><category term="api" /><category term="oauth" /><category term="security" /><summary type="html">Gist OAuth протокол бывает двух версий: 1.0 и 2.0. Большинство сервисов сегодня используют версию 2.0, вероятно потому что ее проще реализовать. Так же версию 2.0 можно относительно безопасно использовать в standalone-приложениях (те, которые без сервера). Для понимания протоколов очень полезно взглянуть на их реализацию. Тут я приведу несколько скриптов, которые общаются с OAuth-провайдерами разных версий. Т.е. все скрипты реализуют функционал клиента (не сервера). Используются только стандартные python библиотеки. Вот почему глядя на них лучше понимаешь сам протокол OAuth - все перед глазами и все более-менее знакомое. Конечно, для реальной работы нужно использовать только готовые и проверенные временем пакеты. Эти скрипты только для понимания процесса. Разбираться с готовыми библиотеками порой бывает сложно, они разбиты на много модулей, могут использоваться разные сторонние пакеты, и в итоге общая картина ускользает из виду.</summary></entry><entry><title type="html">Python tips &amp;amp; tricks</title><link href="https://st4lk.github.io/blog/2015/04/30/base-python-tips-tricks.html" rel="alternate" type="text/html" title="Python tips &amp;amp; tricks" /><published>2015-04-30T18:19:43+00:00</published><updated>2015-04-30T18:19:43+00:00</updated><id>https://st4lk.github.io/blog/2015/04/30/base-python-tips-tricks</id><content type="html" xml:base="https://st4lk.github.io/blog/2015/04/30/base-python-tips-tricks.html">&lt;p&gt;&lt;a href=&quot;/blog/2015/04/30/base-python-tips-tricks.html&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/9067/85893628.c68/0_181e3c_92d918ca_M.jpg&quot; alt=&quot;Python tips &amp;amp; tricks&quot; title=&quot;Python tips &amp;amp; tricks&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Недавно прочитал книгу &lt;a href=&quot;http://shop.oreilly.com/product/0636920028154.do&quot;&gt;Марка Лутца “Learning Python”, 5-ое издание&lt;/a&gt;. Привожу список самых интересных фишек (по моему мнению) оттуда, что-то вроде конспекта.&lt;/p&gt;

&lt;!--more--&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;генерация set’a:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  {x for x in [1,2]}
  set(x for x in [1,2])
  assert set(x for x in [1,2]) == {x for x in [1,2]}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;генерация dict’а:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  {x:x**2 for x in [1,2]}
  dict((x, x**2) for x in [1,2])
  assert {x:x**2 for x in [1,2]} == dict((x, x**2) for x in [1,2])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;деление целых чисел&lt;/p&gt;

    &lt;p&gt;В python 3 деление целых чисел возвращает float&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; 1 / 2
  0.5
  &amp;gt;&amp;gt;&amp;gt; - 1 / 2
  -0.5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;В python 2 деление - округление в меньшую сторону, это не truncate&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; 1 / 2    # 0.5 floor округление -&amp;gt; 0
  0
  &amp;gt;&amp;gt;&amp;gt; - 1 / 2  # -0.5 floor округление -&amp;gt; -1 (не 0)
  -1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;В python 2 и 3 целочисленное деление&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; 1 // 2
  0
  &amp;gt;&amp;gt;&amp;gt; - 1 // 2
  -1
  &amp;gt;&amp;gt;&amp;gt; 13 // 2.0
  6.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is&lt;/code&gt; - проверяет, что переменные указывают на один и тот же адрес, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;==&lt;/code&gt; проверяет, что объекты имеют одинаковые значения&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;python 3: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[1, &apos;spam&apos;].sort()&lt;/code&gt; возбуждает исключение (разные типы)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;python 3: dict().keys() возвращает итератор (view объект, зависимый от dict). Это set-like объект, к нему можно применять set операции (union и пр.)&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; dict(a=1, b=2).keys()
  dict_keys([&apos;b&apos;, &apos;a&apos;])
  &amp;gt;&amp;gt;&amp;gt; dict(a=1, b=2).keys() | {&apos;c&apos;, &apos;d&apos;}
  {&apos;b&apos;, &apos;d&apos;, &apos;a&apos;, &apos;c&apos;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;frozenset - immutable set, он является hashable, можно использовать например как ключ в dict&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; fz = frozenset([1,2])
  &amp;gt;&amp;gt;&amp;gt; fz.add(3)
  AttributeError: &apos;frozenset&apos; object has no attribute &apos;add&apos;
  &amp;gt;&amp;gt;&amp;gt; {fz: 5}
  {frozenset([1, 2]): 5}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;list поддерживает операторы сравнения: ==, &amp;lt;, &amp;gt;, &amp;lt;=, &amp;gt;=. Сравнение аналогично сравнению срок. Для py3 все объекты должны быть одного типа&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; [1, 2] == [1, 2]
  True
  &amp;gt;&amp;gt;&amp;gt; [2, 2] &amp;gt; [1, 2]
  True
  &amp;gt;&amp;gt;&amp;gt; [1] &amp;gt; [&apos;sh&apos;]  # python2
  False
  &amp;gt;&amp;gt;&amp;gt; [1] &amp;gt; [&apos;sh&apos;]  # python3
  TypeError: unorderable types: int() &amp;gt; str()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;сравнение dict’ов&lt;/p&gt;

    &lt;p&gt;python 2 and 3&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; dict(a=1) == dict(a=1)
  True
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;python 2 only&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; dict(a=3) &amp;gt; dict(a=2)
  True
  &amp;gt;&amp;gt;&amp;gt; dict(a=3) &amp;gt; dict(a=2, b=1)
  False
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;нельзя list + string, list + tuple, однако можно list += string&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; L = []
  &amp;gt;&amp;gt;&amp;gt; L + &apos;spam&apos;
  TypeError: can only concatenate list (not &quot;str&quot;) to list

  &amp;gt;&amp;gt;&amp;gt; L = []
  &amp;gt;&amp;gt;&amp;gt; L += &apos;spam&apos;
  &amp;gt;&amp;gt;&amp;gt; L
  [&apos;s&apos;, &apos;p&apos;, &apos;a&apos;, &apos;m&apos;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;L += a is faster that L = L + a.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;L += [1,2] is in place modification! (не создается новый список)&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; L = []
  &amp;gt;&amp;gt;&amp;gt; id(L)
  4368997048
  &amp;gt;&amp;gt;&amp;gt; L += [1,2]
  &amp;gt;&amp;gt;&amp;gt; id(L)
  4368997048
  &amp;gt;&amp;gt;&amp;gt; L = L + [1,2]
  &amp;gt;&amp;gt;&amp;gt; id(L)
  4368996976
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;‘spam’[0][0][0] можно до бесконечности, каждый раз будет возвращатся односимвольная строка ‘s’&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;распаковка аргументов в python 3 при присваивании&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; a, *b = &apos;spam&apos;
  &amp;gt;&amp;gt;&amp;gt; a
  &apos;s&apos;
  &amp;gt;&amp;gt;&amp;gt; b
  [&apos;p&apos;, &apos;a&apos;, &apos;m&apos;]

  &amp;gt;&amp;gt;&amp;gt; *a, b = &apos;spam&apos;
  &amp;gt;&amp;gt;&amp;gt; a
  [&apos;s&apos;, &apos;p&apos;, &apos;a&apos;]
  &amp;gt;&amp;gt;&amp;gt; b
  &apos;m&apos;

  &amp;gt;&amp;gt;&amp;gt; a, *b, c = &apos;spam&apos;
  &amp;gt;&amp;gt;&amp;gt; a
  &apos;s&apos;
  &amp;gt;&amp;gt;&amp;gt; b
  [&apos;p&apos;, &apos;a&apos;]
  &amp;gt;&amp;gt;&amp;gt; c
  &apos;m&apos;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;python 2: True = 0, но не в python 3&lt;/p&gt;

    &lt;p&gt;python 2&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; True = 0
  &amp;gt;&amp;gt;&amp;gt; True
  0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;python 3&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; True = 0
  SyntaxError: can&apos;t assign to keyword
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;sys.stdout = open(‘temp.txt’, ‘w’) - все print’ы будут идти в файл temp.txt&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;and&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;or&lt;/code&gt; возвращают объект, а не True/False&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;while&lt;/code&gt; has &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;else&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;python 3: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;...&lt;/code&gt; все равно что &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pass&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;reversed works with lists, not generator&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; reversed([1,2,3])
  &amp;lt;list_reverseiterator object at 0x10127c550&amp;gt;
  &amp;gt;&amp;gt;&amp;gt; reversed((x for x in [1,2,3]))
  TypeError: argument to reversed() must be a sequence
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;zip итерирует до самой маленькой последовательности&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; [x for x in zip([1,2,3], [4,5])]
  [(1, 4), (2, 5)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;python 2: map(None, s1, s2) тоже самое, что zip, но добавялет None для элементов из более длинной последовательности&lt;/p&gt;

    &lt;p&gt;python 2&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; map(None, [1,2,3], [4,5])
  [(1, 4), (2, 5), (3, None)]
  &amp;gt;&amp;gt;&amp;gt; map(None, [1,2], [4,5,6])
  [(1, 4), (2, 5), (None, 6)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;python 3&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; list(map(None, [1,2,3], [4,5]))
  TypeError: &apos;NoneType&apos; object is not callable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;map can take more than one iterators (похоже на zip)&lt;/p&gt;

    &lt;p&gt;python 2&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; map(lambda x, y: (x, y), [1,2], [3,4])
  [(1, 3), (2, 4)]
  &amp;gt;&amp;gt;&amp;gt; map(lambda x, y: (x, y), [1,2], [3,4,5])
  [(1, 3), (2, 4), (None, 5)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;python 3&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; list(map(lambda x, y: (x, y), [1,2], [3,4]))
  [(1, 3), (2, 4)]
  &amp;gt;&amp;gt;&amp;gt; list(map(lambda x, y: (x, y), [1,2], [3,4,5]))
  [(1, 3), (2, 4)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;nested list comprehensions&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; [x+y for x in &apos;abc&apos; for y in &apos;lmn&apos;]
  [&apos;al&apos;, &apos;am&apos;, &apos;an&apos;, &apos;bl&apos;, &apos;bm&apos;, &apos;bn&apos;, &apos;cl&apos;, &apos;cm&apos;, &apos;cn&apos;]

  # flat list of lists
  &amp;gt;&amp;gt;&amp;gt; csv = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
  &amp;gt;&amp;gt;&amp;gt; [col for row in csv for col in row]
  [1, 2, 3, 4, 5, 6, 7, 8, 9]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;sorted возвращает список (не генератор) в py2 и py3&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; sorted(x for x in [2,1,3])
  [1, 2, 3]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;*args понимает любой итератор, не обязательно list&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;unzip: zip(*zip(a,b))&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; zip(*zip([1,2],[3,4]))
  [(1, 2), (3, 4)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;py3: map возвращает генератор, пройти по нему можно только раз&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; m = map(lambda x: x, [1,2,3])
  &amp;gt;&amp;gt;&amp;gt; [x for x in m]
  [1, 2, 3]
  &amp;gt;&amp;gt;&amp;gt; [x for x in m]
  []
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;py3: хоть range и генератор (это хитрый генератор), он поддерживает len() и доступ по индексам&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; r = range(10)
  &amp;gt;&amp;gt;&amp;gt; r
  range(0, 10)
  &amp;gt;&amp;gt;&amp;gt; len(r)
  10
  &amp;gt;&amp;gt;&amp;gt; r[3]
  3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;generator allows only single scan&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;циклические импорты работают! Но только с import, без from&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;у try есть else, который вызовится, если exception не случилось&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with&lt;/code&gt; similar to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;finally&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;except (name1, name2) - orders from top to bottom, from left to right&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;except Exception:&lt;/code&gt; vs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;except:&lt;/code&gt; - первое не перехватывает системные исключения (KeyboardInterrupt, SystemExit, GeneratorExit например)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;set().remove(x) - удаляет x или KeyError, set().discard(x) - удаляет x или ничего&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;py3.3+ accept u””, U”” для обратной совместимости с py2&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;default encoding is in sys module sys.getdefaultencoding()&lt;/p&gt;

    &lt;p&gt;python 2&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; sys.getdefaultencoding()
  &apos;ascii&apos;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;python 3&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; sys.getdefaultencoding()
  &apos;utf-8&apos;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[c for c in sorted([1,2,3], key=lambda c: -c)] - тут переменная &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c&lt;/code&gt; конфликтовать не будет&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;в py2 переменная внутри comprehension может изменять внешние переменные а также доступна после, в py3 - нет.&lt;/p&gt;

    &lt;p&gt;python 2&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; x = 1
  &amp;gt;&amp;gt;&amp;gt; [x for x in range(3)]
  [0, 1, 2]
  &amp;gt;&amp;gt;&amp;gt; x
  2
  # creates new var
  &amp;gt;&amp;gt;&amp;gt; [y for y in range(3)]
  [0, 1, 2]
  &amp;gt;&amp;gt;&amp;gt; y
  2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;python 3&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; x = 1
  &amp;gt;&amp;gt;&amp;gt; [x for x in range(3)]
  &amp;gt;&amp;gt;&amp;gt; x
  1
  # no new var
  &amp;gt;&amp;gt;&amp;gt; [y for y in range(3)]
  [0, 1, 2]
  &amp;gt;&amp;gt;&amp;gt; y
  NameError: name &apos;y&apos; is not defined
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;py3 имеет инструкцию nonlocal. Используется для ссылки на имя во внешнем def блоке (в py2 к такой переменной нельзя обратиться)&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  def f():
      x = 2  # local for f
      def g():
          nonlocal x  # python3 only
          x = 3  # local for g
      g()
      print(x)
  &amp;gt;&amp;gt;&amp;gt; f()  # python3 only
  3
  &amp;gt;&amp;gt;&amp;gt; f()  # with commented nonlocal
  2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;LEGB rule (local, enclosing, global, builtin) или LNGB (N=nonlocal) - порядок поиска переменной в python&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;py3 переменная исключения &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;as name&lt;/code&gt; удаляется после выполнения блока (даже если переменная была объявлена до try)&lt;/p&gt;

    &lt;p&gt;python 2&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; x = 1
  &amp;gt;&amp;gt;&amp;gt; try:
  ...     1/0
  ... except Exception as x:
  ...     pass
  &amp;gt;&amp;gt;&amp;gt; x
  ZeroDivisionError(&apos;integer division or modulo by zero&apos;,)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;python 3&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; x = 1
  &amp;gt;&amp;gt;&amp;gt; try:
  ...     1/0
  ... except Exception as x:
  ...     pass
  &amp;gt;&amp;gt;&amp;gt; x
  NameError: name &apos;x&apos; is not defined
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;переопределить builtin и отменить переопределение&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; open = 99
  &amp;gt;&amp;gt;&amp;gt; open
  99
  &amp;gt;&amp;gt;&amp;gt; del open
  &amp;gt;&amp;gt;&amp;gt; open
  &amp;lt;built-in function open&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;py2 fun: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__builtins__.True = False&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;lambda может принимать аргументы по умолчанию&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;nonlocal можно заменить mutable объектом или аттрибутом функции&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  def f():
      x = [1]
      def g():
          print x[0]
          x.append(2)
      g()
      print x
  &amp;gt;&amp;gt;&amp;gt; f()
  1
  [1, 2]

  def f():
      x = 1
      def g():
          print g.x
          g.x = 2
      g.x = x
      g()
      print g.x
  &amp;gt;&amp;gt;&amp;gt; f()
  1
  2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;py3 keyword only arguments&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  def f(*args, name):
      print(&quot;args&quot;, args)
      print(&quot;name&quot;, name)
  &amp;gt;&amp;gt;&amp;gt; f(1, 2)
  TypeError: f() missing 1 required keyword-only argument: &apos;name&apos;
  &amp;gt;&amp;gt;&amp;gt; f(1, 2, name=3)
  args (1, 2)
  name 3

  def f(*args, name=3):
      print(&quot;args&quot;, args)
      print(&quot;name&quot;, name)
  &amp;gt;&amp;gt;&amp;gt; f(1, 2)
  args (1, 2)
  name 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;py3 есть распаковка при присваивании, она возвращает list, а распаковка при вызове функции возвращает tuple&lt;/p&gt;

    &lt;p&gt;python 2 and 3&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  def f(a, *b):
      print(b)
  &amp;gt;&amp;gt;&amp;gt; f(1, *[2, 3])
  (2, 3)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;python 3&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; a, *b = [1, 2, 3]
  &amp;gt;&amp;gt;&amp;gt; print(b)
  [2, 3]
  &amp;gt;&amp;gt;&amp;gt; a, *b = (1, 2, 3)
  &amp;gt;&amp;gt;&amp;gt; print(b)
  [2, 3]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;добавить список в начало существующего: L[:0] = [1, 2, 3]&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;посмотреть и задать максимальный уровень рекурсии&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; sys.getrecursionlimit()  # 1000
  &amp;gt;&amp;gt;&amp;gt; sys.setrecursionlimit(10000)
  &amp;gt;&amp;gt;&amp;gt; help(sys.setrecursionlimit)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;аргументы функций&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; def f(a):
  ...     b = 1
  ... 
  &amp;gt;&amp;gt;&amp;gt; f.__name__
  &apos;f&apos;
  &amp;gt;&amp;gt;&amp;gt; f.__code__.co_varnames
  (&apos;a&apos;, &apos;b&apos;)
  &amp;gt;&amp;gt;&amp;gt; f.__code__.co_argcount
  1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;py3 к аргументам функции можно добавить аннотации. Эти данные доступны в &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;func.__annotations__&lt;/code&gt;. Автоматически ничего с этими аннотациями не происходит, но с ними можно работать вручную по ситуации (например, для проверки типа или диапазона с помощью своего декоратора)&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; def func(a: &apos;spam&apos;, b: (1, 10), c: float):
  ...     return a + b + c
  &amp;gt;&amp;gt;&amp;gt; func.__annotations__
  {&apos;b&apos;: (1, 10), &apos;c&apos;: &amp;lt;class &apos;float&apos;&amp;gt;, &apos;a&apos;: &apos;spam&apos;}

  # default values
  &amp;gt;&amp;gt;&amp;gt; def func(a: &apos;spam&apos;=4, b: (1, 10)=5, c: float=0.1):
  ...     return a + b + c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;внутри lambda нельзя присвоить, но можно &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setattr&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__dict__&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;operator module in std lib&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  import operator as op
  reduce(op.add, [2, 4, 6])
  # same as
  reduce(lambda x, y: x+y, [2, 4, 6])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;KISS: Keep It Simple [Sir/Stupid]&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;comprehension vs map в общем случае (лучше проверить на вашей системе)&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map(lambda x: x ..)&lt;/code&gt; slower than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[x for x ..]&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[ord(x) for x ..]&lt;/code&gt; slower than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map(ord for x ..)&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map(lambda x: L.append(x+10), range(10))&lt;/code&gt; even slower than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;for x in range(10): L.append(x+10)&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;распаковка в lambda отличатся для py2 и py3&lt;/p&gt;

    &lt;p&gt;python 2&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; map(lambda (a, b, c): a, [(0,1,2), (3,4,5)])
  [0, 3]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;python 3&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; list(map(lambda (a, b, c): a, [(0,1,2), (3,4,5)]))
  SyntaxError: invalid syntax
  &amp;gt;&amp;gt;&amp;gt; list(map(lambda a, b, c: a, [(0,1,2), (3,4,5)]))
  TypeError: &amp;lt;lambda&amp;gt;() missing 2 required positional arguments: &apos;b&apos; and &apos;c&apos;
  &amp;gt;&amp;gt;&amp;gt; list(map(lambda row: row[0], [(0,1,2), (3,4,5)]))
  [0, 3]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;многие встроенные функции могут принимать генераторы, тогда не нужны дополнительные скобки&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; &quot;&quot;.join(str(x) for x in [1, 2])
  &apos;12&apos;
  &amp;gt;&amp;gt;&amp;gt; sorted(str(x) for x in [1, 2])
  [&apos;1&apos;, &apos;2&apos;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;but for args () is needed&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; sorted(str(x) for x in [1, 2], reverse=True)
  SyntaxError: Generator expression must be parenthesized if not sole argument
  &amp;gt;&amp;gt;&amp;gt; sorted((str(x) for x in [1, 2]), reverse=True)
  [&apos;2&apos;, &apos;1&apos;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;py3: yield from iterator (приведенные ниже функции идентичны)&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  def f():
      for i in range(5):
          yield i

  def g():
      yield from range(5)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;поместить первый элемент в конец списка&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  L = L[1:] + L[:1]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;zip одного списка&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; zip([1,2,3])
  [(1,), (2,), (3,)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;map и zip похожи&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  map(lambda x,y: (x,y), S1, S2) == zip(S1, S2)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python -m script_name&lt;/code&gt; - запускает модуль (модуль - это файл .py, т.е. считай скрипт), который ищется в текущих путях поиска. Модуль может лежать где-нибудь в site-packages, а запустится от main (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__name__ == &apos;__main__&apos;&lt;/code&gt;). Если это package (директория с &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__init__.py&lt;/code&gt;), то запустится файл &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__main__.py&lt;/code&gt;. Если такого нет, то ошибка. Некоторые модули умные и берут аргументы из командной строки, например timeit: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python -m timeit &apos;&quot;-&quot;.join(str(n) for n in range(100))&apos;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;прямой возможности использовать одноименную переменную в одной функции: и глобальную и локальную нет. Можно только играть c &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__main__.my_global_var&lt;/code&gt;&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  # OK
  X = 99
  def f():
      print(X)
  &amp;gt;&amp;gt;&amp;gt; f()
  99

  # ERROR
  def f():
      print(X)  # &amp;lt;- error
      X = 99
  &amp;gt;&amp;gt;&amp;gt; f()
  UnboundLocalError: local variable &apos;X&apos; referenced before assignment

  # global everywhere
  def f():
      global X
      print(X)
      X = 88

  # hack with main
  def f():
      import __main__
      print(__main__.X)
      X = 88
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;скорость вычисления корня числа&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  math.sqrt(x)  # fastest
  x ** .5  # fast
  pow(x, .5)  # slow
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;py3.2+ создает папку &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__pycache__&lt;/code&gt;, чтобы сохранять разные байткоды для разных версий python’а и не пересоздавать их впоследствии. В корне уже нет *.pyc.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;.pyc для вызывающегося скрипта (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__name__ = &apos;__main__&apos;&lt;/code&gt;) не создается, только для import&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;порядок поиска при импорте (можно посмотреть в sys.path):&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;home of program (+ in some versions current dir, from where program is launched, i.e. current dir)&lt;/li&gt;
      &lt;li&gt;PYTHONPATH&lt;/li&gt;
      &lt;li&gt;std lib dir&lt;/li&gt;
      &lt;li&gt;content of any .pth file (if exists)&lt;/li&gt;
      &lt;li&gt;site-packages dir&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;sys.path можно изменять в runtime, это затронет всю программу&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;python -O создает слегка опимизированный байткод .pyo вместо .pyc, он на ~5% быстрее. Также этот флаг убирает все assert’ы из кода. А так же влияет на переменную &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__debug__&lt;/code&gt;&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  # main.py
  print __debug__
  assert True == False

  # python main.py
  True
  AssertionError

  # python -O main.py
  False
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;в py2 в функции можно сделать &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;from some_module import *&lt;/code&gt;, но будет warning. В py3 - error&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  # python 2
  def f():
      from urllib import *
      print(&apos;after import&apos;)
  &amp;gt;&amp;gt;&amp;gt; f()
  SyntaxWarning: import * only allowed at module level
  after import

  # python 3
  &amp;gt;&amp;gt;&amp;gt; f()
  SyntaxError: import * only allowed at module level
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;reload не обновляет объекты, загруженные с помощью from: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;from x import y&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt; не обновится после &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reload(x)&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;reload не обновляет c-шные модули&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;py3: в package текущей папки пакета нету в sys.path. Если модуль в пакете хочет импортировать другой модуль из этого же пакета, надо использовать относительный импорт: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;from . import smth&lt;/code&gt;. Однако, если модуль запускается как &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__main__&lt;/code&gt;, то есть.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;py2: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;from __future__ import absolute_import&lt;/code&gt; делает поведение import в py2 таким же, как в py3. Это позволит импортировать модуль string из стандартной библиотеки в данном случае довольно просто:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  mypkg
  ├── __init__.py
  ├── main.py  # import string from std here?
  └── string.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;относительный импорт запрещен вне пакета:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  # test.py
  from . import a

  # python 2
  python test.py
  ValueError: Attempted relative import in non-package

  # python 3
  python test.py
  SystemError: Parent module &apos;&apos; not loaded, cannot perform relative import
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;минусы относительного импорта:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;модуль, в котором используются относительные импорты нельзя использовать как скрипт (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__main__&lt;/code&gt;). Решение: использовать в модуле абсолютный импорт с именем пакета в начале.&lt;/li&gt;
      &lt;li&gt;как следствие предыдущего пункта, нельзя запустить тесты, которые запускаются при запуске модуля как скрипта&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;в py3.3+ есть namespace packages. Это такие пакеты, в которых нет &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__init__.py&lt;/code&gt;. Два (или более) namespace package с одним и тем же именем могут лежать в разных директориях из sys.path. При этом модули пакетов собираются под этим именем. Если у модулей одинаковые имена - берется тот, который найден раньше в порядке sys.path. namespace пакет всегда имеет меньший приоритет над обычным пакетом (с &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__init__.py&lt;/code&gt;). Как только где-то найден обычный пакет - используется он, все найденные namespace packages отметаются. namespace пакеты медленнее импортятся, чем обычные.&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  # collect modules in namespace package
  current_dir
  └── mypkg
      └── mymod1.py

  site-packages
  └── mypkg
      └── mymod2.py

  &amp;gt;&amp;gt;&amp;gt; import mypkg.mymod1
  &amp;gt;&amp;gt;&amp;gt; import mypkg.mymod2

  # redefine module in namespace package
  current_dir
  └── mypkg
      └── mymod1.py
      └── mymod2.py

  site-packages
  └── mypkg
      └── mymod2.py

  &amp;gt;&amp;gt;&amp;gt; import mypkg.mymod1
  &amp;gt;&amp;gt;&amp;gt; import mypkg.mymod2  # current_dir.mypkg.mymod2

  # regular package is used
  current_dir
  └── mypkg
      └── mymod1.py

  site-packages
  └── mypkg
      └── mymod2.py

  another-packages
  └── mypkg
      └── mymod1.py

  &amp;gt;&amp;gt;&amp;gt; import sys
  &amp;gt;&amp;gt;&amp;gt; sys.append(&apos;another-packages&apos;)
  &amp;gt;&amp;gt;&amp;gt; import mypkg.mymod1  # another-packages.mypkg.mymod1
  &amp;gt;&amp;gt;&amp;gt; import mypkg.mymod2
  ImportError: No module named &apos;mypkg.mymod2&apos;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;В py3 и в py2 new style classes (отнаследованные от object) магические методы при выполнении оператора ищутся в классе, минуя инстанс (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__getattr__&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__getattribute__&lt;/code&gt; не вызываются). Но если явно вызвать магический метод - то вызывается от инстанса (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__getattr__&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__getattribute__&lt;/code&gt; вызываются).&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  class A(object):
      def __repr__(self):
          return &quot;class level repr&quot;
      def normal_method(self):
          return &quot;class level normal method&quot;

  def instance_repr():
      return &quot;instance level repr&quot;
  def instance_normal_method():
      return &quot;instance level normal method&quot;

  a = A()
  print(a)  # class level repr
  print(a.normal_method())  # class level normal method

  a.__repr__ = instance_repr
  a.normal_method = instance_normal_method

  print(a)  # class level repr
  print(a.normal_method())  # instance level normal method

  print(a.__repr__())  # instance level repr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ZODB - объектно ориентированная база данных для python объектов, поддерживает ACID транзакции (включая savepoints)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;slice object:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  L[2:4] == L[slice(2,4)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;iteration context (for, while, …) will try&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__iter__&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__getitem__&lt;/code&gt;&lt;/p&gt;

        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; class Gen(object):
     def __getitem__(self, index):
         if index &amp;gt; 5:
             raise StopIteration()
         return index

 for x in Gen():
     print x,

 # output
 0 1 2 3 4 5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;for вызывает &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__iter__()&lt;/code&gt;. Потом к полученному объекту вызывает &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__next__()&lt;/code&gt; (в py2 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.next()&lt;/code&gt;), пока не получит &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StopIteration&lt;/code&gt;. В классе можно использовать &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__iter__(): yield ...&lt;/code&gt;, тогда не надо реализовать &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__next__&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__call__&lt;/code&gt; вызывается, когда скобки &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;()&lt;/code&gt; применяются к инстансу, а не к классу&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  class A(object):
      def __call__(self):
          print(&quot;call&quot;)

  a = A()  # nothing
  a()  # print call
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__eq__&lt;/code&gt; = True не подразумевает, что &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__ne__&lt;/code&gt; = False&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;boolean context:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__bool__&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__nonzero__&lt;/code&gt; in py2)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__len__&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;True&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;паттерны ООП&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;inheritance - “is a”&lt;/li&gt;
      &lt;li&gt;composition - “has a” (контейнер хранит другие объекты)&lt;/li&gt;
      &lt;li&gt;delegation - вид composition, когда хранится только один объект. Wrapper сохраняет основной интерфейс, добавляя какие-то шаги.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;аттрибуты и методы класса, которые начинаются с двух подчеркиваний &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__&lt;/code&gt;, но не заканчиваются ими, имеют особое поведение. Они не пересекаются с одноименными аттрибутами и методами унаследованного класса. В &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__dict__&lt;/code&gt; они попадают под именем &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_ClassName__attrname&lt;/code&gt;.&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  class A(object):
      __x = 1

      def show_a(self):
          print self.__x

  class B(A):

      def show_b(self):
          print self.__x

  &amp;gt;&amp;gt;&amp;gt; a = A()
  &amp;gt;&amp;gt;&amp;gt; a.show_a()
  1
  &amp;gt;&amp;gt;&amp;gt; b = B()
  &amp;gt;&amp;gt;&amp;gt; b.show_a()
  1
  &amp;gt;&amp;gt;&amp;gt; b.show_b()
  AttributeError: &apos;B&apos; object has no attribute &apos;_B__x&apos;

  class B(A):
      __x = 2

      def show_b(self):
          print self.__x

  &amp;gt;&amp;gt;&amp;gt; b = B()
  &amp;gt;&amp;gt;&amp;gt; b.show_a()
  1
  &amp;gt;&amp;gt;&amp;gt; b.show_b()
  2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;в py3 можно в методе класса не указывать аргумент self, и использовать его только от имени класса (не инстанса) - он будет работать как static method. В py2 так нельзя.&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  class A(object):
      def f():
          print(&quot;f&quot;)

  # python 2
  &amp;gt;&amp;gt;&amp;gt; A.f()
  TypeError: unbound method f() must be called with A instance as first argument (got nothing instead)

  # python 3
  &amp;gt;&amp;gt;&amp;gt; A.f()
  f
  &amp;gt;&amp;gt;&amp;gt; a = A()
  &amp;gt;&amp;gt;&amp;gt; a.f()
  TypeError: f() takes 0 positional arguments but 1 was given
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;bound function:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  class A(object):
      def f(self):
          pass

  a = A()
  print(a.f.__self__)  # вот где хранится self
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;поиск аттрибутов в classic (old-style) классах и new-style классах:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;classic. DFLR: Depth First, Left to Right&lt;/li&gt;
      &lt;li&gt;new-style. Diamond pattern, L-R, D-F; MRO (хитрее, чем просто LRDF)&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;MRO исключает класс, от которого унаследованны &amp;gt;= 2 других класса, от поиска аттрибуты дважды. Т.е. класс пападает в поиск только 1 раз.&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  # python 2 old-style
  class A: attr = 1

  class B(A): pass

  class C(A): attr = 2

  class D(B,C): pass

  &amp;gt;&amp;gt;&amp;gt; x = D()
  &amp;gt;&amp;gt;&amp;gt; print(x.attr)  # x, D, B, A
  1

  # python 2 new-style
  class A(object): attr = 1

  class B(A): pass

  class C(A): attr = 2

  class D(B,C): pass

  &amp;gt;&amp;gt;&amp;gt; x = D()
  &amp;gt;&amp;gt;&amp;gt; print(x.attr)  # x, D, B, C
  2

  # scheme
  A     A
  |     |
  B     C
  \     /
     |
     D
     |
     X
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Посмотреть порядок поиска в new-style (по алгоритму mro):&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; D.__mro__
  (&amp;lt;class &apos;__main__.D&apos;&amp;gt;, &amp;lt;class &apos;__main__.B&apos;&amp;gt;, &amp;lt;class &apos;__main__.C&apos;&amp;gt;, &amp;lt;class &apos;__main__.A&apos;&amp;gt;, &amp;lt;type &apos;object&apos;&amp;gt;)
  &amp;gt;&amp;gt;&amp;gt; D.mro()  # все равно что list(D.__mro__)
  [&amp;lt;class &apos;__main__.D&apos;&amp;gt;, &amp;lt;class &apos;__main__.B&apos;&amp;gt;, &amp;lt;class &apos;__main__.C&apos;&amp;gt;, &amp;lt;class &apos;__main__.A&apos;&amp;gt;, &amp;lt;type &apos;object&apos;&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;format() конструкция вызывает метод &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__format__&lt;/code&gt;. Если его нет, то в py2 - TypeError.&lt;/p&gt;

    &lt;p&gt;python 2&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; print(&apos;{0}&apos;.format(object))
  &amp;lt;type &apos;object&apos;&amp;gt;
  &amp;gt;&amp;gt;&amp;gt; print(&apos;{0}&apos;.format(object.__reduce__))
  TypeError: Type method_descriptor doesn&apos;t define __format__
  # явно вызовим __str__
  &amp;gt;&amp;gt;&amp;gt; print(&apos;{0!s}&apos;.format(object.__reduce__))
  &amp;lt;method &apos;__reduce__&apos; of &apos;object&apos; objects&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;python 3.4&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; print(&apos;{0}&apos;.format(object.__reduce__))
  &amp;lt;method &apos;__reduce__&apos; of &apos;object&apos; objects&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;python 2 &amp;amp; 3&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  class A(object):
      def __format__(self, *args):
          return &quot;A.__format__&quot;

      def __str__(self):
          return &quot;A.__str__&quot;

  &amp;gt;&amp;gt;&amp;gt; a = A()
  &amp;gt;&amp;gt;&amp;gt; &quot;{0}&quot;.format(a)
  &apos;A.__format__&apos;
  &amp;gt;&amp;gt;&amp;gt; print(a)
  A.__str__
  &amp;gt;&amp;gt;&amp;gt; &apos;%s&apos; % a
  &apos;A.__str__&apos;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;В &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__dict__&lt;/code&gt; не попадают “виртуальные” аттрибуты:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;new-style properties (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@property&lt;/code&gt;)&lt;/li&gt;
      &lt;li&gt;slots&lt;/li&gt;
      &lt;li&gt;descriptors&lt;/li&gt;
      &lt;li&gt;dynamic attrs computed with tools like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__getattr__&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;MRO - method resolution order&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;diamond pattern - разновидность ‘multi inheritance’, когда 2 или более класса могут быть потомками одного и того же класса (object). Этот паттерн используется в python.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;прокси объект, который возвращает &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;super()&lt;/code&gt;, не работает с операторами:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  # python 3
  class A(list):
      def get_some(self):
          return super()[0]

  &amp;gt;&amp;gt;&amp;gt; a = A([1, 2])
  &amp;gt;&amp;gt;&amp;gt; a.get_some()
  TypeError: &apos;super&apos; object is not subscriptable

  class A(list):
      def get_some(self):
          return super().__getitem__(0)

  &amp;gt;&amp;gt;&amp;gt; a = A([1,2])
  &amp;gt;&amp;gt;&amp;gt; a.get_some()
  1


  # python 2
  class A(list):
      def get_some(self):
          return super(A, self)[0]

  &amp;gt;&amp;gt;&amp;gt; a = A([1,2])
  &amp;gt;&amp;gt;&amp;gt; a.get_some()
  TypeError: &apos;super&apos; object has no attribute &apos;__getitem__&apos;

  class A(list):
      def get_some(self):
          return super(A, self).__getitem__(0)

  &amp;gt;&amp;gt;&amp;gt; a = A([1,2])
  &amp;gt;&amp;gt;&amp;gt; a.get_some()
  1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;super()&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Плюсы super():&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;если superclass нужно изменить в runtime, без super не получится: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C.__bases__ = (Y, )&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;когда нужно вызвать цепочки унаследованных методов в multi inheritance классе, в порядке MRO.&lt;/p&gt;

            &lt;p&gt;Если попытаться вызвать без super, то можем вызвать метод какого-то класса дважды.&lt;/p&gt;

            &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  class A(object):
      def __init__(self):
          print(&quot;A&quot;)

  class B(A):
      def __init__(self):
          print(&quot;B&quot;)
          super(B, self).__init__()

  class C(A):
      def __init__(self):
          print(&quot;C&quot;)
          super(C, self).__init__()

  class D(B, C):
      pass

  &amp;gt;&amp;gt;&amp;gt; d = D()
  B
  C
  A
  &amp;gt;&amp;gt;&amp;gt; B.mro()
  [&amp;lt;class &apos;__main__.B&apos;&amp;gt;, &amp;lt;class &apos;__main__.A&apos;&amp;gt;, &amp;lt;type &apos;object&apos;&amp;gt;]
  &amp;gt;&amp;gt;&amp;gt; D.mro()
  [&amp;lt;class &apos;__main__.D&apos;&amp;gt;, &amp;lt;class &apos;__main__.B&apos;&amp;gt;, &amp;lt;class &apos;__main__.C&apos;&amp;gt;, &amp;lt;class &apos;__main__.A&apos;&amp;gt;, &amp;lt;type &apos;object&apos;&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;

            &lt;p&gt;Вызов цепочки методов&lt;/p&gt;

            &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  class B(object):
      def __init__(self):
          print(&quot;B&quot;)
          # for B super is C here, by MRO order
          super(B, self).__init__()

  class C(object):
      def __init__(self):
          print(&quot;C&quot;)
          # it is ok here to call super().__init__
          # because object also has __init__
          super(C, self).__init__()

  class D(B, C):
      pass

  &amp;gt;&amp;gt;&amp;gt; d = D()
  B
  C
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;super будет искать метод в иерархии MRO. Он будет искать пока не найдет или пока не упрется. Т.е. допустим иерархия для super: A, С, и в A нет метода, а в C есть, то вызовится C.method без ошибки&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;минусы (или особенности) super():&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;при использовании super все методы в цепочке должны принимать одинаковые аргументы&lt;/li&gt;
          &lt;li&gt;super().m - все классы должны иметь метод m и вызывать super().m, кроме последнего, который вызывать super не должен&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;унаследовать метод от конкретного класса:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  class A(B, C):
      other = C.other  # not B other
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;finally вызовится даже если исключение случается в except блоке или else блоке&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;исключение - всегда instance, даже если raise ExceptionClass (без &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;()&lt;/code&gt;), автоматически (без аргументов) создается instance:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  raise Exception  # == raise Exception()
  raise  # возбуждается перехваченное исключение
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;py2, посмотреть исключения builtin:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  import exceptions
  help(exceptions)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;минус чтения байтов из файла с последующим ручным decode в том, что если мы будем читать по кускам, то может быть сложный случай, когда один байт одного символа попадает в один кусок, а другой - в другой. Поэтому в py2 лучше использовать codecs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Когда имя файла даем в unicode, python автоматически декодит и кодит в байты. Когда имя файла - байты, то не кодит нечего. encoding для имен файлов (дефолтный):&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; sys.getfilesystemencoding()
  &apos;utf-8&apos;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;дескриптор - это класс, который реализует хотя бы один из методов&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__get__&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__set__&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__delete__&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Если в дескрипторе не реализовать &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__set__&lt;/code&gt;, то это еще не значит, что соответствующий аттрибут будет read-only. Аттрибут просто перезатрется. Надо делать &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__set__&lt;/code&gt; с исключением.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;декоратры можно совмещать, тогда они будут применяться в порядке снизу вверх:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  @A
  @B
  @C
  def f(): pass

  # все равно что

  f = A(B(C(f)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;декоратор может принимать аргументы. Реализовать можно через вложенные функции&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  @dec(a, b)
  def f(): pass

  # все равно что

  f = dec(a, b)(f)

  # реализация:

  def dec(a, b):
      def actual_dec(f):
          return f
      return actual_dec
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Т.е. декоратор может включать &lt;strong&gt;3 уровня callables&lt;/strong&gt;:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;callable to accept decorator args&lt;/li&gt;
      &lt;li&gt;callable to serve as decorator&lt;/li&gt;
      &lt;li&gt;callable to handle calls to the original function&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;при создании класса вызываются два метода класса type:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  type.__new__(type_class, class_name, super_classes, attr_dict)
  type.__init__(class, class_name, super_classes, attr_dict)

  # python 3
  class Eggs: pass

  class Spam(Eggs):
      data = 1
      def method(self, arg): pass

  # все равно, что
  Eggs = type(&apos;Eggs&apos;, (), ...)  # в () object добавится автоматически

  Spam = type(&apos;Spam&apos;, (Eggs, ), {&apos;data&apos;: 1, &apos;method&apos;: method, &apos;__module__&apos;: &apos;__main__&apos;})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Задать метакласс для класса&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;python 2&lt;/strong&gt;&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  class Spam(object):
      __metaclass__ = Meta
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Наследовать от object не обязательно, но если его нет, а &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__metaclass__&lt;/code&gt;
  есть, то результат все равно будет new-style, и в &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__bases__&lt;/code&gt; будет object.
  Но лучше явно указать object, т.к. могут быть проблемы, например с наследованием.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;python 3&lt;/strong&gt;&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  class Spam(Eggs, metaclass=Meta):
      pass
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;аттрибут &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__metaclass__&lt;/code&gt; просто игнорируется&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Метакласс сам не обязательно должен быть классом. Просто его вызов должен возвращать класс. Это может быть и функция:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  def meta_func(class_name, bases, attr_dict):
      return type(class_name, bases, attr_dict)

  # python 2
  class Spam(object):
      __metaclass__ = meta_func
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;У обычных классов тоже есть метод &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__new__&lt;/code&gt;. Но он не создает класс, он вызывается при создании инстанса класса (получает готовый класс в качестве аргумента). Он же и вызывает &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__init__&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Магические методы метакласса и класса:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  class Meta(type): pass
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;при создании класса Class (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class Class(metaclass=Meta): ...&lt;/code&gt;) вызываются методы&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  Meta.__new__
  Meta.__init__
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;при создании инстанса класса Class (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;instance = Class(...)&lt;/code&gt;) вызываются методы (внешний вызывает вложенный)&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  Meta.__call__
      calls Class.__new__
          calls Class.__init__
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;при вызове инстанса класса Class (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;instance()&lt;/code&gt;) вызывается метод&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  Class.__call__
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Метакласс можно не наследовать от type, а определить метод &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__new__&lt;/code&gt;. Но тогда методы &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__init__&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__call__&lt;/code&gt; нашего метакласса не будут вызываться:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  class MySimpleMetaClass(object):
      def __new__(cls, *args, **kwargs):
          new_class = type.__new__(type, *args, **kwargs)
          return new_class

      def __init__(new_class, *args, **kwargs):
          print(&quot;__init__ won&apos;t be called...&quot;)

      def __call__(*args, **kwargs):
          print(&quot;__call__ won&apos;t be called...&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Метакласс класса вызывается и для всех потомков класса. Когда &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__new__&lt;/code&gt; метакласса вызывается для родительского класса, в bases будет &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(&amp;lt;type &apos;object&apos;&amp;gt;,)&lt;/code&gt;, а для дочернего класса - класс родителя.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Аттрибуты метакласса наследуются классом, но не инстансами класса.&lt;/p&gt;

    &lt;p&gt;python 2 (в python 3 небольшие отличия в синтаксисе)&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  class MyMetaClass(type):
      attr = 2

      def __new__(*args, **kwargs):
          return type.__new__(*args, **kwargs)

      def toast(*args, **kwargs):
          print(args, kwargs)

  class A(object):
      __metaclass__ = MyMetaClass
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Метакласс входит в цепочку поиска аттрибутов класса&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; A.toast()
  ((&amp;lt;class &apos;__main__.A&apos;&amp;gt;,), {})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Интересно, что метод от метакласса - bound, хотя вызывается от класса, не от инстанса. На самом деле класс - это инстанс метакласса:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; A.toast
  &amp;lt;bound method MyMetaClass.toast of &amp;lt;class &apos;__main__.A&apos;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Но метакласс не входит в цепочку поиска аттрибутов инстанса класса&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; a = A()
  &amp;gt;&amp;gt;&amp;gt; a.toast()
  AttributeError: &apos;A&apos; object has no attribute &apos;toast&apos;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Если в каком-нибудь super классе объявлен аттрибут с тем же именем, что и в метаклассе, то он имеет преимущество (не важно насколько глубоко super)&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  class B(object):
      attr = 1

  class C(B):
      __metaclass__ = MyMetaClass

  &amp;gt;&amp;gt;&amp;gt; C.attr
  1  # MyMetaClass.attr = 2 is ignored
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Аттрибуты инстанса ищутся в его &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__dict__&lt;/code&gt;, дальше в &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__dict__&lt;/code&gt;‘ах &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__class__.__mro__&lt;/code&gt;.
  Аттрибуты класса ищутся еще и в &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__class__.__mro__&lt;/code&gt;, это другой класс, со стороны инстанса это будет &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__class__.__class__.__mro__&lt;/code&gt;.&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; inst = C()
  &amp;gt;&amp;gt;&amp;gt; inst.__class__ -&amp;gt; &amp;lt;class &apos;__main__.C&apos;&amp;gt;
  &amp;gt;&amp;gt;&amp;gt; C.__bases__    -&amp;gt; (&amp;lt;class &apos;__main__.B&apos;&amp;gt;,)
  &amp;gt;&amp;gt;&amp;gt; C.__class__    -&amp;gt; &amp;lt;class &apos;__main__.MyMetaClass&apos;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Инстансы наследуют аттрибуты от всех суперклассов. Классы - от суперклассов и метаклассов. Метаклассы - от супер-метаклассов (и вероятно от мета-метаклассов).&lt;/p&gt;

    &lt;p&gt;Data descriptor’ы (те, которые определяют &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__set__&lt;/code&gt;) вносят небольшие поправки в порядок поиска аттрибутов для инстанса.
  Для инстанса, data descriptor будут иметь преимущество в поиске, даже если они объявлены в супер классах:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  class DataDescriptor(object):
      def __get__(self, instance, owner):
          print(&quot;DataDescriptor.__get__&quot;)
          return 5
      def __set__(self, instance, value):
          print(&quot;DataDescriptor.__set__&quot;, value)


  class B(object):
      attr = DataDescriptor()

  class C(B):
      pass

  &amp;gt;&amp;gt;&amp;gt; c = C()
  &amp;gt;&amp;gt;&amp;gt; c.__dict__[&apos;attr&apos;] = 88
  &amp;gt;&amp;gt;&amp;gt; c.attr
  DataDescriptor.__get__
  5
  &amp;gt;&amp;gt;&amp;gt; c.attr = 8
  (&apos;DataDescriptor.__set__&apos;, 8)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Вызвался дескриптор, несмотря на то, что мы задали аттрибут с тем же именем в &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c.__dict__&lt;/code&gt;.
  Аттрибут не затер дескриптор суперкласса, сработал дескриптор.
  Такого поведения не будет с обычным дескриптором (nondata):&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  class SimpleDescriptor(object):
      def __get__(self, instance, owner):
          print(&quot;SimpleDescriptor.__get__&quot;)
          return 5

  class B(object):
      attr = SimpleDescriptor()

  class C(B):
      pass

  &amp;gt;&amp;gt;&amp;gt; c = C()
  &amp;gt;&amp;gt;&amp;gt; c.attr
  SimpleDescriptor.__get__
  5
  &amp;gt;&amp;gt;&amp;gt; c.__dict__[&apos;attr&apos;] = 88
  &amp;gt;&amp;gt;&amp;gt; c.attr
  88
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Так же, для builtin операторов, которые вызывают магические методы, поиск особый. Он минует &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;instance.__dict__&lt;/code&gt;, сразу идет поиск в &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__dict__&lt;/code&gt; классов из &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__mro__&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;магические методы, которые вызываются неявно путем использования builtin операторов для классов ищутся в метаклассе, минуя сами классы (сам класс и всего его суперклассы):&lt;/p&gt;

    &lt;p&gt;python 2 (в python 3 небольшие отличия в синтаксисе)&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  class MyMetaClass(type):
      def __new__(*args, **kwargs):
          return type.__new__(*args, **kwargs)
      def __str__(cls):
          return &quot;__str__ from meta&quot;

  class A(object):
      __metaclass__ = MyMetaClass
      def __str__(self):
          return &quot;__str__ from class A&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Вызывается метод &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__str__&lt;/code&gt; метакласса, а не класса:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; print A
  __str__ from meta
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;А тут вызывается метод &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__str__&lt;/code&gt; от object:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; print MyMetaClass
  &amp;lt;class &apos;__main__.MyMetaClass&apos;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Автор Марк Лутц немного беспокоится, что python становится слишком сложным и обрастает дублирующим функционалом, например:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;str.format&lt;/code&gt; и &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with&lt;/code&gt; и &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try/finally&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;Это противоречит &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import this&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="python" /><summary type="html">Недавно прочитал книгу Марка Лутца “Learning Python”, 5-ое издание. Привожу список самых интересных фишек (по моему мнению) оттуда, что-то вроде конспекта.</summary></entry><entry><title type="html">Слушаем wifi с помощью wireshark</title><link href="https://st4lk.github.io/blog/2015/04/17/listen-wifi-with-wireshark.html" rel="alternate" type="text/html" title="Слушаем wifi с помощью wireshark" /><published>2015-04-17T18:19:43+00:00</published><updated>2015-04-17T18:19:43+00:00</updated><id>https://st4lk.github.io/blog/2015/04/17/listen-wifi-with-wireshark</id><content type="html" xml:base="https://st4lk.github.io/blog/2015/04/17/listen-wifi-with-wireshark.html">&lt;p&gt;&lt;a href=&quot;/blog/2015/04/17/listen-wifi-with-wireshark.html&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/16098/85893628.c68/0_17f35c_4bf9a7fe_M.jpg&quot; alt=&quot;Слушаем wifi с помощью wireshark&quot; title=&quot;Слушаем wifi с помощью wireshark&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Всегда знал, что можно посмотреть сетевые пакеты, которые передаются по wifi сети. Но на практике этого не делал (на работе анализировал сетевые пакеты, но то был не HTTP протокол). Решил восполнить этот пробел, ведь это интересно и полезно. Более стройно выстраивается понимание протоколов TCP-IP и HTTP. Видно, как летят наши пароли и сессии, после такого опыта поневоле начинаешь относиться к безопасности сайта с большим трепетом.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Трафик будем слушать с помощью программы Wireshark. Есть много утилит для анализа сетевой активности (ngrep, tcpdump, mitmproxy), но Wireshark пожалуй самая популярная и имеет огромный функционал.&lt;/p&gt;

&lt;p&gt;Опишу работу программы на примере таких задач:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#localhost&quot;&gt;послушать сетевые пакеты, которые мы отправляем/принимаем &lt;strong&gt;внутри локальной&lt;/strong&gt; машины (localhost)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#local_out&quot;&gt;послушать сетевые пакеты, которые отправляет/принимает наша &lt;strong&gt;локальная&lt;/strong&gt; машина в/из внешнего мира (интернет)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#wifi_open_other&quot;&gt;послушать сетевые пакеты, которые отправляют/принимают &lt;strong&gt;другие участники открытой wifi&lt;/strong&gt; сети&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#wifi_closed_other&quot;&gt;послушать сетевые пакеты, которые отправляют/принимают &lt;strong&gt;другие участники закрытой wifi&lt;/strong&gt; сети&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Все действия я выполнял на ноутобуке MacBook Pro с OS X Yosemite, на других устройствах возможно что-то будет по-другому.&lt;/p&gt;

&lt;p&gt;Небольшой дисклеймер: все ваши действия на вашей совести и ответсвенности. Не используйте описанные здесь техники во вред кому-либо.&lt;/p&gt;

&lt;h3 id=&quot;сетевые-пакеты-локального-интерфейса-localhost&quot;&gt;Сетевые пакеты локального интерфейса (localhost)&lt;a name=&quot;localhost&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Итак, устанавливаем wireshark. Запускаем, заходим в меню Capture -&amp;gt; Intefaces.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://img-fotki.yandex.ru/get/4509/85893628.c67/0_17f346_a2cf0b57_orig.png&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/4509/85893628.c67/0_17f346_a2cf0b57_XL.png&quot; alt=&quot;ws interface&quot; title=&quot;ws interface&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Я запускаю на ноутобуке, который подключен только к wifi сети (en0 интерфейс).
Насколько я понимаю, awdl0 - это кабельный сетевой интерфейс. По кабелю ноутбук никуда не подключен, поэтому и пакетов нет.
А lo0 - это локальный интерфейс, им сейчас и займемся.
Ставим галочку напротив него и нажимаем Start.
Чтобы сосредоточиться только на HTTP протоколе, зададим &lt;em&gt;Display filter: http&lt;/em&gt; (этот фильтр применяется к уже перехваченным и обработанным пакетам, в отличие от Capture filter, но о нем позднее):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://img-fotki.yandex.ru/get/15599/85893628.c67/0_17f347_e85f8329_orig.png&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/15599/85893628.c67/0_17f347_e85f8329_XL.png&quot; alt=&quot;ws http filter&quot; title=&quot;ws http filter&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Сейчас мы будем ловить сетевые пакеты, передающееся от нашего браузера к django development серверу и обратно.
Есть особенности, связанные именно с django сервером.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Во-первых, он отдает HTTP 1.0, а не HTTP 1.1.&lt;/li&gt;
  &lt;li&gt;Во-вторых, что более важно, в ответных HTTP заголовках может не быть  &lt;br /&gt;
ни &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Content-Length: &amp;lt;response length&amp;gt;&lt;/code&gt;, ни &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Transfer-Encoding: chunked&lt;/code&gt;. В этом случае для определения конца ответа нужно дождаться закрытия соединения с сервером, чего не происходит. Это имеет значение при работе с wireshark. Wireshark понимает большое количество протоколов, в том числе и HTTP. Данные HTTP протокола могут передаваться в нескольких TCP сегментах, но программа группирует эти сегменты и показывает нам итоговый HTTP запрос или ответ. С запросом проблем не возникает, но HTTP ответа не видно в списке фреймов wireshark, потому что она не понимает, что ответ уже закончен (нет ни Content-Length, ни Transfer-Encoding).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;В принципе это не страшно, т.к. мы может нажать на фрейм запроса и выбрать из меню Analyse-&amp;gt;Follow TCP Stream. В отдельном окне мы увидим HTTP запрос и соответствующий HTTP ответ (не важно, завершен он или нет). &lt;em&gt;Follow TCP Stream&lt;/em&gt; так же удобен в том случае, если HTTP запрос и ответ идут не по порядку (между ними могут случиться другие запросы). Т.е. мы выбираем запрос, нажимаем &lt;em&gt;Follow TCP Stream&lt;/em&gt; и видим всю цепочку сообщений.
Однако, мне хотелось видеть и запросы и ответы в списке фреймов.
Это мы можем сделать, добавив &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConditionalGetMiddleware&lt;/code&gt; в список наших &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MIDDLEWARE_CLASSES&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEBUG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MIDDLEWARE_CLASSES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&apos;django.middleware.http.ConditionalGetMiddleware&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MIDDLEWARE_CLASSES&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Прослойка будет выставлять Content-Length в ответах.&lt;/p&gt;

&lt;p&gt;Такое нужно только при работе с django development сервером и wireshark. В остальных случаях все работает: продакшн серверы выставляют &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Transfer-Encoding: chunked&lt;/code&gt; и отдают HTTP по кусочкам (вероятно это делает proxy сервер (nginx, apache)).&lt;/p&gt;

&lt;p&gt;Теперь запустим простой django проект, который на главной странице отображает имя текущего пользователя, а так же форму для логина и пароля. Если пользователь не залогинен, то вместо имени показываем AnonymousUser.&lt;/p&gt;

&lt;p&gt;Для чистоты эксперимента почистим все куки в браузере для адреса 127.0.0.1.
Откроем страницу &lt;a href=&quot;http://127.0.0.1:8000/&quot;&gt;http://127.0.0.1:8000/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Если мы &lt;strong&gt;не&lt;/strong&gt; задали ‘ConditionalGetMiddleware’, то скорее всего увидим только запрос:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://img-fotki.yandex.ru/get/4609/85893628.c68/0_17f349_2b69b414_orig.png&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/4609/85893628.c68/0_17f349_2b69b414_XL.png&quot; alt=&quot;localhost request only&quot; title=&quot;localhost request only&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ответ все же можно увидеть, выбрав запрос и зайдя в &lt;em&gt;Analyse-&amp;gt;Follow TCP Stream&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://img-fotki.yandex.ru/get/6210/85893628.c68/0_17f34a_b9583d43_orig.png&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/6210/85893628.c68/0_17f34a_b9583d43_XL.png&quot; alt=&quot;localhost request only follow tcp&quot; title=&quot;localhost request only follow tcp&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;А если мы включили ‘ConditionalGetMiddleware’, то видим HTTP ответ уже в списке фреймов:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://img-fotki.yandex.ru/get/6307/85893628.c68/0_17f34b_617a4295_orig.png&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/6307/85893628.c68/0_17f34b_617a4295_XL.png&quot; alt=&quot;localhost request response&quot; title=&quot;localhost request response&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Content-Length задан:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://img-fotki.yandex.ru/get/5820/85893628.c68/0_17f34c_f706aca8_orig.png&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/5820/85893628.c68/0_17f34c_f706aca8_XL.png&quot; alt=&quot;localhost request response follow tcp&quot; title=&quot;localhost request response follow tcp&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ну пока не очень интересно, только поковырялись с wireshark.
Но давайте попробуем залогиниться.&lt;/p&gt;

&lt;p&gt;Вводим логин+пароль и нажимаем Login. В wireshark увидим 4 новых фрейма: POST запрос, редирект на главную страницу (ответ 302), запрос на получение главной, ответ главной страницы:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://img-fotki.yandex.ru/get/16121/85893628.c68/0_17f34d_fc2e6c1b_orig.png&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/16121/85893628.c68/0_17f34d_fc2e6c1b_XL.png&quot; alt=&quot;localhost four new frames&quot; title=&quot;localhost four new frames&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Проследим внимательно за передаваемой информацией.&lt;/p&gt;

&lt;p&gt;Фрейм с POST запросом помимо HTTP заголовков содержит данные формы. Вот как они выглядят:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://img-fotki.yandex.ru/get/5703/85893628.c68/0_17f34e_e290f091_orig.png&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/5703/85893628.c68/0_17f34e_e290f091_XL.png&quot; alt=&quot;localhost login password&quot; title=&quot;localhost login password&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Логин и пароль как на ладони.&lt;/p&gt;

&lt;p&gt;Ответом на POST запрос был фрейм с HTTP кодом 302 (редирект). В этом ответе сервер просит сохранить сессию в куках:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://img-fotki.yandex.ru/get/3110/85893628.c68/0_17f34f_664da61c_orig.png&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/3110/85893628.c68/0_17f34f_664da61c_XL.png&quot; alt=&quot;localhost 302 session&quot; title=&quot;localhost 302 session&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Следующим идет запрос главной страницы, в куках передается id сессии:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://img-fotki.yandex.ru/get/3110/85893628.c68/0_17f34f_664da61c_orig.png&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/5302/85893628.c68/0_17f350_c48d0b1d_XL.png&quot; alt=&quot;localhost session in request&quot; title=&quot;localhost session in request&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Вообщем вот так можно смотреть за данными, которыми обменивается ваше приложение с клиентом.
Все эти данные можно увидеть и в wifi сети, которые передаются любым пользователем (если идут запросы по незащищенному соединению http).
Если мы логинимся - виден логин/пароль.
Если просто отправляем запросы - виден id сессии.&lt;/p&gt;

&lt;p&gt;Зная id сессии мы легко можем зайти под ее обладателем, просто записав их в наши куки.
Для простоты, можно проверить какой-нибудь консольной утилитой (curl, httpie).
Пример с httpie:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;http 127.0.0.1:8000 &lt;span class=&quot;s2&quot;&gt;&quot;Cookie: sessionid=tmpocxkz6zsir6xe6i03kspucvlqq385&quot;&lt;/span&gt;
HTTP/1.0 200 OK
Content-Length: 567
Content-Type: text/html&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;utf-8
Date: Thu, 16 Apr 2015 13:06:58 GMT
Server: WSGIServer/0.1 Python/2.7.6
Set-Cookie:  &lt;span class=&quot;nv&quot;&gt;csrftoken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3bUoLB28WyzcH7qG5GXreWPm0Pj11861&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;expires&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Thu, 14-Apr-2016 13:06:58 GMT&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; Max-Age&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;31449600&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/
Vary: Cookie
X-Frame-Options: SAMEORIGIN

    &amp;lt;html&amp;gt;
        &amp;lt;body&amp;gt;
            Hello, alex
            &amp;lt;div&amp;gt;
                &amp;lt;form &lt;span class=&quot;nv&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/login/&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;POST&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                    &amp;lt;input &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;username&quot;&lt;/span&gt; /&amp;gt;
                    &amp;lt;input &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;password&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;password&quot;&lt;/span&gt; /&amp;gt;
                    &amp;lt;input &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;text&quot;&lt;/span&gt; hidden &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;next&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/&quot;&lt;/span&gt; /&amp;gt;
                    &amp;lt;input &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;hidden&apos;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;csrfmiddlewaretoken&apos;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;3bUoLB28WyzcH7qG5GXreWPm0Pj11861&apos;&lt;/span&gt; /&amp;gt;
                    &amp;lt;input &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;submit&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Login&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Login&quot;&lt;/span&gt; /&amp;gt;
                &amp;lt;/form&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Вывелось &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hello, alex&lt;/code&gt;, значит мы зашли под пользователем alex.&lt;/p&gt;

&lt;h3 id=&quot;сетевые-пакеты-нашей-локальной-машины-во-внешний-мир&quot;&gt;Сетевые пакеты нашей локальной машины во внешний мир&lt;a name=&quot;local_out&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Послушаем внешние сетевые запросы нашего компьютера.&lt;/p&gt;

&lt;p&gt;В wireshark выбираем Capture -&amp;gt; Intefaces, ставим галочку напротив en0 и нажимаем Start:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://img-fotki.yandex.ru/get/3000/85893628.c68/0_17f35a_55441968_orig.png&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/3000/85893628.c68/0_17f35a_55441968_XL.png&quot; alt=&quot;my wifi interface&quot; title=&quot;my wifi interface&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Зайду в админку этого сайта (lexev.org). В wireshark поставлю Display фильтр&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http.request.full_uri contains lexev.org
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;чтобы видеть только запросы на домен lexev.org. Вот что получилось:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://img-fotki.yandex.ru/get/6841/85893628.c68/0_17f35b_e70a8cfa_orig.png&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/6841/85893628.c68/0_17f35b_e70a8cfa_XL.png&quot; alt=&quot;my wifi lexev&quot; title=&quot;my wifi lexev&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Видно id сессии, можно делать с ней все что захочешь.&lt;/p&gt;

&lt;h3 id=&quot;сетевые-пакеты-других-пользователей-открытой-wifi-сети&quot;&gt;Сетевые пакеты других пользователей открытой wifi сети&lt;a name=&quot;wifi_open_other&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;До сих пор мы слушали только свои запросы и ответы. Но гораздо интересней послушать других пользователей.&lt;/p&gt;

&lt;p&gt;Зайдем в кафе с открытой wifi сетью, запустим wireshark.
Заходим в Capture -&amp;gt; Intefaces, выбираем соответствующий интерфейс и нажимаем Options (не Start).
Видим что-то такое:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://img-fotki.yandex.ru/get/6830/85893628.c68/0_17f355_9d02aa03_orig.png&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/6830/85893628.c68/0_17f355_9d02aa03_XL.png&quot; alt=&quot;public wifi options&quot; title=&quot;public wifi options&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Дважды щелкаем на интерфейс и ставим галочку напротив &lt;em&gt;Capture packets in monitor mode&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://img-fotki.yandex.ru/get/3107/85893628.c68/0_17f356_946d17dd_orig.png&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/3107/85893628.c68/0_17f356_946d17dd_XL.png&quot; alt=&quot;public wifi monitor model&quot; title=&quot;public wifi monitor model&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ok, Start. Все, теперь мы слушаем всю сеть (кроме нас самих).&lt;/p&gt;

&lt;p&gt;В публичной wifi сети будет летать очень много пакетов, за час легко можно наловить больше Гб информации. Соответственно неудобно ее анализировать и сохранять. Тут пригодятся Capture фильтры, они применяются к еще не обработанным фреймам. Отсеченные фреймы этим фильтром не сохраняются. Отличие от Display фильтров в том, что мы работаем с нераскодированными данными, мы не знаем, что это - http или что-то другое. Поэтому Capture фильтры сложней составить.
Итак, давайте попробуем сохранять только HTTP запросы GET или POST на 80 порту.&lt;/p&gt;

&lt;p&gt;Для этого зададим такой хитрый фильтр:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;port 80 and tcp[&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;tcp[12:1] &amp;amp; 0xf0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; 2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:4] &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0x47455420&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; or &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;tcp dst port 80 and &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;tcp[&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;tcp[12:1] &amp;amp; 0xf0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; 2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:4] &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0x504f5354&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;на этапе выбора интерфейса (кнопка Options):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://img-fotki.yandex.ru/get/15496/85893628.c68/0_17f357_7d774c65_orig.png&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/15496/85893628.c68/0_17f357_7d774c65_XL.png&quot; alt=&quot;public wifi capture filter&quot; title=&quot;public wifi capture filter&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Попробуем подключиться с другого девайса (телефона) к этой wifi сети и опять отправим GET запрос на lexev.org.
Для удобства добавим тот же Display фильтр домена (Capture и Display фильтры можно комбинировать).
Видим id сессии:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://img-fotki.yandex.ru/get/3613/85893628.c68/0_17f358_8b8382aa_orig.png&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/3613/85893628.c68/0_17f358_8b8382aa_XL.png&quot; alt=&quot;public wifi admin session&quot; title=&quot;public wifi admin session&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ради интереса попробуем войти, введя логин и пароль. Смотрите все:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://img-fotki.yandex.ru/get/15586/85893628.c68/0_17f359_d776258e_orig.png&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/15586/85893628.c68/0_17f359_d776258e_XL.png&quot; alt=&quot;public wifi admin login and password&quot; title=&quot;public wifi admin login and password&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Все как на ладони.&lt;/p&gt;

&lt;h3 id=&quot;сетевые-пакеты-других-пользователей-в-закрытой-wifi-сети&quot;&gt;Сетевые пакеты других пользователей в закрытой wifi сети&lt;a name=&quot;wifi_closed_other&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Допустим есть wifi сеть с WPA шифрованием.
В интерфейсах выберем wifi, включим для него monitor mode (все как для открытой сети, только без Capture фильтра) и попробуем послушать сетевые пакеты.
В результатах будет что-то такое:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://img-fotki.yandex.ru/get/5113/85893628.c68/0_17f351_caf24487_orig.png&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/5113/85893628.c68/0_17f351_caf24487_XL.png&quot; alt=&quot;private undercrypted&quot; title=&quot;private undercrypted&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Мы видим зашифрованные данные. Но, если мы знаем пароль от wifi, то можем расшифровать пакеты.
Для этого заходим в Edit -&amp;gt; Preferences. Выбираем Protocol -&amp;gt; IEEE 802.11.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://img-fotki.yandex.ru/get/5801/85893628.c68/0_17f352_eb1faebf_orig.png&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/5801/85893628.c68/0_17f352_eb1faebf_XL.png&quot; alt=&quot;private IEEE&quot; title=&quot;private IEEE&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Нажимаем Edit напротив Decryption Keys. Далее New. В новом окошке вводим:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Key &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;: wpa-pwd
Key: password:wifiname
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Соответственно заменяем password на пароль от wifi сети, а wifiname - на название сети.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://img-fotki.yandex.ru/get/4913/85893628.c68/0_17f353_f8d36ba3_orig.png&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/4913/85893628.c68/0_17f353_f8d36ba3_XL.png&quot; alt=&quot;private wifi password&quot; title=&quot;private add password&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Apply, ok.&lt;/p&gt;

&lt;p&gt;Все, теперь wireshark расшифровывает пакеты, и мы можем смотреть http данные как и раньше:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://img-fotki.yandex.ru/get/52/85893628.c68/0_17f354_19d29c5e_orig.png&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/52/85893628.c68/0_17f354_19d29c5e_orig.png&quot; alt=&quot;private wifi decrypted&quot; title=&quot;private add decrypted&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;послушаем-открытую-wifi-сеть&quot;&gt;Послушаем открытую wifi сеть&lt;/h3&gt;

&lt;p&gt;Ради интереса зашел в макдональдс и примерно на час запустил wireshark (ловил только GET и POST http запросы).
Далее сохранил все пакеты в файл pcap (File -&amp;gt; Save as).
Теперь вопрос, как проанализировать сохраненные фреймы? Их накопилось довольно много, вручную лазить по ним не удобно.
Воспользуемся программой &lt;a href=&quot;https://www.wireshark.org/docs/man-pages/tshark.html&quot;&gt;tshark&lt;/a&gt;, с помощью нее можно выбрать нужные данные и записать их в CSV.&lt;/p&gt;

&lt;p&gt;Вот так можно сохранить поля “номер фрейма”, “HTTP метод”, “full_uri”&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tshark &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; macdak_pushkin_get_post_only.pcap &lt;span class=&quot;nt&quot;&gt;-T&lt;/span&gt; fields &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; frame.number &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; http.request.method &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; http.request.full_uri &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; results.csv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Написав небольшой python скриптик, подсчитал количество запросов на каждый url и сгруппировал по доменам второго уровня.
Вот 20 самых популярных доменов, на которые заходили:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Домен&lt;/th&gt;
      &lt;th&gt;Количество запросов&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;vk.com&lt;/td&gt;
      &lt;td&gt;6280&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;beeline.ru&lt;/td&gt;
      &lt;td&gt;5407&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;vk.me&lt;/td&gt;
      &lt;td&gt;2817&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;instagram.com&lt;/td&gt;
      &lt;td&gt;867&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;google.com&lt;/td&gt;
      &lt;td&gt;544&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;apple.com&lt;/td&gt;
      &lt;td&gt;536&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;yandex.ru&lt;/td&gt;
      &lt;td&gt;473&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;symcb.com&lt;/td&gt;
      &lt;td&gt;471&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;msftncsi.com&lt;/td&gt;
      &lt;td&gt;441&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;msn.com&lt;/td&gt;
      &lt;td&gt;304&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;yandex.net&lt;/td&gt;
      &lt;td&gt;302&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;trendmicro.com&lt;/td&gt;
      &lt;td&gt;292&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;co.uk&lt;/td&gt;
      &lt;td&gt;270&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;badoocdn.com&lt;/td&gt;
      &lt;td&gt;258&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;yadro.ru&lt;/td&gt;
      &lt;td&gt;188&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;marketgid.com&lt;/td&gt;
      &lt;td&gt;184&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;adfox.ru&lt;/td&gt;
      &lt;td&gt;183&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;mycdn.me&lt;/td&gt;
      &lt;td&gt;165&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;interfax.ru&lt;/td&gt;
      &lt;td&gt;154&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;scorecardresearch.com&lt;/td&gt;
      &lt;td&gt;137&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Да, пару интересных сессий удалось перехватить. Например, для сайта знакомств mamba.ru, они передаются в открытую по HTTP.
Скопировал куки, вставил их в chrome с помощью плагина &lt;a href=&quot;https://chrome.google.com/webstore/detail/editthiscookie/fngmhnnpilhplaeedifhccceomclgfbg&quot;&gt;EditThisCookie&lt;/a&gt;, зашел на сайт и вуаля, я - Сергей. Могу читать сообщения, смотреть настройки и прочее. Сразу скажу, что ничего я там не делал, посмотрел и вышел :).&lt;/p&gt;

&lt;h3 id=&quot;способы-защиты&quot;&gt;Способы защиты&lt;/h3&gt;

&lt;p&gt;Пожалуй единственным способом защиты является использование TLS (https). Здесь тоже есть нюанcы, его нужно использовать правильно. Описание правильной (и безопасной) работы с https заслуживает отдельного поста, так что тут не буду на этом останавливаться.&lt;/p&gt;

&lt;p&gt;Вот как выглядит https трафик в wireshark:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://img-fotki.yandex.ru/get/15564/85893628.c68/0_17f348_d9eec045_orig.png&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/15564/85893628.c68/0_17f348_d9eec045_orig.png&quot; alt=&quot;private wifi decrypted&quot; title=&quot;private add decrypted&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Все данные зашифрованы, ничего не узнать.&lt;/p&gt;

&lt;h3 id=&quot;итог&quot;&gt;Итог&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;По возможности используйте https, особенно если вы получаете какие-либо важные данные от пользователя (если что-то связано с банковскими данными/карточками, так вообще обязательно).&lt;/li&gt;
  &lt;li&gt;Будучи в открытой wifi сети, заходя на сайт по незащищенному каналу (http) всегда помните, что вас можно легко прослушать. Это же относится и к закрытой wifi, злоумышленнику достаточно лишь узнать пароль от wifi.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;полезные-ссылки&quot;&gt;Полезные ссылки&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=T-5p5ewqhVw&quot;&gt;Dan Callahan: Quick Wins for Better Website Security - PyCon 2014&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=SBQB_yS2K4M&quot;&gt;Hynek Schlawack: The Sorry State of SSL - PyCon 2014&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=4o-xqqidvKA&quot;&gt;Benjamin Peterson - A Dive into TLS - PyCon 2015&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=HqnUKTjxI1E&quot;&gt;Ashwini Oruganti, Christopher Armstrong - Introduction to HTTPS: A Comedy of Errors - PyCon 2015&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=f9XVNIeRxUo&quot;&gt;Getting comfortable with web security: A hands-on session - PyCon 2015&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="fun" /><category term="security" /><summary type="html">Всегда знал, что можно посмотреть сетевые пакеты, которые передаются по wifi сети. Но на практике этого не делал (на работе анализировал сетевые пакеты, но то был не HTTP протокол). Решил восполнить этот пробел, ведь это интересно и полезно. Более стройно выстраивается понимание протоколов TCP-IP и HTTP. Видно, как летят наши пароли и сессии, после такого опыта поневоле начинаешь относиться к безопасности сайта с большим трепетом.</summary></entry><entry><title type="html">Отладка SQL в django тестах</title><link href="https://st4lk.github.io/blog/2015/03/04/debug-sql-django-test.html" rel="alternate" type="text/html" title="Отладка SQL в django тестах" /><published>2015-03-04T18:19:43+00:00</published><updated>2015-03-04T18:19:43+00:00</updated><id>https://st4lk.github.io/blog/2015/03/04/debug-sql-django-test</id><content type="html" xml:base="https://st4lk.github.io/blog/2015/03/04/debug-sql-django-test.html">&lt;p&gt;&lt;a href=&quot;/blog/2015/03/04/debug-sql-django-test.html&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/4517/85893628.c67/0_1795f5_a958c090_orig.png&quot; alt=&quot;Отладка SQL в django тестах&quot; title=&quot;Отладка SQL в django тестах&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;В django тестах можно замерять количество сделанных SQL запросов:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_home&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertNumQueries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;/&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Если код в контексте &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assertNumQueries&lt;/code&gt; сделает иное количество обращений к БД, чем ожидается (здесь 1), то тест выдает ошибку. Но когда такой тест не проходит, бывает трудно определить лишний отправленный запрос. Для отладки такого случая удобно вывести в консоль отправленные SQL запросы. Далее опишу, как этого добиться.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Кстати, если вы используете Django 1.7+, то вместе с ошибкой будут показаны все SQL выражения, т.е. если этого достаточно - то делать вообще ничего не надо. Ура! Если же вы используете более старые версии, то данная статья будет полезна.&lt;/p&gt;

&lt;h3 id=&quot;настройка-логов-для-вывода-sql-запросов-в-консоль&quot;&gt;Настройка логов для вывода SQL запросов в консоль&lt;/h3&gt;

&lt;p&gt;Django будет логировать SQL запрос, если соблюдается одного из следующих условий:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DEBUG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;или&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;use_debug_cursor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;По умолчанию в тестах всегда &lt;em&gt;DEBUG = False&lt;/em&gt; вне зависимости от того, что стоит в вашем &lt;em&gt;settings.DEBUG&lt;/em&gt;. Это правильно, тестировать лучше с боевыми настройками.&lt;/p&gt;

&lt;p&gt;Т.о. остается &lt;em&gt;connection.use_debug_cursor&lt;/em&gt;, которое по умолчанию всегда &lt;em&gt;None&lt;/em&gt; или &lt;em&gt;False&lt;/em&gt; (в разных версиях по разному). Но контекстный менеджер &lt;em&gt;assertNumQueries&lt;/em&gt; сам выставляет это значение в &lt;em&gt;True&lt;/em&gt; на время работы соответствующего блока! Нам остается лишь правильно задать настройки логов.&lt;/p&gt;

&lt;p&gt;Создадим отдельный файл настроек для тестов и назовем его settings_test.py. Тесты гонять будем с ним. Рекомендую всегда делать так - это удобно. Структура проекта примерно такая:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;project
├── project
│   ├── __init__.py
│   ├── settings.py
│   ├── settings_test.py
│   ├── urls.py
│   └── wsgi.py
│
├── spam  &lt;span class=&quot;c&quot;&gt;# some app&lt;/span&gt;
│   ├── __init__.py
│   ├── views.py
│   ├── tests.py
│   └── models.py
│
└── manage.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Файл tests.py содержит тесты приложения spam. Так организовывать тесты не самый хороший выбор, лучше выделить отдельную папку и держать все тесты там. Но для простоты нашего примера годится.&lt;/p&gt;

&lt;p&gt;Содержимое settings_test.py:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;settings&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;settings&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOGGING&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ImportError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LOGGING&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;disable_existing_loggers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;handlers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loggers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# use database in memory to not lose your data!
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DATABASES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&apos;default&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&apos;ENGINE&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;django.db.backends.sqlite3&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&apos;NAME&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;:memory:&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&apos;USER&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&apos;PASSWORD&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&apos;TEST_CHARSET&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;utf8&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;LOGGING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;handlers&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;console&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&apos;level&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;DEBUG&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&apos;class&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;logging.StreamHandler&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;LOGGING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;loggers&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;django.db.backends&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&apos;handlers&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;console&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&apos;level&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;DEBUG&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&apos;propagate&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;LOGGING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;loggers&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;django.db.backends.schema&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&apos;propagate&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# don&apos;t log schema queries, django &amp;gt;= 1.7
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Тест (tests.py) выглядит так:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.test&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestCase&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;spam.models&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpamTestCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_home&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertNumQueries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;/&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Давайте посмотрим, что будет при прогоне теста используя разные runner’ы.&lt;/p&gt;

&lt;h4 id=&quot;django-14&quot;&gt;Django 1.4+&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ python manage.py test&lt;/code&gt; (нет SQL):&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Creating &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;database &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;default&apos;&lt;/span&gt;...
&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;----------------------------------------------------------------------&lt;/span&gt;
Ran 1 &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;0.009s

OK
Destroying &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;database &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;default&apos;&lt;/span&gt;...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ python manage.py test  --settings=project.settings_test&lt;/code&gt; (SQL в консоле)&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Creating &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;database &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;default&apos;&lt;/span&gt;...
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; SELECT &lt;span class=&quot;s2&quot;&gt;&quot;spam_foo&quot;&lt;/span&gt;.&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;spam_foo&quot;&lt;/span&gt;.&lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt; FROM &lt;span class=&quot;s2&quot;&gt;&quot;spam_foo&quot;&lt;/span&gt; LIMIT 21&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=()&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;----------------------------------------------------------------------&lt;/span&gt;
Ran 1 &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;0.009s

OK
Destroying &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;database &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;default&apos;&lt;/span&gt;...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;django-14-и-django-nose&quot;&gt;Django 1.4+ и django-nose&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;pip install django-nose&lt;/li&gt;
  &lt;li&gt;в settings.py выставляем &lt;em&gt;TEST_RUNNER = ‘django_nose.NoseTestSuiteRunner’&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ python manage.py test&lt;/code&gt; (нет SQL):&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ python manage.py test  --settings=project.settings_test&lt;/code&gt; (SQL в консоле)&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; SELECT &lt;span class=&quot;s2&quot;&gt;&quot;spam_foo&quot;&lt;/span&gt;.&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;spam_foo&quot;&lt;/span&gt;.&lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt; FROM &lt;span class=&quot;s2&quot;&gt;&quot;spam_foo&quot;&lt;/span&gt; LIMIT 21&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=()&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;django-14-и-pytest-django&quot;&gt;Django 1.4+ и pytest-django&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;pip install pytest-django&lt;/li&gt;
  &lt;li&gt;создаем файл pytest.ini рядом с manage.py и задаем файл настроек:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;pytest]
    DJANGO_SETTINGS_MODULE &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; project.settings
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;переименуем tests.py в test_spam.py (стандартные имена для py.test)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ py.test&lt;/code&gt; (нет SQL):&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ py.test  --ds=project.settings_test&lt;/code&gt; (нет SQL, py.test перехватывает весь вывод)&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ py.test  --ds=project.settings_test -s&lt;/code&gt; (SQL в консоле)&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;spam_foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;spam_foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;title&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;spam_foo&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;итого&quot;&gt;Итого&lt;/h4&gt;

&lt;p&gt;Как видно из предыдущих примеров, при использовании нашего settings_test в консоль выводятся все запросы к БД, сделанные в блоке контекстного менеджера &lt;em&gt;assertNumQueries&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Если мы хотим гонять тесты всегда с этими настройками, а не только когда хотим что-то отладить, то очень скоро устанем от обилия SQL. Можно сделать так: закомментировать строчку &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos;handlers&apos;: [&apos;console&apos;],&lt;/code&gt;, т.о. ничего выводится не будет. А когда нужно их посмотреть - просто убираем комментарий.&lt;/p&gt;

&lt;h3 id=&quot;вывод-ошибки-assertnumqueries-и-django-17&quot;&gt;Вывод ошибки assertNumQueries и Django 1.7+&lt;/h3&gt;

&lt;p&gt;Если &lt;em&gt;assertNumQueries&lt;/em&gt; регистрирует отличное от ожидаемого количество обращений к БД, то выводится traceback и ошибка:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Traceback&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;most&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;AssertionError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queries&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;executed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Но в django 1.7+ так же выводятся и сделанные запросы:&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Captured&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queries&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;were&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;QUERY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;SELECT &quot;spam_foo&quot;.&quot;id&quot;, &quot;spam_foo&quot;.&quot;title&quot; FROM &quot;spam_foo&quot; LIMIT 21&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PARAMS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Как вы понимаете, настройки логов на это не влияют, очень удобно!&lt;/p&gt;

&lt;h3 id=&quot;вывод-всех-sql-запросов-в-консоль-не-используя-assertnumqueries&quot;&gt;Вывод всех SQL запросов в консоль не используя assertNumQueries&lt;/h3&gt;

&lt;p&gt;До сих пор речь шла об использовании &lt;em&gt;assertNumQueries&lt;/em&gt;. Но что если нужно посмотреть запросы вне этого менеджера?&lt;/p&gt;

&lt;p&gt;Для этого нужно самому выставить &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;connection.use_debug_cursor = True&lt;/code&gt; перед прогоном тестов. Это можно сделать в test runner’е или используя специальный hook в py.test.&lt;/p&gt;

&lt;h4 id=&quot;sql-во-всех-тестах-django-14&quot;&gt;SQL во всех тестах: Django 1.4+&lt;/h4&gt;

&lt;p&gt;Создаем файл test_runner.py, кладем его рядом с settings.py и вставляем такой код:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.test.runner&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DiscoverRunner&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DjangoTestSuiteRunner&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ImportError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# django &amp;lt; 1.6
&lt;/span&gt;    &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.test.simple&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DjangoTestSuiteRunner&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.db&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEFAULT_DB_ALIAS&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SqlDebugTestSuiteRunner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DjangoTestSuiteRunner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup_test_environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SqlDebugTestSuiteRunner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setup_test_environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;connections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DEFAULT_DB_ALIAS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;use_debug_cursor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Теперь либо в settings (или settings_test, если используем его для тестов) указываем наш runner:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;TEST_RUNNER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;project.test_runner.SqlDebugTestSuiteRunner&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Запускаем &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python manage.py test --settings=project.settings_test&lt;/code&gt; и видим все запросы, созданные за время тестов.&lt;/p&gt;

&lt;p&gt;Либо можно не задавать &lt;em&gt;TEST_RUNNER&lt;/em&gt;, а использовать аргумент &lt;em&gt;–testrunner&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python manage.py test --settings=project.settings_test --testrunner=project.test_runner.SqlDebugTestSuiteRunner&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Результат будет тем же.&lt;/p&gt;

&lt;h4 id=&quot;sql-во-всех-тестах-django-14-и-django-nose&quot;&gt;SQL во всех тестах: Django 1.4+ и django-nose&lt;/h4&gt;

&lt;p&gt;Для nose почти все так же, только runner нужно унаследовать от NoseTestSuiteRunner.&lt;/p&gt;

&lt;p&gt;test_runner.py:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django_nose&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NoseTestSuiteRunner&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.db&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEFAULT_DB_ALIAS&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SqlDebugTestSuiteRunner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NoseTestSuiteRunner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup_test_environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SqlDebugTestSuiteRunner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setup_test_environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;connections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DEFAULT_DB_ALIAS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;use_debug_cursor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Да, на момент написания статьи версия django-nose==1.3. В этой версии не поддерживается аргумент &lt;em&gt;–testrunner&lt;/em&gt;. Но я отправил &lt;a href=&quot;https://github.com/django-nose/django-nose/pull/187&quot;&gt;пул реквест&lt;/a&gt;, возможно, он уже попал в релиз.&lt;/p&gt;

&lt;h4 id=&quot;sql-во-всех-тестах-django-14-и-pytest-django&quot;&gt;SQL во всех тестах: Django 1.4+ и pytest-django&lt;/h4&gt;

&lt;p&gt;В py.test все немного по другому, ведь там не используется стандартный runner из django. Вместо этого для установления тестового окружения можно использовать py.test хуки.&lt;/p&gt;

&lt;p&gt;Создаем файл plugin_debug_sql.py, кладем рядом с settings.py, вставляем код:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pytest_runtest_setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.db&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEFAULT_DB_ALIAS&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;connections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DEFAULT_DB_ALIAS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;use_debug_cursor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Запускать так:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PYTHONPATH=`pwd`:$PYTHONPATH py.test -s --ds=sql.settings_test -p project.plugin_debug_sql&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Тут я явно добавляю текущую папку в PYTHONPATH, потому что иначе py.test не сможет найти наш плагин.&lt;/p&gt;</content><author><name></name></author><category term="database" /><category term="django" /><category term="logging" /><category term="sql" /><summary type="html">В django тестах можно замерять количество сделанных SQL запросов: def test_home(self): with self.assertNumQueries(1): response = self.client.get(&apos;/&apos;) self.assertEqual(response.status_code, 200) Если код в контексте assertNumQueries сделает иное количество обращений к БД, чем ожидается (здесь 1), то тест выдает ошибку. Но когда такой тест не проходит, бывает трудно определить лишний отправленный запрос. Для отладки такого случая удобно вывести в консоль отправленные SQL запросы. Далее опишу, как этого добиться.</summary></entry></feed>