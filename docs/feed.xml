<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ru"><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="https://st4lk.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://st4lk.github.io/" rel="alternate" type="text/html" hreflang="ru" /><updated>2022-11-20T21:17:50+00:00</updated><id>https://st4lk.github.io/feed.xml</id><title type="html">Developer articles</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Скрипт для скачивания музыки вконтакте</title><link href="https://st4lk.github.io/api/free/python/2013/02/04/script-downloading-music-vkcom-vkontakteru.html" rel="alternate" type="text/html" title="Скрипт для скачивания музыки вконтакте" /><published>2013-02-04T18:19:43+00:00</published><updated>2013-02-04T18:19:43+00:00</updated><id>https://st4lk.github.io/api/free/python/2013/02/04/script-downloading-music-vkcom-vkontakteru</id><content type="html" xml:base="https://st4lk.github.io/api/free/python/2013/02/04/script-downloading-music-vkcom-vkontakteru.html">&lt;p&gt;&lt;a href=&quot;/api/free/python/2013/02/04/script-downloading-music-vkcom-vkontakteru.html&quot;&gt;&lt;img src=&quot;/assets/posts/2013-02-04-script-downloading-music-vkcom-vkontakteru/vk_audio.jpeg&quot; alt=&quot;Скрипт для скачивания музыки вконтакте&quot; title=&quot;Скрипт для скачивания музыки вконтакте&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Беглый поиск соответствующего скрипта на python’е не дал результов. В &lt;a href=&quot;http://habrahabr.ru/post/143860/&quot;&gt;статье&lt;/a&gt; на хабре ссылка не работает. Решил написать свой велосипед, он доступен &lt;a href=&quot;https://gist.github.com/4708673&quot;&gt;здесь&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Запуск (нужен установленный &lt;a href=&quot;http://www.python.org/download/releases/2.7.4/&quot;&gt;python интерпретатор&lt;/a&gt;):&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python vkcom_audio_download.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Проверял на python 2.6 и 2.7. Никаких дополнительных библиотек не требуется.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;принцип-работы&quot;&gt;Принцип работы&lt;/h3&gt;

&lt;p&gt;Скрипт проверяет сохраненный access_token. Если его нет или срок истек, то открывается страница в браузере с запросом на доступ к данным аккаунта (аудио записям). После подтверждения идет редирект на h&lt;a href=&quot;https://oauth.vk.com/blank.htm#&quot;&gt;ttps://oauth.vk.com/blank.htm#&lt;/a&gt;… . Нужно скопировать весь url, на который вас редиректнуло и вставить его в консоль скрипта. Далее будут скачиваться все ваши аудиозаписи. Если аудиозапись уже есть на диске - то скачивания не происходит.&lt;/p&gt;

&lt;p&gt;Будут запрошены ваши данные приложением с app_id = 3358129. Можно создать свое Standalone-приложение с доступом к аудио здесь: &lt;a href=&quot;http://vk.com/editapp?act=create&quot;&gt;http://vk.com/editapp?act=create&lt;/a&gt;. И заменить APP_ID на ваше.&lt;/p&gt;

&lt;p&gt;Ссылка на скрипт: &lt;a href=&quot;https://gist.github.com/4708673&quot;&gt;https://gist.github.com/4708673&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Код скрипта:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/st4lk/4708673.js&quot;&gt;&lt;/script&gt;</content><author><name></name></author><category term="api" /><category term="free" /><category term="python" /><summary type="html">Беглый поиск соответствующего скрипта на python’е не дал результов. В статье на хабре ссылка не работает. Решил написать свой велосипед, он доступен здесь. Запуск (нужен установленный python интерпретатор): python vkcom_audio_download.py Проверял на python 2.6 и 2.7. Никаких дополнительных библиотек не требуется.</summary></entry><entry><title type="html">Sublime text и github gists</title><link href="https://st4lk.github.io/django/python/2013/01/03/sublime-text-and-github-gists.html" rel="alternate" type="text/html" title="Sublime text и github gists" /><published>2013-01-03T18:19:43+00:00</published><updated>2013-01-03T18:19:43+00:00</updated><id>https://st4lk.github.io/django/python/2013/01/03/sublime-text-and-github-gists</id><content type="html" xml:base="https://st4lk.github.io/django/python/2013/01/03/sublime-text-and-github-gists.html">&lt;p&gt;&lt;a href=&quot;/django/python/2013/01/03/sublime-text-and-github-gists.html&quot;&gt;&lt;img src=&quot;/assets/posts/2013-01-03-sublime-text-and-github-gists/logo_full.jpeg&quot; alt=&quot;Sublime text и github gists&quot; title=&quot;Sublime text и github gists&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;В &lt;a href=&quot;http://www.sublimetext.com/&quot;&gt;Sublime text&lt;/a&gt; есть огромное количество полезных инструментов, помогающих быстро писать код. Пока я изучил лишь небольшую их часть, в том числе пытаюсь привыкнуть к Vintage mode (управление курсором в стиле vim). Но сейчас хочу рассказать о другом - об интеграции &lt;a href=&quot;https://gist.github.com/&quot;&gt;github gists&lt;/a&gt; с sublime text. Если вы не знаете, github gists позволяет сохранять скрипты, снипеты в виде отдельного файла, чтобы не создавать для этого целый репозиторий. При этом поддерживаются многие функции репозитория - версии, возможность форка.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;что-мы-получим-в-итоге&quot;&gt;Что мы получим в итоге&lt;/h3&gt;

&lt;p&gt;Сохраняем снипет прямо из sublime, даем ему описание в виде ключевых слов, затем опять-таки из sublime ищем наш снипет по ключевым словам и видим его в редакторе. Все снипеты сохраняются на github, т.е. они доступны и с другого компьютера.&lt;/p&gt;

&lt;p&gt;Не стоит забывать, что в самом sublime есть свой настраиваемый функционал снипетов. Однако он больше подходит для маленьких авто-заполнений, например при наборе def для питон кода вставлять шаблон для написания функции:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Снипеты в github gist подходят для чего-то большего - какая-либо готовая функция, которая делает конкретную задачу.&lt;/p&gt;

&lt;h3 id=&quot;настроим-этот-функционал-в-нашем-редакторе&quot;&gt;Настроим этот функционал в нашем редакторе&lt;/h3&gt;

&lt;h4 id=&quot;установим-плагин-для-работы-с-github-gist&quot;&gt;Установим плагин для работы с github gist&lt;/h4&gt;

&lt;p&gt;Проще всего это сделать с помощью пакетного менеджера sublime. &lt;a href=&quot;http://wbond.net/sublime_packages/package_control/installation&quot;&gt;Здесь&lt;/a&gt; есть инструкция для его установки. В sublime нажимаем &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ctrl + shift + p&lt;/code&gt;, вводим &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;install&lt;/code&gt;, и далее &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gist&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2013-01-03-sublime-text-and-github-gists/1_package_control_install.jpeg&quot; alt=&quot;Sublime install package&quot; title=&quot;Sublime install package&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2013-01-03-sublime-text-and-github-gists/2_package_control_gist.jpeg&quot; alt=&quot;Sublime install gist package&quot; title=&quot;Sublime install gist package&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;теперь-дадим-плагину-доступ-к-нашему-github-аккаунту&quot;&gt;Теперь дадим плагину доступ к нашему github аккаунту&lt;/h4&gt;

&lt;p&gt;Нажимаем Preferences-&amp;gt;Package settigns-&amp;gt;Gist-&amp;gt;Settings User.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2013-01-03-sublime-text-and-github-gists/3_gist_settings_menu.jpeg&quot; alt=&quot;Gist sublime Preferences&quot; title=&quot;Gist sublime Preferences&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Можно либо указать логин+пароль, либо токен. Если нужных настроек в Settings User нет, то их можно скопировать из Settings Default. Только default settings лучше не менять. Чтобы получить токен, нужно в командной строке выполнить такую команду (должен быть установлен &lt;a href=&quot;http://curl.haxx.se/&quot;&gt;curl&lt;/a&gt;):&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; USERNAME &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST https://api.github.com/authorizations &lt;span class=&quot;nt&quot;&gt;--data&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;{&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;scopes&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;gist&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;]}&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Где USERNAME - ваш логин на github&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2013-01-03-sublime-text-and-github-gists/4_gist_auth.jpeg&quot; alt=&quot;Gist sublime settings&quot; title=&quot;Gist sublime settings&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;создадим-gist&quot;&gt;Создадим gist&lt;/h4&gt;

&lt;p&gt;Пишем код нашего снипета в новой вкладке sublime. Я написал код для получения содержимого csv файла в виде списка списков. Нажимаем &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ctrl + shift + p&lt;/code&gt;, вводим &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gist create public&lt;/code&gt; и enter. Здесь работает fuzzy поиск, так что я набираю просто &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2013-01-03-sublime-text-and-github-gists/5_gist_create_public.jpeg&quot; alt=&quot;Gist sublime create&quot; title=&quot;Gist sublime create&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Даем нашему снипету описание. Важно включить значащие слова, т.к. по ним потом будет идти поиск. Я напишу так “Python: Get csv lines”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2013-01-03-sublime-text-and-github-gists/6_gist_set_description.jpeg&quot; alt=&quot;Gist sublime description&quot; title=&quot;Gist sublime description&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Будет еще запрос на название файла, можно просто нажать enter.&lt;/p&gt;

&lt;h4 id=&quot;найдем-только-что-созданный-снипет&quot;&gt;Найдем только что созданный снипет&lt;/h4&gt;

&lt;p&gt;Вызываем строку ввода команд &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ctrl + shift + p&lt;/code&gt; и пишем &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gist open&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2013-01-03-sublime-text-and-github-gists/7_gist_open.jpeg&quot; alt=&quot;Gist sublime open&quot; title=&quot;Gist sublime open&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Далее пишем ключевые слова “python csv”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2013-01-03-sublime-text-and-github-gists/8_gist_find_by_descr.jpeg&quot; alt=&quot;Gist sublime find&quot; title=&quot;Gist sublime find&quot; /&gt;&lt;/p&gt;

&lt;p&gt;И видим код снипета&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2013-01-03-sublime-text-and-github-gists/9_gist_opened.jpeg&quot; alt=&quot;Gist sublime opened&quot; title=&quot;Gist sublime opened&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Этот снипет так же создался на github: &lt;a href=&quot;https://gist.github.com/3931305&quot;&gt;https://gist.github.com/3931305&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;ссылки&quot;&gt;Ссылки&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Редактор кода &lt;a href=&quot;http://www.sublimetext.com/&quot;&gt;sublime text&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/condemil/Gist&quot;&gt;Репозиторий&lt;/a&gt; плагина Gist&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tutsplus.com/lesson/sexy-code-snippet-management-with-gists/&quot;&gt;Видео&lt;/a&gt; про sublime и github gist на &lt;a href=&quot;http://tutsplus.com/&quot;&gt;tutsplus.com&lt;/a&gt; (на английском)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tutsplus.com/course/improve-workflow-in-sublime-text-2/&quot;&gt;Видео курс&lt;/a&gt; по sublime text на &lt;a href=&quot;http://tutsplus.com/&quot;&gt;tutsplus.com&lt;/a&gt; (на английском)&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="django" /><category term="python" /><summary type="html">В Sublime text есть огромное количество полезных инструментов, помогающих быстро писать код. Пока я изучил лишь небольшую их часть, в том числе пытаюсь привыкнуть к Vintage mode (управление курсором в стиле vim). Но сейчас хочу рассказать о другом - об интеграции github gists с sublime text. Если вы не знаете, github gists позволяет сохранять скрипты, снипеты в виде отдельного файла, чтобы не создавать для этого целый репозиторий. При этом поддерживаются многие функции репозитория - версии, возможность форка.</summary></entry><entry><title type="html">MobileESP: Скрипт определения мобильного устройства посетителя</title><link href="https://st4lk.github.io/django/python/2012/11/29/mobileesp-easily-detect-mobile-web-site-visitors.html" rel="alternate" type="text/html" title="MobileESP: Скрипт определения мобильного устройства посетителя" /><published>2012-11-29T18:19:43+00:00</published><updated>2012-11-29T18:19:43+00:00</updated><id>https://st4lk.github.io/django/python/2012/11/29/mobileesp-easily-detect-mobile-web-site-visitors</id><content type="html" xml:base="https://st4lk.github.io/django/python/2012/11/29/mobileesp-easily-detect-mobile-web-site-visitors.html">&lt;p&gt;Скрипт полезен, если вы хотите показывать разные версии сайта для обычных компьютеров и мобильных устройств. Большое количество методов для определения вида девайса. Доступен на разных языках программирования, включая python. Собственно порт на python был написан мной по просьбе freelance заказчика.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Так его можно использовать в django проекте:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;mobileesp&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mdetect&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;user_agent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;META&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;HTTP_USER_AGENT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;http_accept&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;META&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;HTTP_ACCEPT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_agent&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http_accept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;agent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mdetect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UAgentInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userAgent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_agent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpAccept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http_accept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#Do first! For iPhone, Android, Windows Phone 7, etc.
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;agent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;detectTierIphone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;HttpResponseRedirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;/myapp/i/&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#Then catch all other mobile devices
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;agent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;detectMobileQuick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;HttpResponseRedirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;/myapp/m/&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#For traditional computers and tablets (iPad, Android, etc.)
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponseRedirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;/myapp/d/&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Сам скрипт на &lt;a href=&quot;http://code.google.com/p/mobileesp/source/browse/Python/mdetect.py&quot;&gt;code.google.com&lt;/a&gt;, ко всем методам есть комментарий-описание.&lt;/p&gt;

&lt;p&gt;Описание на &lt;a href=&quot;http://blog.mobileesp.com/?cat=10&quot;&gt;сайте проекта&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="django" /><category term="python" /><summary type="html">Скрипт полезен, если вы хотите показывать разные версии сайта для обычных компьютеров и мобильных устройств. Большое количество методов для определения вида девайса. Доступен на разных языках программирования, включая python. Собственно порт на python был написан мной по просьбе freelance заказчика.</summary></entry><entry><title type="html">Отладка django проекта с помощью встроенного python отладчика pdb</title><link href="https://st4lk.github.io/django/python/sublime/2012/11/18/debug-django-project-embedded-python-debugger-pdb.html" rel="alternate" type="text/html" title="Отладка django проекта с помощью встроенного python отладчика pdb" /><published>2012-11-18T18:19:43+00:00</published><updated>2012-11-18T18:19:43+00:00</updated><id>https://st4lk.github.io/django/python/sublime/2012/11/18/debug-django-project-embedded-python-debugger-pdb</id><content type="html" xml:base="https://st4lk.github.io/django/python/sublime/2012/11/18/debug-django-project-embedded-python-debugger-pdb.html">&lt;p&gt;Я использую &lt;a href=&quot;http://www.sublimetext.com/&quot;&gt;sublime-text&lt;/a&gt; в качестве редактора python кода. В нем нет встроенного отладчика, поэтому для отладки django проектов я в основном делал так:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var_name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;и в консоле локального сервера смотрел вывод команды. Я использую этот метод и сейчас, но иногда хочется пройтись по коду по шагам, посмотреть все переменные.&lt;/p&gt;

&lt;p&gt;Это можно сделать с помощью встроенного python отладчика pdb:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pdb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pdb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;!--more--&gt;

&lt;p&gt;Т.е. мы вставляем эту строку в то место в коде, где мы хотим остановиться. Это брейкпоинт. Теперь обновим страницу проекта в браузере. Когда код проекта дойдет до этой строки, браузер замрет, а в консоле локального сервера появиться:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pdb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Мы попали в отладчик и теперь можем вводить &lt;a href=&quot;http://docs.python.org/2/library/pdb.html#debugger-commands&quot;&gt;комманды&lt;/a&gt;, например такие:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;l - посмотреть, где мы находимся&lt;/li&gt;
  &lt;li&gt;n - (step next) сделать шаг вперед, не входя внутрь функции&lt;/li&gt;
  &lt;li&gt;s - (step in) сделать шаг внутрь, т.е. если стоим на вызове функции, войдем внутрь&lt;/li&gt;
  &lt;li&gt;r - (step out) продолжить выполнение до конца текущего блока. Например, мы стоим внутри цикла, вводим r и попадаем на первую после цикла строку.&lt;/li&gt;
  &lt;li&gt;c - продолжить выполнение до следующего брейкпоинта, т.е. до &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pdb.set_trace()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;p - выполнить питон код, или просто показать переменную: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p var_name&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;пример&quot;&gt;Пример&lt;/h2&gt;

&lt;p&gt;Допустим у нас есть такой view:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2012-11-18-debug-django-project-embedded-python-debugger-pdb/view.jpeg&quot; alt=&quot;view&quot; title=&quot;view&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Вставим &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import pdb; pdb.set_trace()&lt;/code&gt; в нужное место и запустим локальный сервер, если не запущен:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2012-11-18-debug-django-project-embedded-python-debugger-pdb/view_pdb.jpeg&quot; alt=&quot;view_pdb&quot; title=&quot;view_pdb&quot; /&gt;&lt;/p&gt;

&lt;p&gt;В браузере обратимся к странице, которая вызывает этот view. Страница замерла:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2012-11-18-debug-django-project-embedded-python-debugger-pdb/browser_hang.jpeg&quot; alt=&quot;browser_hang&quot; title=&quot;browser_hang&quot; /&gt;&lt;/p&gt;

&lt;p&gt;В консоле видим (Pdb):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2012-11-18-debug-django-project-embedded-python-debugger-pdb/pdb_console.jpeg&quot; alt=&quot;pdb_console&quot; title=&quot;pdb_console&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Посмотрим, где мы, командой &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;l&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2012-11-18-debug-django-project-embedded-python-debugger-pdb/pdb_l.jpeg&quot; alt=&quot;pdb_l&quot; title=&quot;pdb_l&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Сделаем два шага веред командой &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2012-11-18-debug-django-project-embedded-python-debugger-pdb/pdb_nn.jpeg&quot; alt=&quot;pdb_nn&quot; title=&quot;pdb_nn&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Посмотрим значение переменных &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;about&lt;/code&gt; и &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;about.content&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2012-11-18-debug-django-project-embedded-python-debugger-pdb/pdb_p.jpeg&quot; alt=&quot;pdb_p&quot; title=&quot;pdb_p&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Продолжим выполнение командой &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2012-11-18-debug-django-project-embedded-python-debugger-pdb/pdb_c.jpeg&quot; alt=&quot;pdb_c&quot; title=&quot;pdb_c&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Страница отобразилась в браузере:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2012-11-18-debug-django-project-embedded-python-debugger-pdb/browser_done.jpeg&quot; alt=&quot;browser_done&quot; title=&quot;browser_done&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="django" /><category term="python" /><category term="sublime" /><summary type="html">Я использую sublime-text в качестве редактора python кода. В нем нет встроенного отладчика, поэтому для отладки django проектов я в основном делал так: print var_name и в консоле локального сервера смотрел вывод команды. Я использую этот метод и сейчас, но иногда хочется пройтись по коду по шагам, посмотреть все переменные. Это можно сделать с помощью встроенного python отладчика pdb: import pdb; pdb.set_trace()</summary></entry><entry><title type="html">Облачный сервис Openshift</title><link href="https://st4lk.github.io/free/openshift/python/2012/10/08/cloud-service-openshift.html" rel="alternate" type="text/html" title="Облачный сервис Openshift" /><published>2012-10-08T18:19:43+00:00</published><updated>2012-10-08T18:19:43+00:00</updated><id>https://st4lk.github.io/free/openshift/python/2012/10/08/cloud-service-openshift</id><content type="html" xml:base="https://st4lk.github.io/free/openshift/python/2012/10/08/cloud-service-openshift.html">&lt;p&gt;&lt;a href=&quot;/free/openshift/python/2012/10/08/cloud-service-openshift.html&quot;&gt;&lt;img src=&quot;/assets/posts/2012-10-08-cloud-service-openshift/openshift-icon.png&quot; alt=&quot;Облачный сервис Openshift&quot; title=&quot;Облачный сервис Openshift&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Я знаю немного хостингов с бесплатным тарифом и с поддержкой python. Это &lt;a href=&quot;https://appengine.google.com/&quot;&gt;Google App Engine&lt;/a&gt; и &lt;a href=&quot;https://www.alwaysdata.com/&quot;&gt;Alwaysdata&lt;/a&gt;. И вот недавно узнал про замечательный проект &lt;a href=&quot;https://openshift.redhat.com/&quot;&gt;Openshift&lt;/a&gt; от RedHat, на котором и работает этот блог. Для начала небольшой обзор упомянутых хостингов.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;google-app-engine&quot;&gt;Google app engine&lt;/h3&gt;

&lt;p&gt;Основной недостаток google app engine - ограниченный набор библиотек, которые можно использовать. Конечно, чисто python библиотеки можно ставить, но те, которые требуют C компиляции - нет. К примеру, не получится использовать pycurl. Так же на GAE используются особые базы данные, так что и библиотеки для работы с ними - тоже особые. Отсюда запуск приложения на django не так прост, ведь djangо работает только с SQL базами данных. Плюс django можно использовать на текущий момент только версий 1.2, 1.3 (а уже есть 1.4). На всякий случай, полезные линки: &lt;a href=&quot;https://developers.google.com/appengine/docs/python/tools/libraries27&quot;&gt;список поддерживаемых библиотек&lt;/a&gt;, проект &lt;a href=&quot;http://django-rocket-engine.readthedocs.org/&quot;&gt;django-rocket-engine&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;alwaysdata&quot;&gt;Alwaysdata&lt;/h3&gt;

&lt;p&gt;На бесплатном тарифе от alwaysdata опять-таки нельзя устанавливать библиотеки, требующие C компиляцию. Но здесь имеются привычные базы данных - mysql, postgres, mongodb. Так что обычное django приложение можно запустить без проблем. Я часто использую этот хостинг для демонстрации несложных проектов.&lt;/p&gt;

&lt;p&gt;Теперь непосредственно про openshift.&lt;/p&gt;

&lt;h2 id=&quot;openshift&quot;&gt;Openshift&lt;/h2&gt;

&lt;p&gt;Openshift - это PaaS, т.е. платформа как сервис. Мы не получаем root доступ к операционной системе. Систему нам предоставляет сервис в работающем виде, мы же можем делать только некоторые дозволенные действия. Похоже на упомянутый app engine, но здесь гораздо больше свободы.&lt;/p&gt;

&lt;p&gt;В первую очередь мне понравилось, что там можно установить многое вручную. Какую хочешь версию python, django. Желаешь SQL/Postgres/mongodb в качестве базы данных - пожалуйста. Можно устанавливать библиотеки, компилировать их. Есть дополнительные плюшки: cron, статистика, phpmyadmin и прочее. Здесь я упомянул django, но можно сделать приложение и на другом фреймворке, просто это то, что я пробовал.&lt;/p&gt;

&lt;p&gt;Удобный способ загрузки приложения на сервер. Просто делаешь git push special_application_url из своего git-репозитория, и все! Файлы автоматически обновляются на сервере, сервер перезапускается. Процессом перезапуска можно управлять с помощью специальных скриптов. Например, можно указать в скрипте установить нужные библиотеки из requirements.txt, собрать статические файлы (manage.py collectstatic) и т.д. Этот скрипт будет выполняться каждый раз при обновлении сервера.&lt;/p&gt;

&lt;p&gt;В бесплатном режиме предоставляется 1 Gb дискового пространства и 3 малых ‘gear’. Насколько я понял, gear - это некое изолированное окружение со своим объемом RAM. Для малой gear размер RAM равен 512. Если приложению не хватает мощности одной gear, то подключается вторая, третья и т.д. Если проще, то вот нагрузка, которую должен выдержить типовой сайт на DLE на бесплатном тарифе (из описания на &lt;a href=&quot;https://openshift.redhat.com/community/developers/pricing&quot;&gt;openshift&lt;/a&gt;):&lt;/p&gt;

&lt;p&gt;&lt;em&gt;15 страниц в секунду, сотни страниц на сайте, 50к посетителей в месяц&lt;/em&gt;. Для простого сайта вполне достаточно.&lt;/p&gt;

&lt;p&gt;На один аккаунт можно создать 3 приложения (по крайне мере бесплатно). Конечно, есть вероятность, что эту халяву прикроют через какое-то время. Но существующий код всегда можно будет запустить на другом хостинге - здесь нет особенностей, как на google app engine. Ну или купить платный аккаунт на openshift.&lt;/p&gt;

&lt;p&gt;В принципе, на openshift подробно написано, что нужно сделать для создания и запуска приложения. Опишу свой опыт.&lt;/p&gt;

&lt;h4 id=&quot;шаги-для-запуска-приложения-на-python-273--django&quot;&gt;Шаги для запуска приложения на python 2.7.3 + django&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;регистрируемся&lt;/li&gt;
  &lt;li&gt;устанавливаем git (если еще нет)&lt;/li&gt;
  &lt;li&gt;устанавливаем особую программу “rhc” (можно обойтись и без нее, но с ней удобнее), описание в разделе &lt;a href=&quot;https://openshift.redhat.com/community/get-started&quot;&gt;get-started&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;следуем инструкциям &lt;a href=&quot;https://github.com/ehazlett/openshift-diy-py27-django&quot;&gt;https://github.com/ehazlett/openshift-diy-py27-django&lt;/a&gt; (простое приложение без базы данных)&lt;/li&gt;
  &lt;li&gt;либо следуем инструкциям &lt;a href=&quot;https://github.com/st4lk/lexev&quot;&gt;https://github.com/st4lk/lexev&lt;/a&gt; (приложение с mysql, собственно код этого блога)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Все! Приложение доступно по адресу &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://&amp;lt;app_name&amp;gt;-&amp;lt;namespace&amp;gt;.rhcloud.com/&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;привязка-к-домену&quot;&gt;Привязка к домену&lt;/h3&gt;

&lt;p&gt;Но нет, не совсем все. Хотелось бы иметь нормальный адрес … Допустим, у нас уже есть свой домен (например lexev.org). Давайте теперь привяжем наше приложение к этому домену.&lt;/p&gt;

&lt;p&gt;У openshift нет dns серверов, которые можно было бы прописать для домена. Вместо этого они предлагают сделать привязку к домену с помощью &lt;a href=&quot;http://en.wikipedia.org/wiki/CNAME_record&quot;&gt;CNAME&lt;/a&gt;. Это можно сделать в панели управления домена.&lt;/p&gt;

&lt;p&gt;Эх, все бы хорошо, но я покупал домен на nic.ru. Там, чтобы сделать CNAME привязку нужен дополнительный платный доступ… Но, как оказалось, есть выход! Воспользуемся бесплатным сервисом &lt;a href=&quot;http://freedns.afraid.org/&quot;&gt;freedns.afraid.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Итак,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;регистрируемся на freedns.afraid.org&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;указываем DNS сервера к нашему домену:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  ns1.afraid.org
  ns2.afraid.org
  ns3.afraid.org
  ns4.afraid.org
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;добавляем домен на afraid.org: &lt;a href=&quot;http://freedns.afraid.org/domain/add.php&quot;&gt;http://freedns.afraid.org/domain/add.php&lt;/a&gt;, в моем случае это lexev.org. Не забудем выбрать Shared State: Private, а то к нашему домену сможет привязаться любой пользователь afraid.org&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;для нашего вновь добавленного домена добавляем subdomen с типом CNAME, как на картинке (конечно заменяя lexev.org на нужный домен и указывая верный url приложения в поле destination):&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/posts/2012-10-08-cloud-service-openshift/afraid.com-1.png&quot; alt=&quot;afraid.org CNAME&quot; title=&quot;afraid.org CNAME&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;на странице subdomen’ов видим две записи: одну с CNAME и одну без (она скорее всего сверху)&lt;/li&gt;
  &lt;li&gt;нажимаем на ту, которая без CNAME&lt;/li&gt;
  &lt;li&gt;ничего не меняя, нажимаем на “Forward to a URL”&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;вводим как на картинке (опять-таки заменяя lexev.org на нужный домен):&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/posts/2012-10-08-cloud-service-openshift/afraid.com-2.png&quot; alt=&quot;afraid.org Forward to a URL&quot; title=&quot;afraid.org Forward to a URL&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;в итоге мы должны получить такие subdomen’ы:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/posts/2012-10-08-cloud-service-openshift/afraid.com-3.png&quot; alt=&quot;afraid.org subdomain&quot; title=&quot;afraid.org subdomain&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Вот теперь кажется все. Какое-то время понадобиться, чтобы новые dns серверы заработали для домена. По обращению lexev.org будет идти редирект на &lt;a href=&quot;http://www.lexev.org&quot;&gt;www.lexev.org&lt;/a&gt;. Ну а &lt;a href=&quot;http://www.lexev.org&quot;&gt;www.lexev.org&lt;/a&gt; указывает на приложение openshift.&lt;/p&gt;

&lt;p&gt;Напоследок скажу, что openshift так же поддерживает PHP, Ruby, Java, Node.js, Perl !&lt;/p&gt;</content><author><name></name></author><category term="free" /><category term="openshift" /><category term="python" /><summary type="html">Я знаю немного хостингов с бесплатным тарифом и с поддержкой python. Это Google App Engine и Alwaysdata. И вот недавно узнал про замечательный проект Openshift от RedHat, на котором и работает этот блог. Для начала небольшой обзор упомянутых хостингов.</summary></entry><entry><title type="html">Мессенджер афоризмов</title><link href="https://st4lk.github.io/api/java/2012/08/31/aphorism-messenger.html" rel="alternate" type="text/html" title="Мессенджер афоризмов" /><published>2012-08-31T18:19:43+00:00</published><updated>2012-08-31T18:19:43+00:00</updated><id>https://st4lk.github.io/api/java/2012/08/31/aphorism-messenger</id><content type="html" xml:base="https://st4lk.github.io/api/java/2012/08/31/aphorism-messenger.html">&lt;p&gt;&lt;a href=&quot;/api/java/2012/08/31/aphorism-messenger.html&quot;&gt;&lt;img src=&quot;/assets/posts/2012-08-31-aphorism-messenger/owl_48x48.png&quot; alt=&quot;Мессенджер афоризмов&quot; title=&quot;Мессенджер афоризмов&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;У меня есть интересный проект, которым хотел бы поделиться. Идея создать его возникла во время изучения Java. Прочел я несколько книжек, сделал маленькие программки-задания и захотелось сделать нечто большее.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;суть-проекта&quot;&gt;Суть проекта&lt;/h3&gt;

&lt;p&gt;Есть desktop-программа (клиент), которая сидит в трее, и периодически показывает афоризмы. Афоризмы она берет с web-сервиса (сервер), таким образом база цитат находится в одном месте. Т.е. база не привязана к клиенту, я могу обновить ее на сервере и все клиенты это заметят. У афоризмов есть рейтинг - количество лайков. При появлении высказывания пользователь видит рейтинг и может добавить/убрать лайк. Вместе с афоризмом отображается его автор, если нажать по автору появляется его краткая биография. Можно просматривать афоризмы, помеченные как любимые. Также можно смотреть список самых популярных афоризмов.&lt;/p&gt;

&lt;p&gt;Получилось так (&lt;a href=&quot;https://sourceforge.net/projects/bwtclient/&quot;&gt;скачать можно здесь&lt;/a&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2012-08-31-aphorism-messenger/just-aphorism.png&quot; alt=&quot;Пример афоризма&quot; title=&quot;Пример афоризма&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Весь проект (и клиент и сервер) написан на Java. Сервер расположен на &lt;strong&gt;google app engine&lt;/strong&gt;, ресурсы предоставляет в формате xml. Он представляет из себя REST веб-сервис, так что его можно использовать и отдельно (например на веб-сайте). Спецификация есть &lt;a href=&quot;https://bestwisethoughts.appspot.com/&quot;&gt;здесь&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Вот пример ресурса: &lt;a href=&quot;https://bestwisethoughts.appspot.com/1.0/thought/get/random&quot;&gt;показать случайный афоризм&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ссылки:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://freehabr.ru/blog/gotome/2104.html&quot;&gt;подробное описание проекта&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://sourceforge.net/projects/bwtclient/&quot;&gt;программа-клиент&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://bestwisethoughts.appspot.com/&quot;&gt;сервер&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://sourceforge.net/p/bwtclient/code/&quot;&gt;код клиента&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://sourceforge.net/p/bwtserver/code/&quot;&gt;код сервера&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=AIJywgQKatY&quot;&gt;видео обзор&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="api" /><category term="java" /><summary type="html">У меня есть интересный проект, которым хотел бы поделиться. Идея создать его возникла во время изучения Java. Прочел я несколько книжек, сделал маленькие программки-задания и захотелось сделать нечто большее.</summary></entry></feed>