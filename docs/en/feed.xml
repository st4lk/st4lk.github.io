<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="https://st4lk.github.io/en/feed.xml" rel="self" type="application/atom+xml" /><link href="https://st4lk.github.io/en/" rel="alternate" type="text/html" hreflang="en" /><updated>2022-11-23T16:24:49+00:00</updated><id>https://st4lk.github.io/en/feed.xml</id><title type="html">Developer articles</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Sublime Text and Language Server Protocol</title><link href="https://st4lk.github.io/en/blog/2019/02/19/sublime-text-and-language-server-protocol-lsp.html" rel="alternate" type="text/html" title="Sublime Text and Language Server Protocol" /><published>2019-02-19T18:19:43+00:00</published><updated>2019-02-19T18:19:43+00:00</updated><id>https://st4lk.github.io/en/blog/2019/02/19/sublime-text-and-language-server-protocol-lsp</id><content type="html" xml:base="https://st4lk.github.io/en/blog/2019/02/19/sublime-text-and-language-server-protocol-lsp.html">&lt;p&gt;&lt;a href=&quot;/en/blog/2019/02/19/sublime-text-and-language-server-protocol-lsp.html&quot;&gt;&lt;img src=&quot;https://i.ibb.co/4K4zp06/sublime-256-lsp-light.png&quot; alt=&quot;Sublime Text and Language Server Protocol (LSP)&quot; title=&quot;Sublime Text and Language Server Protocol (LSP)&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;language-server-protocol-lsp&quot;&gt;Language Server Protocol (LSP)&lt;/h2&gt;
&lt;p&gt;LSP - protocol for interactions between IDE and language server. The latter provides such means like autocompletion, goto implementation and etc. When IDE needs to show autocomplete choices on, for example, python language - it sends a request to the special server. And it responds with the necessary data. The cool part here is that it is an initiative of a big company - Microsoft.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;But what is the point, in almost all popular IDEs such features are already available out of the box?&lt;/p&gt;

&lt;p&gt;I think the main point is unification of implementation. We can have a single server with many IDEs. No need to develop standard means in each IDE separately. The only thing that must be done - is to implement protocol for communication with the language server.&lt;/p&gt;

&lt;p&gt;There is also an advantage from the perspective of IDE user. When some feature will be added to the language server, you’ll receive it for free and immediately. It doesn’t matter what exact IDE you are using, it is independent now. The main part that must be supported by your code editor - is language server protocol. We can assume that it will be stable in near future since it is supported by such giant as Microsoft.&lt;/p&gt;

&lt;p&gt;Some useful links:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Official website of LSP: &lt;a href=&quot;https://microsoft.github.io/language-server-protocol/&quot;&gt;https://microsoft.github.io/language-server-protocol/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The list of server implementations: &lt;a href=&quot;https://microsoft.github.io/language-server-protocol/implementors/servers/&quot;&gt;https://microsoft.github.io/language-server-protocol/implementors/servers/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Community-driven website: &lt;a href=&quot;https://langserver.org/&quot;&gt;https://langserver.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;python-server&quot;&gt;Python Server&lt;/h2&gt;
&lt;p&gt;Let’s try to connect IDE (Sublime Text will be used in this article) with python language server.&lt;/p&gt;

&lt;p&gt;The first thing that we’ll need - is the server itself, it will respond to LSP requests. At the time this post was written, the most active project implemented in python was: &lt;a href=&quot;https://github.com/palantir/python-language-server&quot;&gt;https://github.com/palantir/python-language-server&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There is a server from Microsoft as well: &lt;a href=&quot;https://github.com/Microsoft/python-language-server/&quot;&gt;https://github.com/Microsoft/python-language-server/&lt;/a&gt;.
And it even has &lt;a href=&quot;https://github.com/Microsoft/python-language-server/blob/master/Using_in_sublime_text.md&quot;&gt;the short instruction&lt;/a&gt; how to setup Sublime Text for it. This server requires &lt;a href=&quot;https://dotnet.microsoft.com/download/dotnet-core/2.1&quot;&gt;dotnet&lt;/a&gt; to be installed in your system.
I tried to launch it, but it didn’t provide all the features that I needed. Maybe I didn’t set it up correctly. And I rarely (well, never :)) use C# in my work, so it is hard to understand the details of implementation. This is not required to be able to use, but sometimes I like to do small tweaks and it will be hard to do in C# for me.&lt;/p&gt;

&lt;p&gt;So let’s return to the server written in python. I had such a plan in my mind:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We have a separate virtualenv, that was created exclusively for LSP server&lt;/li&gt;
  &lt;li&gt;We keep clean the virtualenv of our working project, i.e. there is no LSP server installed in it&lt;/li&gt;
  &lt;li&gt;During communication with the server, our IDE will tell which virtualenv to use (to indicate environment of current project)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In total, we can install LSP server only once and use it for different projects.
It wasn’t obvious how to do it at the time this post was written. At least I didn’t find a definite guide on how to do it. In the documentation for the python server it was implicitly assumed that server will be installed in the same virtualenv as the project. To my mind this is not useful, so I created a &lt;a href=&quot;https://github.com/palantir/python-language-server/pull/401&quot;&gt;PR&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, this LSP didn’t use my linter settings. For example, in the root folder of the project I have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setup.cfg&lt;/code&gt; file with such params:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ignore = D202,D205,D211
max-line-length = 99
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To make LSP use it I have to create another &lt;a href=&quot;https://github.com/palantir/python-language-server/pull/413&quot;&gt;PR&lt;/a&gt;, which in turn migrated to &lt;a href=&quot;https://github.com/palantir/python-language-server/pull/418&quot;&gt;this one&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There were other problems and sometimes they required PRs as well. I hope, that all of them will be included in release soon. Meanwhile, there is release in my &lt;a href=&quot;https://github.com/st4lk/python-language-server/releases/tag/0.22.0a1&quot;&gt;fork&lt;/a&gt;, it contains mentioned fixes.&lt;/p&gt;

&lt;p&gt;To be precise:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create a separate virtualenv for LSP server. Better to use python3.6+.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Install server there (the release that I mentioned above ^):&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  pip install https://github.com/st4lk/python-language-server/archive/0.22.0a1.zip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to use requirements.txt - then just add a link to zip file there as is, no need to use any prefix/suffix.&lt;/p&gt;

&lt;p&gt;It is possible, that at the moment when you read this post, all the fixes are already included in official version &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;gt; 0.22&lt;/code&gt; (or they were fixed by other commits). It worth checking the changelog of the current version.&lt;/p&gt;

&lt;h2 id=&quot;sublime-text&quot;&gt;Sublime Text&lt;/h2&gt;

&lt;p&gt;Let’s move to IDE setup. I’ll describe Sublime Text in this article. I like this code editor, although it is not an IDE strictly speaking. I like its speed, vintage mode, multi-cursors and many other features.&lt;/p&gt;

&lt;p&gt;So, how to connect Sublime Text with LSP server?
First of all we’ll need to install a plugin for LSP: &lt;a href=&quot;https://github.com/tomv564/LSP&quot;&gt;https://github.com/tomv564/LSP&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The most important thing - to setup it properly.
Go to plugin settings (on MacOS it is &lt;em&gt;Sublime Text -&amp;gt; Preferences -&amp;gt; Package Settings -&amp;gt; LSP -&amp;gt; Settings&lt;/em&gt;).
In user’s settings type something like:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;clients&quot;: {
    &quot;pyls&quot;:
    {
      &quot;enabled&quot;: true,
      &quot;command&quot;: [
        &quot;~/.virtualenvs/python-language-server/bin/pyls&quot;
      ],
      &quot;settings&quot;: {
        &quot;pyls&quot;: {
          &quot;configurationSources&quot;: [&quot;flake8&quot;],
          &quot;plugins&quot;: {
            &quot;jedi_definition&quot;: {
              &quot;follow_imports&quot;: true
            }
          }
        }
      },
      &quot;scopes&quot;: [&quot;source.python&quot;],
      &quot;syntaxes&quot;: [
        &quot;Packages/Python/Python.sublime-syntax&quot;,
        &quot;Packages/Djaneiro/Syntaxes/Python Django.tmLanguage&quot;
      ],
      &quot;languageId&quot;: &quot;python&quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s speak about the most important parameters.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“command”&lt;/strong&gt; - path to executable file of pyls server. As you can see, on my computer it is installed in virtualenv  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.virtualenvs/python-language-server/&lt;/code&gt; (I use &lt;a href=&quot;https://virtualenvwrapper.readthedocs.io/en/latest/&quot;&gt;virtualenvwrapper&lt;/a&gt;). This is not a virtualenv of your project! Here we have only pyls and nothing else.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“settings” : “pyls” : “configurationSources”&lt;/strong&gt;. Here we can specify the source of linter settings. By default it is “pycodestyle”, but I usually use flake8. So pyls will search following files:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&apos;.flake8&apos;, &apos;setup.cfg&apos; (section [flake8]), &apos;tox.ini&apos;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;“follow_imports”: true&lt;/strong&gt;. An important setting, without it goto will show only the &lt;em&gt;import&lt;/em&gt; place, but not the source code. To my mind, such behavior is not very useful, it is more interesting to look at actual implementation, instead of just import path. To make it work I have to tweak the server a little bit: &lt;a href=&quot;https://github.com/palantir/python-language-server/pull/404/&quot;&gt;https://github.com/palantir/python-language-server/pull/404/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another valuable thing: &lt;strong&gt;“syntaxes”&lt;/strong&gt; setting. If you are using plugin like &lt;a href=&quot;https://github.com/squ1b3r/Djaneiro&quot;&gt;Djaneiro&lt;/a&gt; (it adds some cool autocompletion, snippets for Django project), then Sublime Text will treat syntax of python files as Djaneiro, not as the default Python. So need to specify it for our LSP server. Otherwise, editor will not launch it.&lt;/p&gt;

&lt;p&gt;We have defined global settings that will be used for all python fileds. But how to define settings specific for concrete project?&lt;/p&gt;

&lt;p&gt;Surprisingly, you can specify them in project settings :). Go to &lt;em&gt;Project -&amp;gt; Edit project&lt;/em&gt; and add the following:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;folders&quot;:
  [
      {
          &quot;path&quot;: &quot;/Path/to/my/project&quot;
      },
  ],
  &quot;settings&quot;:
  {
    &quot;LSP&quot;:
    {
      &quot;pyls&quot;:
      {
        &quot;env&quot;:
        {
          &quot;VIRTUAL_ENV&quot;: &quot;/path/to/my/project/virtualenv/&quot;
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By using &lt;strong&gt;“VIRTUAL_ENV”&lt;/strong&gt; we can point to project’s virtualenv, so pyls will know where to search installed packages for autocompletion, goto end etc.&lt;/p&gt;

&lt;p&gt;Ok, let’s launch all of it. Imagine that we have such django project:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;project
├── ...
├── my_app
│   ├── ...
│   ├── forms.py
│   └── models.py
├── manage.py
└── setup.cfg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The simplest models.py file:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from django.db import models


class Book(models.Model):
    &quot;&quot;&quot;
    This is docstring of Book model.
    Example for LSP demostration.
    &quot;&quot;&quot;

    title = models.CharField(max_length=50)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and forms.py:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from django.forms import ModelForm
from .models import Book


class BookForm(ModelForm):

    class Meta:
        model = Book
        fields = &apos;__all__&apos;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In setup.cfg we have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[flake8]&lt;/code&gt; section:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[flake8]
ignore = D202,D205,D211
max-line-length = 99
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What do we get now?
Server will provide features of &lt;a href=&quot;https://jedi.readthedocs.io/en/latest/&quot;&gt;jedi&lt;/a&gt; out of the box, for example, Definitions (goto), References, autocomplete.&lt;/p&gt;

&lt;p&gt;On hover you’ll see the doscstring of the object, as well as available actions:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.ibb.co/0yW1sRd/sublime-lsp-popup-with-docstring-and-actions.png&quot; alt=&quot;Sublime Text and Language Server Protocol (LSP): cursor hover window with documentation and actions&quot; title=&quot;Sublime Text and Language Server Protocol (LSP): cursor hover window with documentation and actions&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you’ll click on Definition you will jump to class implementation.
On click on References - all usages will be shown:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.ibb.co/26LW2ys/sublime-lsp-references.png&quot; alt=&quot;Sublime Text and Language Server Protocol (LSP): References&quot; title=&quot;Sublime Text a d Language Server Protocol (LSP): References&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Autocomplete is also working:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.ibb.co/cb2gKDJ/sublime-lsp-autocomplete-methods.png&quot; alt=&quot;Sublime Text and Language Server Protocol (LSP): methods autocomplete&quot; title=&quot;Sublime Text and Language Server Protocol (LSP): methods autocomplete&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.ibb.co/zQ6ZXHh/sublime-lsp-autocomplete-fields.png&quot; alt=&quot;Sublime Text and Language Server Protocol (LSP): fields autcomplete&quot; title=&quot;Sublime Text and Language Server Protocol (LSP): fields autcomplete&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But syntax errors and pep8 rules violation will not be shown. To make it work, need to install following packages into virtualenv where your LSP server is running:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install mccabe
pip install pyflakes
pip install pycodestyle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Voila, now editor will show warnings:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.ibb.co/VYCWVtY/sublime-lsp-invalid-syntax.png&quot; alt=&quot;Sublime Text and Language Server Protocol (LSP): syntax error&quot; title=&quot;Sublime Text and Language Server Protocol (LSP): syntax error&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.ibb.co/rph2V6X/sublime-lsp-pep8-warning.png&quot; alt=&quot;Sublime Text and Language Server Protocol (LSP): pep8 rules violation&quot; title=&quot;Sublime Text and Language Server Protocol (LSP): pep8 rules violation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Remember, that linter settings will be taken from setup.cfg automatically (according to our pyls settings). So rules &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D202,D205,D211&lt;/code&gt; will be ignored and max line length will be 99 instead of default 80.&lt;/p&gt;

&lt;p&gt;We can setup &lt;a href=&quot;http://mypy-lang.org/&quot;&gt;mypy&lt;/a&gt; check as well. A corresponding &lt;a href=&quot;https://github.com/tomv564/pyls-mypy&quot;&gt;plugin&lt;/a&gt; will be needed for that. But it will be better to describe it in a separate article if I can make it. Some non-obvious things exist there as well.&lt;/p&gt;

&lt;p&gt;In total, we have a working Python Language Server in Sublime Text 3.
As you can see, the experience wasn’t very smooth, but I keep using this code editor, it is my habit.
Yes, I use Pycharm sometimes, it has tons of nice features out of the box. Visual Studio Code editor is good as well, but Sublime looks so native for me.&lt;/p&gt;

&lt;p&gt;What conclusion can I make?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the server doesn’t look fully ready (at least implementation in python), have to create PRs and they accepted slowly&lt;/li&gt;
  &lt;li&gt;Sublime LSP doesn’t work in the right window (&lt;em&gt;View -&amp;gt; Layout -&amp;gt; Columns: 2&lt;/em&gt;), probably need to fix by submitting further PRs&lt;/li&gt;
  &lt;li&gt;it is worth checking the &lt;a href=&quot;https://github.com/Microsoft/python-language-server/&quot;&gt;server implemented by Microsoft&lt;/a&gt;, I think it may be the mainstream.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Meanwhile, my setup is working and it helps me a lot in my daily work.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://twitter.com/grigoryvp&quot;&gt;Grigory Petrov&lt;/a&gt; for his &lt;a href=&quot;http://www.moscowpython.ru/meetup/58/pyre-type-checker/&quot;&gt;talk at Moscow Python&lt;/a&gt;. That was the starting point for me to investigate the LSP world.&lt;/p&gt;</content><author><name></name></author><category term="python" /><category term="sublime" /><category term="lsp" /><summary type="html">Language Server Protocol (LSP) LSP - protocol for interactions between IDE and language server. The latter provides such means like autocompletion, goto implementation and etc. When IDE needs to show autocomplete choices on, for example, python language - it sends a request to the special server. And it responds with the necessary data. The cool part here is that it is an initiative of a big company - Microsoft.</summary></entry><entry><title type="html">Trap in counting related objects in Django</title><link href="https://st4lk.github.io/en/blog/2017/01/14/count-filtered-related-objects-django.html" rel="alternate" type="text/html" title="Trap in counting related objects in Django" /><published>2017-01-14T18:19:43+00:00</published><updated>2017-01-14T18:19:43+00:00</updated><id>https://st4lk.github.io/en/blog/2017/01/14/count-filtered-related-objects-django</id><content type="html" xml:base="https://st4lk.github.io/en/blog/2017/01/14/count-filtered-related-objects-django.html">&lt;p&gt;&lt;a href=&quot;/en/blog/2017/01/14/count-filtered-related-objects-django.html&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/172931/85893628.c6b/0_1f68eb_c4171bf7_L.png&quot; alt=&quot;Trap in counting related objects in Django&quot; title=&quot;Trap in counting related objects in Django&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Task: for every object count number of related objects satisfying some conditions.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Category(models.Model):
    title = models.CharField(max_length=50)

class Article(models.Model):
    title = models.CharField(max_length=50)
    category = models.ForeignKey(Category)
    approved_at = models.DateTimeField(blank=True, null=True)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Pay attention at field &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Article.approved_at&lt;/code&gt;, it contains article approval time and it can be null.&lt;/p&gt;

&lt;p&gt;Create test data:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from django.utils import timezone

c1 = Category.objects.create(title=&apos;c1&apos;)
c2 = Category.objects.create(title=&apos;c2&apos;)

a1 = Article.objects.create(category=c1, title=&apos;a1&apos;)
a2 = Article.objects.create(category=c1, title=&apos;a2&apos;, approved_at=timezone.now())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So we have two categories. The first one has one approved and one not approved article. The second category doesn’t have any article.&lt;/p&gt;

&lt;p&gt;Let’s begin with counting all articles for each category:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from django.db.models import Count

&amp;gt;&amp;gt;&amp;gt; Category.objects.annotate(
...     article_count=Count(&apos;article&apos;)
... ).values(&apos;title&apos;, &apos;article_count&apos;)

&amp;lt;QuerySet [{&apos;article_count&apos;: 2, &apos;title&apos;: u&apos;c1&apos;}, {&apos;article_count&apos;: 0, &apos;title&apos;: u&apos;c2&apos;}]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Django ORM built following expected SQL query:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT &quot;main_category&quot;.&quot;title&quot;, COUNT(&quot;main_article&quot;.&quot;id&quot;) AS &quot;article_count&quot;
    FROM &quot;main_category&quot;
    LEFT OUTER JOIN &quot;main_article&quot; ON (&quot;main_category&quot;.&quot;id&quot; = &quot;main_article&quot;.&quot;category_id&quot;)
    GROUP BY &quot;main_category&quot;.&quot;id&quot;, &quot;main_category&quot;.&quot;title&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ok, now we want to count only approved articles. Using SQL language, we can just update JOIN part:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT &quot;main_category&quot;.&quot;title&quot;, COUNT(&quot;main_article&quot;.&quot;id&quot;) AS &quot;article_count&quot;
    FROM &quot;main_category&quot;
    LEFT OUTER JOIN &quot;main_article&quot; 
        ON (&quot;main_category&quot;.&quot;id&quot; = &quot;main_article&quot;.&quot;category_id&quot; AND
            &quot;main_article&quot;.&quot;approved_at&quot; IS NOT NULL)
    GROUP BY &quot;main_category&quot;.&quot;id&quot;, &quot;main_category&quot;.&quot;title&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Unfortunately, Django ORM doesn’t allow to apply any filter for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Count&lt;/code&gt; (at least in v1.10). But starting from v1.8 we have &lt;a href=&quot;https://docs.djangoproject.com/en/dev/ref/models/conditional-expressions/&quot;&gt;conditional expressions&lt;/a&gt;, so let’s use it:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from django.db.models import Count, Case, When

&amp;gt;&amp;gt;&amp;gt; Category.objects.annotate(
...     article_count=Count(
...         Case(When(article__approved_at__isnull=False, then=1))
...     )
... ).values(&apos;title&apos;, &apos;article_count&apos;)

&amp;lt;QuerySet [{&apos;article_count&apos;: 1, &apos;title&apos;: u&apos;c1&apos;}, {&apos;article_count&apos;: 0, &apos;title&apos;: u&apos;c2&apos;}]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The returned values are valid. Corresponding SQL query:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT &quot;main_category&quot;.&quot;title&quot;, COUNT(
    CASE WHEN &quot;main_article&quot;.&quot;approved_at&quot; IS NOT NULL THEN 1 ELSE NULL END
) AS &quot;article_count&quot;
FROM &quot;main_category&quot;
LEFT OUTER JOIN &quot;main_article&quot; ON (&quot;main_category&quot;.&quot;id&quot; = &quot;main_article&quot;.&quot;category_id&quot;)
GROUP BY &quot;main_category&quot;.&quot;id&quot;, &quot;main_category&quot;.&quot;title&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;the-trap&quot;&gt;The Trap&lt;/h2&gt;

&lt;p&gt;Here is an interesting question, how we can count number of &lt;em&gt;not approved&lt;/em&gt; articles?&lt;/p&gt;

&lt;p&gt;The first thought that comes to the mind is to change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;False&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;True&lt;/code&gt; in the query:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; Category.objects.annotate(
...     article_count=Count(
...         Case(When(article__approved_at__isnull=True, then=1))
...     )
... ).values(&apos;title&apos;, &apos;article_count&apos;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But query returns not valid values:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;QuerySet [{&apos;article_count&apos;: 1, &apos;title&apos;: u&apos;c1&apos;}, {&apos;article_count&apos;: 1, &apos;title&apos;: u&apos;c2&apos;}]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The second category has mysterious unapproved article.&lt;/p&gt;

&lt;p&gt;Check the SQL:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT &quot;main_category&quot;.&quot;title&quot;, COUNT(
    CASE WHEN &quot;main_article&quot;.&quot;approved_at&quot; IS NULL THEN 1 ELSE NULL END
) AS &quot;article_count&quot;
FROM &quot;main_category&quot;
LEFT OUTER JOIN &quot;main_article&quot; ON (&quot;main_category&quot;.&quot;id&quot; = &quot;main_article&quot;.&quot;category_id&quot;)
GROUP BY &quot;main_category&quot;.&quot;id&quot;, &quot;main_category&quot;.&quot;title&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The condition&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CASE WHEN &quot;main_article&quot;.&quot;approved_at&quot; IS NULL THEN 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;will be true even if category doesn’t have any article at all!&lt;/p&gt;

&lt;p&gt;One approach to fix is the following:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; Category.objects.annotate(
...     article_count=Count(
...         Case(
...             When(
...                 article__id__isnull=False,
...                 article__approved_at__isnull=True,
...                 then=1
...             )
...         )
...     )
... ).values(&apos;title&apos;, &apos;article_count&apos;)

&amp;lt;QuerySet [{&apos;article_count&apos;: 1, &apos;title&apos;: u&apos;c1&apos;}, {&apos;article_count&apos;: 0, &apos;title&apos;: u&apos;c2&apos;}]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;the-moral-of-the-story&quot;&gt;The moral of the story&lt;/h2&gt;

&lt;p&gt;When condition like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IS NULL&lt;/code&gt; happens, double check every edge case!&lt;/p&gt;</content><author><name></name></author><category term="database" /><category term="django" /><category term="sql" /><summary type="html">Task: for every object count number of related objects satisfying some conditions.</summary></entry><entry><title type="html">Django: signal or model method?</title><link href="https://st4lk.github.io/en/blog/2016/08/01/django-signal-or-model-method.html" rel="alternate" type="text/html" title="Django: signal or model method?" /><published>2016-08-01T18:19:43+00:00</published><updated>2016-08-01T18:19:43+00:00</updated><id>https://st4lk.github.io/en/blog/2016/08/01/django-signal-or-model-method</id><content type="html" xml:base="https://st4lk.github.io/en/blog/2016/08/01/django-signal-or-model-method.html">&lt;p&gt;&lt;a href=&quot;/en/blog/2016/08/01/django-signal-or-model-method.html&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/95108/85893628.c69/0_1d577c_baad2650_orig.png&quot; alt=&quot;Django: signal or model method?&quot; title=&quot;Django: signal or model method?&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When I needed to implement some functionality on model saving, I always asked a question to myself - where to place it. In signal or in model method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;save()&lt;/code&gt;? Let’s see, what and when is more applicable.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;when-use-model-methods-save-delete&quot;&gt;When use model methods save(), delete()?&lt;/h3&gt;

&lt;p&gt;To my mind class methods are more usable, if logic concerns exclusively current model. For example, fill some field on model saving according to data from other fields.&lt;/p&gt;

&lt;p&gt;Some people say, that signals are better because it is easy to reuse them. It seems strange to me because we can define a function or a mixin class and reuse it in method save() as well.&lt;/p&gt;

&lt;p&gt;Generally, we can always use signals, so why I favor method save? Simple answer - it is more readable. When you are going through the model, you can easily understand, that something will happen on saving. In case of signals, especially if there is no rule where they are defined, the logic often come out of sight.&lt;/p&gt;

&lt;p&gt;Keep in mind, that delete signals &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pre_delete&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;post_delete&lt;/code&gt; have some advantage over &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;delete()&lt;/code&gt; method: they are &lt;a href=&quot;https://docs.djangoproject.com/en/1.9/topics/db/models/#overriding-predefined-model-methods&quot;&gt;called&lt;/a&gt; even on cascading delete and deleting a queryset. This is not happening with model method. In this situation make a decision according to context, maybe cascading delete is not so important.&lt;/p&gt;

&lt;p&gt;On bulk creating and updating no code is executed: nor signal nor save(). So here they are equal.&lt;/p&gt;

&lt;p&gt;And don’t forget to call parent’s method save() or delete() if you override them.&lt;/p&gt;

&lt;h3 id=&quot;when-use-signals&quot;&gt;When use signals?&lt;/h3&gt;

&lt;p&gt;Signals are more applicable when you implement reusable applications. The users of your app can easily connect signals to their models without modifying the code of these models.&lt;/p&gt;

&lt;p&gt;We can define a function or a mixin class for the same purpose. But agree, that attaching logic from some foreign app is more comfortable by using signals. Besides, if you decide to stop using the app, you will need to modify very small part of the project’s code.&lt;/p&gt;

&lt;p&gt;The same is true when there are two (or more) apps within one project and you need to do something with one model when another model from the different application is being saved.&lt;/p&gt;

&lt;p&gt;Imagine two applications, users and reports. When we create a user we need to create automatically a report for that user. In this case, I prefer to create a signal in reports application, since logic corresponds to it.&lt;/p&gt;

&lt;p&gt;Why?&lt;/p&gt;

&lt;p&gt;Firstly, we keep logic in the place where it belongs. Secondly, if for some reason we decide to delete the reports app entirely, we don’t even touch the users application.&lt;/p&gt;

&lt;h3 id=&quot;where-define-signals-and-were-connect-them&quot;&gt;Where define signals and were connect them?&lt;/h3&gt;

&lt;p&gt;As &lt;a href=&quot;https://docs.djangoproject.com/en/1.9/topics/signals/#connecting-receiver-functions&quot;&gt;django docs&lt;/a&gt; (section “Where should this code live?”) suggests, define signals in separate submodule &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;signals&lt;/code&gt; and not in models.py and __init__.py. This will save you from import problems.&lt;/p&gt;

&lt;p&gt;To be sure the signals are connected, we need to execute the code that connects them on project launch. When we define them in models.py, we already get this. But now they are living in other place and it won’t run until we import it somewhere. Let’s do it in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ready()&lt;/code&gt; method of &lt;a href=&quot;https://docs.djangoproject.com/en/1.9/ref/applications/&quot;&gt;application config class&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In general, I follow recommendations from &lt;a href=&quot;http://stackoverflow.com/a/22924754/821594&quot;&gt;this&lt;/a&gt; stackoverflow answer. Here is an example for users and reports applications, that I talked about earlier. We need to create a report on user creation.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Create submodule &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;signals&lt;/code&gt; and place handlers.py in it&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; reports/signals/__init__.py
 reports/signals/handlers.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Define signals in that file handlers.py&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; from django.db.models.signals import post_save
 from django.dispatch import receiver
 from django.contrib.auth import get_user_model

 from reports.models import Report

 User = get_user_model()

 @receiver(post_save, sender=User)
 def create_user_report(sender, instance, created, **kwargs):
     if created:
         Report.objects.create(user=instance)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create application config class&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; reports/apps.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;with code:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; from django.apps import AppConfig

 class ReportsConfig(AppConfig):
     name = &apos;reports&apos;
     verbose_name = &apos;Reports&apos;

     def ready(self):
         import reports.signals.handlers  # noqa
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;And now our signal is connected. In this example I used decorator &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@receiver&lt;/code&gt;, so just import is enough. We also could call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;connect&lt;/code&gt; method of the signal explicitly here. It is a matter of taste.&lt;/p&gt;

    &lt;p&gt;Don’t forget to define our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReportsConfig&lt;/code&gt; class as config of the application. To do it, place this code in reports/__init__.py:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; default_app_config = &apos;reports.apps.ReportsConfig&apos;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Or place ReportsConfig in your settings.INSTALLED_APPS. Look &lt;a href=&quot;https://docs.djangoproject.com/en/dev/ref/applications/#configuring-applications&quot;&gt;django docs&lt;/a&gt; for details.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If follow these rules we will always know where to find signal handlers. And consequently no need to search the models module to find them.&lt;/p&gt;</content><author><name></name></author><category term="django" /><category term="signal" /><summary type="html">When I needed to implement some functionality on model saving, I always asked a question to myself - where to place it. In signal or in model method save()? Let’s see, what and when is more applicable.</summary></entry><entry><title type="html">Trying JSON in Django and PostgreSQL (and compare with MongoDB)</title><link href="https://st4lk.github.io/en/blog/2015/09/30/trying-json-combo-django-and-postgresql.html" rel="alternate" type="text/html" title="Trying JSON in Django and PostgreSQL (and compare with MongoDB)" /><published>2015-09-30T18:19:43+00:00</published><updated>2015-09-30T18:19:43+00:00</updated><id>https://st4lk.github.io/en/blog/2015/09/30/trying-json-combo-django-and-postgresql</id><content type="html" xml:base="https://st4lk.github.io/en/blog/2015/09/30/trying-json-combo-django-and-postgresql.html">&lt;p&gt;&lt;a href=&quot;/en/blog/2015/09/30/trying-json-combo-django-and-postgresql.html&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/3706/85893628.c69/0_19430e_cafd0257_XL.png&quot; alt=&quot;Trying JSON in Django and PostgreSQL&quot; title=&quot;Trying JSON in Django and PostgreSQL&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;New &lt;a href=&quot;https://docs.djangoproject.com/en/1.9/ref/contrib/postgres/fields/#jsonfield&quot;&gt;JSONField&lt;/a&gt; will be added in Django 1.9, it can be used with PostgreSQL &amp;gt;= 9.4. Let’s try to work with it and find out, in what situations it can be useful.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Currently django 1.9 alpha is available, final version is scheduled on December 2015.
Alpha can be installed with pip:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install --pre django
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now imagine that we have an e-commerce site, where we offer products of different types. For example, laptops and t-shirts. Obviously, such goods will have different attributes: t-shirts will have size, color and laptops - screen size, CPU frequency, hard drive and so on. One of the approaches to design such data in SQL is &lt;a href=&quot;https://en.wikipedia.org/wiki/Entity%E2%80%93attribute%E2%80%93value_model&quot;&gt;Entity–attribute–value model (EAV)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But now we have JSON, so let’s try to organise data using this type.&lt;/p&gt;

&lt;p&gt;Create simple model for products:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from django.db import models
from django.contrib.postgres.fields import JSONField

class Category(models.Model):
    name = models.CharField(max_length=100)

class Product(models.Model):
    name = models.CharField(max_length=100)
    category = models.ForeignKey(Category)
    price = models.IntegerField()
    attributes = JSONField()

    def __str__(self):
        return self.name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As we can see, there are several common fields for all products (name, category, price) plus specific to particular product attributes (as JSON field).&lt;/p&gt;

&lt;p&gt;Create objects:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tshirt = Category.objects.create(name=&apos;tshirts&apos;)
notebook = Category.objects.create(name=&apos;notebook&apos;)

# Tshirts
Product.objects.create(name=&apos;Silk tshirt&apos;, category=tshirt, price=100, attributes={
    &apos;colors&apos;: [&apos;red&apos;, &apos;black&apos;],
    &apos;sizes&apos;: [&apos;S&apos;, &apos;M&apos;],
    &apos;model&apos;: &apos;polo&apos;,
    &apos;material&apos;: &apos;silk&apos;,
})

Product.objects.create(name=&apos;Bamboo tshirt&apos;, category=tshirt, price=120, attributes={
    &apos;colors&apos;: [&apos;white&apos;, &apos;yellow&apos;],
    &apos;sizes&apos;: [&apos;M&apos;, &apos;L&apos;, &apos;XL&apos;],
    &apos;model&apos;: &apos;poet&apos;,
    &apos;material&apos;: &apos;bamboo&apos;,
})

# Notebooks
Product.objects.create(name=&apos;MacBook Pro&apos;, category=notebook, price=2000, attributes={
    &apos;brand&apos;: &apos;Apple&apos;,
    &apos;screen&apos;: 15.0,
    &apos;speed&apos;: 2200,
    &apos;hd&apos;: 256,
})

Product.objects.create(name=&apos;ATIV Book 9&apos;, category=notebook, price=1200, attributes={
    &apos;brand&apos;: &apos;Samsung&apos;,
    &apos;screen&apos;: 12.2,
    &apos;speed&apos;: 2400,
    &apos;hd&apos;: 128,
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;queries&quot;&gt;Queries&lt;/h3&gt;

&lt;p&gt;Let’s see, what queries we can make.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Get t-shirts with both ‘M’ and ‘L’ sizes:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt; Product.objects.filter(category=tshirt, attributes__contains={&apos;sizes&apos;: [&apos;M&apos;, &apos;L&apos;]})
 [&amp;lt;Product: Bamboo tshirt&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Get t-shirts with both ‘M’ and ‘L’ sizes, both white and yellow colors, with poetry on it (model=poet):&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt; Product.objects.filter(category=tshirt,
     attributes__contains={&apos;sizes&apos;: [&apos;M&apos;, &apos;L&apos;], &apos;colors&apos;: [&apos;white&apos;, &apos;yellow&apos;],
     &apos;model&apos;: &apos;poet&apos;})
 [&amp;lt;Product: Bamboo tshirt&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Get laptops with CPU frequency 2400 and screen size 12.2&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt; Product.objects.filter(category=notebook,
     attributes__contains={&apos;speed&apos;: 2400, &apos;screen&apos;: 12.2})
 [&amp;lt;Product: ATIV Book 9&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Get t-shirts with red color, model polo and with size ‘M’ or ‘L’&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt; Product.objects.filter(category=tshirt,
     attributes__contains={&apos;colors&apos;: [&apos;red&apos;], &apos;model&apos;: &apos;polo&apos;},
     attributes__sizes__has_any_keys=[&apos;M&apos;, &apos;L&apos;])
 [&amp;lt;Product: Silk tshirt&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Get laptops with CPU greater that 2000 and screen larger that 13&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt; Product.objects.filter(category=notebook, attributes__speed__gt=2000,
     attributes__screen__gt=13)
 [&amp;lt;Product: MacBook Pro&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Get laptops with CPU frequency equal to 2200 or 2400&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt; Product.objects.filter(category=notebook, attributes__speed__in=(2200, 2400))
 [&amp;lt;Product: ATIV Book 9&amp;gt;, &amp;lt;Product: MacBook Pro&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;or like this:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt; from django.db.models import Q
 &amp;gt;&amp;gt;&amp;gt; Product.objects.filter(category=notebook).filter(
     Q(attributes__contains={&apos;speed&apos;: 2200}) | Q(attributes__contains={&apos;speed&apos;: 2400}))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;indexes&quot;&gt;Indexes&lt;/h3&gt;

&lt;p&gt;Let’s find out, how effective can be our queries.&lt;/p&gt;

&lt;p&gt;PostgreSQL supports &lt;a href=&quot;http://www.postgresql.org/docs/9.4/static/datatype-json.html#JSON-INDEXING&quot;&gt;different indexes&lt;/a&gt; for JSON types:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;GIN&lt;/p&gt;

    &lt;p&gt;this index in its turn can support different operators:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;jsonb_ops (default), supports operators &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@&amp;gt;, ?, ?&amp;amp;, ?|&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;jsonb_path_ops, supports only &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@&amp;gt;&lt;/code&gt;, but works faster and requires less space&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;btree&lt;/p&gt;

    &lt;p&gt;can be useful in searching exact json document&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;hash&lt;/p&gt;

    &lt;p&gt;same as btree, can be useful in searching exact json document&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;сorrespondence-of-some-django-operations-and-postgresql-operators&quot;&gt;Сorrespondence of some Django operations and PostgreSQL operators&lt;/h4&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Django        Postgres
----------------------
contains      @&amp;gt;
contained_by  &amp;lt;@
has_key       ?
has_any_keys  ?|
has_keys      ?&amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In our case the most interesting operator is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@&amp;gt;&lt;/code&gt;. Django will transform operation &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;contains&lt;/code&gt; to it for json fields.&lt;/p&gt;

&lt;p&gt;If we simply add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;db_index=True&lt;/code&gt;, btree index will be created:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Product(models.Model):
    ...
    attributes = JSONField(db_index=True)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For our queries GIN index will be more applicable. To create it we’ll use &lt;a href=&quot;https://docs.djangoproject.com/en/dev/ref/migration-operations/#django.db.migrations.operations.RunSQL&quot;&gt;RunSQL&lt;/a&gt; operation.&lt;/p&gt;

&lt;p&gt;First create empty migration. In current example app with products has name ‘catalogue_simple’&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python manage.py makemigrations --empty catalogue_simple
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In created file (in my case it is 0002_auto_20150928_1610.py) add couple imports and commands to create and discard index:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from catalogue_simple.models import Product
from psycopg2.extensions import AsIs

class Migration(migrations.Migration):
    # ...
    operations = [
        migrations.RunSQL(
            [(&quot;CREATE INDEX catalogue_product_attrs_gin ON %s USING gin&quot;
                &quot;(attributes jsonb_path_ops);&quot;, [AsIs(Product._meta.db_table)])],
            [(&apos;DROP INDEX catalogue_product_attrs_gin;&apos;, None)],
        )
    ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here catalogue_product_attrs_gin - index name (we can choose any), attributes - name of JSON field, Product - product model. We are creating jsonb_path_ops index, as it will cover the most common operation in our queries - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;contains&lt;/code&gt;. Extension &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AsIs&lt;/code&gt; is used to not wrap &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%s&lt;/code&gt; param with single quotes.&lt;/p&gt;

&lt;p&gt;We don’t need btree index, so don’t add it:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Product(models.Model):
    ...
    attributes = JSONField()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;test-data&quot;&gt;Test data&lt;/h4&gt;

&lt;p&gt;I’ve generated 1 000 000 products of 4 different categoires, 250 000 in each. Every product category has its own attributes, from 4 to 7 keys. Some values are scalar (t-shirt material), some - lists (t-shirt sizes).&lt;/p&gt;

&lt;h4 id=&quot;queries-and-indexes&quot;&gt;Queries and indexes&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Get t-shirts with both ‘M’ and ‘L’ sizes:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt; Product.objects.filter(category=tshirt, attributes__contains={&apos;sizes&apos;: [&apos;M&apos;, &apos;L&apos;]})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Corresponding SQL (enumeration of all field names is replaced with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt; for brevity):&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; SELECT * FROM &quot;catalogue_simple_product&quot; WHERE
 (&quot;catalogue_simple_product&quot;.&quot;category_id&quot; = 5
     AND
 &quot;catalogue_simple_product&quot;.&quot;attributes&quot; @&amp;gt; &apos;{&quot;sizes&quot;: [&quot;M&quot;, &quot;L&quot;]}&apos;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Without GIN index on attributes query time is 292 ms, &lt;a href=&quot;http://explain.depesz.com/s/xmWS&quot;&gt;EXPLAIN ANALYSE&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;Same query with GIN index - 250 ms, &lt;a href=&quot;http://explain.depesz.com/s/cHk&quot;&gt;EXPLAIN ANALYSE&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;In this case we don’t gain much performance (292 ms vs 250 ms), because result contains a lot of rows: 66412.
 It is called “low selectivity”.
 Selectivity - ratio of filtered rows to the total rows. If this ratio tends to 1, we say “low selectivity”, to 0 - “high selectivity”.
 This metric helps us to estimate index effectiveness. With low selectivity index will not gain much performance.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Get t-shirts with both ‘M’ and ‘L’ sizes, both white and yellow colors, with poetry on it (model=poet):&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt; Product.objects.filter(category=tshirt,
     attributes__contains={&apos;sizes&apos;: [&apos;M&apos;, &apos;L&apos;], &apos;colors&apos;: [&apos;white&apos;, &apos;yellow&apos;],
     &apos;model&apos;: &apos;poet&apos;})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Corresponding SQL:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; SELECT * FROM &quot;catalogue_simple_product&quot; WHERE
 (&quot;catalogue_simple_product&quot;.&quot;category_id&quot; = 5
     AND
 &quot;catalogue_simple_product&quot;.&quot;attributes&quot; @&amp;gt; &apos;{
     &quot;colors&quot;: [&quot;white&quot;, &quot;yellow&quot;],
     &quot;model&quot;: &quot;poet&quot;,
     &quot;sizes&quot;: [&quot;M&quot;, &quot;L&quot;]
 }&apos;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Without GIN index - 240 ms, &lt;a href=&quot;http://explain.depesz.com/s/8Zx5&quot;&gt;EXPLAIN ANALYSE&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;With GIN index - 49 ms, &lt;a href=&quot;http://explain.depesz.com/s/qYN&quot;&gt;EXPLAIN ANALYSE&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;Query became faster: 240 ms vs 49 ms. Result contains 3737 rows, higher selectivity than in previous request.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Get laptops with CPU frequency 2400 and screen size 12.2&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt; Product.objects.filter(category=notebook,
     attributes__contains={&apos;speed&apos;: 2400, &apos;screen&apos;: 12.2})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Corresponding SQL:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; SELECT * FROM &quot;catalogue_simple_product&quot; WHERE
 (&quot;catalogue_simple_product&quot;.&quot;category_id&quot; = 7
     AND
 &quot;catalogue_simple_product&quot;.&quot;attributes&quot; @&amp;gt; &apos;{&quot;screen&quot;: 12.2, &quot;speed&quot;: 2400}&apos;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Without GIN index - 222 ms, &lt;a href=&quot;http://explain.depesz.com/s/Ocgt&quot;&gt;EXPLAIN ANALYSE&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;With GIN index - 34 ms, &lt;a href=&quot;http://explain.depesz.com/s/Ik8E&quot;&gt;EXPLAIN ANALYSE&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;222ms vs 34ms. Result contains 10389 rows.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Get t-shirts with red color, model polo and with size ‘M’ or ‘L’&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt; Product.objects.filter(category=tshirt,
     attributes__contains={&apos;colors&apos;: [&apos;red&apos;], &apos;model&apos;: &apos;polo&apos;},
     attributes__sizes__has_any_keys=[&apos;M&apos;, &apos;L&apos;])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Corresponding SQL:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; SELECT * FROM &quot;catalogue_simple_product&quot; WHERE
 (&quot;catalogue_simple_product&quot;.&quot;category_id&quot; = 5
     AND
 &quot;catalogue_simple_product&quot;.&quot;attributes&quot; @&amp;gt; &apos;{&quot;colors&quot;: [&quot;red&quot;], &quot;model&quot;: &quot;polo&quot;}&apos;
     AND
 &quot;catalogue_simple_product&quot;.&quot;attributes&quot; -&amp;gt; &apos;sizes&apos; ?| ARRAY[&apos;M&apos;, &apos;L&apos;]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Without GIN index - 253 ms, &lt;a href=&quot;http://explain.depesz.com/s/6SJ&quot;&gt;EXPLAIN ANALYSE&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;With GIN index - 78 ms, &lt;a href=&quot;http://explain.depesz.com/s/Lgb&quot;&gt;EXPLAIN ANALYSE&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;253 ms vs 78 ms. Result contains 18428 rows. In this query &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;has_any_keys&lt;/code&gt; &lt;em&gt;can’t&lt;/em&gt; use index, as we declared &lt;em&gt;jsonb_path_ops&lt;/em&gt; index. But index &lt;em&gt;jsonb_ops&lt;/em&gt; also will not work, because we are looking for array elements and not for first level keys.
 If such query is common and it has high selectivity, we can create index on particular JSON key:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; CREATE INDEX gin_sizes ON catalogue_simple_product USING gin ((attributes -&amp;gt; &apos;sizes&apos;));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;But in current example this don’t make sense, as filter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;attributes&quot; -&amp;gt; &apos;sizes&apos; ?| ARRAY[&apos;M&apos;, &apos;L&apos;]&lt;/code&gt; has low selectivity:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt; Product.objects.filter(category=tshirt,
     attributes__contains={&apos;colors&apos;: [&apos;red&apos;], &apos;model&apos;: &apos;polo&apos;},
     attributes__sizes__has_any_keys=[&apos;M&apos;, &apos;L&apos;]).count()
 18428

 &amp;gt;&amp;gt;&amp;gt; Product.objects.filter(category=tshirt,
     attributes__contains={&apos;colors&apos;: [&apos;red&apos;], &apos;model&apos;: &apos;polo&apos;}).count()
 25162
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Only ~25% of objects are filtered by sizes in this query.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Get laptops with CPU greater that 2000 and screen larger that 13&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt; Product.objects.filter(category=notebook, attributes__speed__gt=2000,
     attributes__screen__gt=13)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Corresponding SQL:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; SELECT * FROM &quot;catalogue_simple_product&quot; WHERE
 (&quot;catalogue_simple_product&quot;.&quot;category_id&quot; = 7
     AND
 &quot;catalogue_simple_product&quot;.&quot;attributes&quot; -&amp;gt; &apos;screen&apos; &amp;gt; &apos;13&apos;
     AND
 &quot;catalogue_simple_product&quot;.&quot;attributes&quot; -&amp;gt; &apos;speed&apos; &amp;gt; &apos;2000&apos;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;GIN index will not help here. If such request is common, we can create btree index on needed JSON keys:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; CREATE INDEX attrs_screen_speed ON catalogue_simple_product ((attributes -&amp;gt; &apos;screen&apos;), (attributes -&amp;gt; &apos;speed&apos;));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Result contains 10536 rows.&lt;/p&gt;

    &lt;p&gt;Without btree index query time is 352 ms, &lt;a href=&quot;http://explain.depesz.com/s/GWNM&quot;&gt;EXPLAIN ANALYSE&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;With btree index - 46 ms, &lt;a href=&quot;http://explain.depesz.com/s/YQO&quot;&gt;EXPLAIN ANALYSE&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Get laptops with CPU frequency equal to 2200 or 2400&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt; Product.objects.filter(category=notebook, attributes__speed__in=(2200, 2400))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Corresponding SQL:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; SELECT * FROM &quot;catalogue_simple_product&quot; WHERE
 (&quot;catalogue_simple_product&quot;.&quot;category_id&quot; = 7
     AND
 &quot;catalogue_simple_product&quot;.&quot;attributes&quot; -&amp;gt; &apos;speed&apos; IN (&apos;2200&apos;, &apos;2400&apos;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;This query is &lt;strong&gt;not&lt;/strong&gt; covered by GIN index. Query time ~ 389 ms, &lt;a href=&quot;http://explain.depesz.com/s/6U9&quot;&gt;EXPLAIN ANALYSE&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;Let’s try to rewrite this query to use existing GIN index&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt; from django.db.models import Q
 &amp;gt;&amp;gt;&amp;gt; Product.objects.filter(category=notebook).filter(Q(attributes__contains={&apos;speed&apos;: 2200}) | Q(attributes__contains={&apos;speed&apos;: 2400}))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;SQL:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; SELECT * FROM &quot;catalogue_simple_product&quot; WHERE
 (&quot;catalogue_simple_product&quot;.&quot;category_id&quot; = 7
     AND
 (&quot;catalogue_simple_product&quot;.&quot;attributes&quot; @&amp;gt; &apos;{&quot;speed&quot;: 2200}&apos;
         OR 
 &quot;catalogue_simple_product&quot;.&quot;attributes&quot; @&amp;gt; &apos;{&quot;speed&quot;: 2400}&apos;));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Now GIN index can be used, query time ~ 337 ms &lt;a href=&quot;http://explain.depesz.com/s/Sdq&quot;&gt;EXPLAIN ANALYSE&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;As we see, there is no much difference. But let’s check the selectivity of this query.
 Result contains 124 995 rows from 250 000 possible for current category, we have very low selectivity.&lt;/p&gt;

    &lt;p&gt;Create 100 laptops with CPU frequency 3200 and 100 laptops with 3500. There are no other laptops with such frequencies in database.&lt;/p&gt;

    &lt;p&gt;No check the performance:&lt;/p&gt;

    &lt;p&gt;Query doesn’t use GIN index:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt; Product.objects.filter(category=notebook, attributes__speed__in=(3200, 3500))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;we get the same time ~ 391 ms &lt;a href=&quot;http://explain.depesz.com/s/ThI&quot;&gt;EXPLAIN ANALYSE&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;Query does use GIN index:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt; Product.objects.filter(category=notebook).filter(Q(attributes__contains={&apos;speed&apos;: 3200}) | Q(attributes__contains={&apos;speed&apos;: 3500}))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Now we have query time only 0.773 ms! &lt;a href=&quot;http://explain.depesz.com/s/rqXN&quot;&gt;EXPLAIN ANALYSE&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;resume-of-indexes&quot;&gt;Resume of indexes&lt;/h4&gt;

&lt;p&gt;We can use single GIN index (jsonb_path_ops) to query by several attributes, and not just by one!&lt;/p&gt;

&lt;p&gt;Of course, it is not a silver bullet. We must always take into account, what data is we working with. And consequently choose right design.&lt;/p&gt;

&lt;h3 id=&quot;nosql-database-mongodb&quot;&gt;NoSQL database (MongoDB)&lt;/h3&gt;

&lt;p&gt;Can we store same data and make similar queries in MongoDB (v3.0.6)?&lt;/p&gt;

&lt;p&gt;To use only one single index in queries by unknown fields in advance, we need to use different structure in MongoDB.&lt;/p&gt;

&lt;p&gt;Field attributes will be a list of embedded documents, that have name and value:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; db.catalogue_simple.find().pretty()
{
    &quot;_id&quot; : ObjectId(&quot;560ab1970a0a88fe77d00f02&quot;),
    &quot;category&quot; : &quot;tshirts&quot;,
    &quot;name&quot; : &quot;Silk tshirt&quot;,
    &quot;price&quot; : 100,
    &quot;attributes&quot; : [
        {
            &quot;name&quot; : &quot;colors&quot;,
            &quot;value&quot; : &quot;red&quot;
        },
        {
            &quot;name&quot; : &quot;colors&quot;,
            &quot;value&quot; : &quot;black&quot;
        },
        {
            &quot;name&quot; : &quot;sizes&quot;,
            &quot;value&quot; : &quot;S&quot;
        },
        {
            &quot;name&quot; : &quot;sizes&quot;,
            &quot;value&quot; : &quot;M&quot;
        },
        {
            &quot;name&quot; : &quot;model&quot;,
            &quot;value&quot; : &quot;polo&quot;
        },
        {
            &quot;name&quot; : &quot;material&quot;,
            &quot;value&quot; : &quot;silk&quot;
        }
    ]
}
{
    &quot;_id&quot; : ObjectId(&quot;560ab1dd0a0a88fe77d00f03&quot;),
    &quot;category&quot; : &quot;tshirts&quot;,
    &quot;name&quot; : &quot;Bamboo tshirt&quot;,
    &quot;price&quot; : 120,
    &quot;attributes&quot; : [
        {
            &quot;name&quot; : &quot;colors&quot;,
            &quot;value&quot; : &quot;white&quot;
        },
        {
            &quot;name&quot; : &quot;colors&quot;,
            &quot;value&quot; : &quot;yellow&quot;
        },
        {
            &quot;name&quot; : &quot;sizes&quot;,
            &quot;value&quot; : &quot;M&quot;
        },
        {
            &quot;name&quot; : &quot;sizes&quot;,
            &quot;value&quot; : &quot;L&quot;
        },
        {
            &quot;name&quot; : &quot;sizes&quot;,
            &quot;value&quot; : &quot;XL&quot;
        },
        {
            &quot;name&quot; : &quot;model&quot;,
            &quot;value&quot; : &quot;poet&quot;
        },
        {
            &quot;name&quot; : &quot;material&quot;,
            &quot;value&quot; : &quot;bamboo&quot;
        }
    ]
}
{
    &quot;_id&quot; : ObjectId(&quot;560ab2cb0a0a88fe77d00f04&quot;),
    &quot;category&quot; : &quot;notebook&quot;,
    &quot;name&quot; : &quot;MacBook Pro&quot;,
    &quot;price&quot; : 2000,
    &quot;attributes&quot; : [
        {
            &quot;name&quot; : &quot;brand&quot;,
            &quot;value&quot; : &quot;Apple&quot;
        },
        {
            &quot;name&quot; : &quot;screen&quot;,
            &quot;value&quot; : 15
        },
        {
            &quot;name&quot; : &quot;speed&quot;,
            &quot;value&quot; : 2200
        },
        {
            &quot;name&quot; : &quot;hd&quot;,
            &quot;value&quot; : 256
        }
    ]
}
{
    &quot;_id&quot; : ObjectId(&quot;560ab2ec0a0a88fe77d00f05&quot;),
    &quot;category&quot; : &quot;notebook&quot;,
    &quot;name&quot; : &quot;ATIV Book 9&quot;,
    &quot;price&quot; : 1200,
    &quot;attributes&quot; : [
        {
            &quot;name&quot; : &quot;brand&quot;,
            &quot;value&quot; : &quot;Samsung&quot;
        },
        {
            &quot;name&quot; : &quot;screen&quot;,
            &quot;value&quot; : 12.2
        },
        {
            &quot;name&quot; : &quot;speed&quot;,
            &quot;value&quot; : 2400
        },
        {
            &quot;name&quot; : &quot;hd&quot;,
            &quot;value&quot; : 128
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;queries-mongodb&quot;&gt;Queries (MongoDB)&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Get t-shirts with both ‘M’ and ‘L’ sizes:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt; db.catalogue_simple.find({attributes: {$all: [
     {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;sizes&quot;, &quot;value&quot;: &quot;M&quot;}},
     {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;sizes&quot;, &quot;value&quot;: &quot;L&quot;}}
 ]}, category: &apos;tshirts&apos;})

 {&quot;name&quot; : &quot;Bamboo tshirt&quot;, /* ... */}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Get t-shirts with both ‘M’ and ‘L’ sizes, both white and yellow colors, with poetry on it (model=poet):&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt; db.catalogue_simple.find({attributes: {$all: [
     {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;sizes&quot;, &quot;value&quot;: &quot;M&quot;}},
     {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;sizes&quot;, &quot;value&quot;: &quot;L&quot;}},
     {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;colors&quot;, &quot;value&quot;: &quot;white&quot;}},
     {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;colors&quot;, &quot;value&quot;: &quot;yellow&quot;}},
     {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;model&quot;, &quot;value&quot;: &quot;poet&quot;}}
 ]}, category: &apos;tshirts&apos;})

 {&quot;name&quot; : &quot;Bamboo tshirt&quot;, /* ... */}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Get laptops with CPU frequency 2400 and screen size 12.2&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt; db.catalogue_simple.find({attributes: {$all: [
     {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;speed&quot;, &quot;value&quot;: 2400}},
     {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;screen&quot;, &quot;value&quot;: 12.2}}
 ]}, category: &apos;notebook&apos;})

 {&quot;name&quot; : &quot;ATIV Book 9&quot;, /* ... */}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Get t-shirts with red color, model polo and with size ‘M’ or ‘L’&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt; db.catalogue_simple.find({attributes: {$all: [
     {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;colors&quot;, &quot;value&quot;: &quot;red&quot;}},
     {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;model&quot;, &quot;value&quot;: &quot;polo&quot;}},
     {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;sizes&quot;, &quot;value&quot;: {&quot;$in&quot;: [&quot;M&quot;, &quot;L&quot;]}}}
 ]}, category: &apos;tshirts&apos;})

 {&quot;name&quot; : &quot;Silk tshirt&quot;, /* ... */}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Get laptops with CPU greater that 2000 and screen larger that 13&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt; db.catalogue_simple.find({attributes: {$all: [
     {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;speed&quot;, &quot;value&quot;: {&quot;$gt&quot;: 2000}}},
     {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;screen&quot;, &quot;value&quot;: {&quot;$gt&quot;: 13}}}
 ]}, category: &apos;notebook&apos;})

 {&quot;name&quot; : &quot;MacBook Pro&quot;, /* ... */}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Get laptops with CPU frequency equal to 2200 or 2400&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt; db.catalogue_simple.find({attributes: {$all: [
     {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;speed&quot;, &quot;value&quot;: {&quot;$in&quot;: [2200, 2400]}}},
 ]}, category: &apos;notebook&apos;})

 {&quot;name&quot; : &quot;MacBook Pro&quot;, /* ... */}, {&quot;name&quot; : &quot;ATIV Book 9&quot;, /* ... */}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;indexes-mongodb&quot;&gt;Indexes (MongoDB)&lt;/h3&gt;

&lt;p&gt;We can create &lt;a href=&quot;http://docs.mongodb.org/manual/core/index-multikey/#index-arrays-with-embedded-documents&quot;&gt;multikey index&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; db.catalogue_simple.ensureIndex({&quot;attributes.name&quot; : 1, &quot;attributes.value&quot; : 1})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For fairness, create index on category (django automatically creates it for ForeignKey fields)&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; db.catalogue_simple.ensureIndex({&quot;category&quot;: 1})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Keep in mind, that MongoDB will use index only for first filter from $all operator. Although MongoDB docs tells about &lt;a href=&quot;http://docs.mongodb.org/manual/core/index-intersection/&quot;&gt;index intersection&lt;/a&gt;, looks like it can’t be used in our case.&lt;/p&gt;

&lt;p&gt;Illustrative example. Imagine, that in database there is only 1 product with size “XXXS” and a lot of products with size “M”.&lt;/p&gt;

&lt;p&gt;We want products, that have both sizes “XXXS” and “M”.&lt;/p&gt;

&lt;p&gt;Check out the query:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; db.catalogue_simple.find({attributes: {$all: [
    {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;sizes&quot;, &quot;value&quot;: &quot;M&quot;}},
    {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;sizes&quot;, &quot;value&quot;: &quot;XXXS&quot;}},
]}, category: &apos;tshirts&apos;})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;MongoDB will apply index only to “M” value. As a result, many documents will be scanned:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;nReturned&quot; : 1,
&quot;executionTimeMillis&quot; : 1902,
&quot;totalKeysExamined&quot; : 249934,
&quot;totalDocsExamined&quot; : 249934,
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But if we place size “XXXS” to the first position:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; db.catalogue_simple.find({attributes: {$all: [
    {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;sizes&quot;, &quot;value&quot;: &quot;XXXS&quot;}},
    {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;sizes&quot;, &quot;value&quot;: &quot;M&quot;}},
]}, category: &apos;tshirts&apos;})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;only one document will be scanned:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;nReturned&quot; : 1,
&quot;executionTimeMillis&quot; : 0,
&quot;totalKeysExamined&quot; : 1,
&quot;totalDocsExamined&quot; : 1,
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The moral is, put filter with highest selectivity to the first place. Unfortunately, we don’t always have such information.&lt;/p&gt;

&lt;h4 id=&quot;test-data-mongodb&quot;&gt;Test data (MongoDB)&lt;/h4&gt;

&lt;p&gt;Test data is exactly the same as in PostgreSQL (only structure is different): 4 categories, 250 000 products in each category, 1 000 000 in total.&lt;/p&gt;

&lt;h4 id=&quot;queries-and-indexes-mongodb&quot;&gt;Queries and indexes (MongoDB)&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Get t-shirts with both ‘M’ and ‘L’ sizes:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt; db.catalogue_simple.find({attributes: {$all: [
     {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;sizes&quot;, &quot;value&quot;: &quot;M&quot;}},
     {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;sizes&quot;, &quot;value&quot;: &quot;L&quot;}}
 ]}, category: &apos;tshirts&apos;})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Without multikey index on attributes query time is 706 ms, category index is used.&lt;/p&gt;

    &lt;p&gt;Output of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.explain(&apos;executionStats&apos;)&lt;/code&gt;:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &quot;winningPlan&quot; : {
     // ...
     &quot;indexName&quot; : &quot;category_1&quot;,
 }
 &quot;executionStats&quot; : {
     &quot;nReturned&quot; : 66412,
     &quot;executionTimeMillis&quot; : 706,
     &quot;totalKeysExamined&quot; : 250001,
     &quot;totalDocsExamined&quot; : 250001,
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;After creation of multikey index on attributes field nothing changes, as MongoDB optimizer decides, that category index is better (i suppose because of low selectivity of attributes query).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Get t-shirts with both ‘M’ and ‘L’ sizes, both white and yellow colors, with poetry on it (model=poet):&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt; db.catalogue_simple.find({attributes: {$all: [
     {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;sizes&quot;, &quot;value&quot;: &quot;M&quot;}},
     {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;sizes&quot;, &quot;value&quot;: &quot;L&quot;}},
     {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;colors&quot;, &quot;value&quot;: &quot;white&quot;}},
     {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;colors&quot;, &quot;value&quot;: &quot;yellow&quot;}},
     {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;model&quot;, &quot;value&quot;: &quot;poet&quot;}},
 ]}, category: &apos;tshirts&apos;})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Behaviour is similar to first query.&lt;/p&gt;

    &lt;p&gt;Behaviour can change, if we put higher selective filter to the first place. In test data color is more selective, that size. So, make it first:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt; db.catalogue_simple.find({attributes: {$all: [
         {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;colors&quot;, &quot;value&quot;: &quot;white&quot;}},
         {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;sizes&quot;, &quot;value&quot;: &quot;M&quot;}},
         {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;sizes&quot;, &quot;value&quot;: &quot;L&quot;}},
         {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;colors&quot;, &quot;value&quot;: &quot;yellow&quot;}},
         {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;model&quot;, &quot;value&quot;: &quot;poet&quot;}},
     ]}, category: &apos;tshirts&apos;}).explain(&apos;executionStats&apos;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Explain:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &quot;winningPlan&quot; : {
     // ...
     &quot;indexName&quot; : &quot;attributes.name_1_attributes.value_1&quot;,
 }
 &quot;executionStats&quot; : {
     &quot;nReturned&quot; : 3737,
     &quot;executionTimeMillis&quot; : 658,
     &quot;totalKeysExamined&quot; : 124902,
     &quot;totalDocsExamined&quot; : 124902,
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Query time - 658 ms.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Get laptops with CPU frequency 2400 and screen size 12.2&lt;/p&gt;

    &lt;p&gt;Same as points 1 and 2.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Get t-shirts with red color, model polo and with size ‘M’ or ‘L’&lt;/p&gt;

    &lt;p&gt;Same as points 1 and 2.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Get laptops with CPU greater that 2000 and screen larger that 13&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt; db.catalogue_simple.find({attributes: {$all: [
     {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;speed&quot;, &quot;value&quot;: {&quot;$gt&quot;: 2000}}},
     {&quot;$elemMatch&quot;: {&quot;name&quot;: &quot;screen&quot;, &quot;value&quot;: {&quot;$gt&quot;: 13}}}
 ]}, category: &apos;notebook&apos;}).explain(&apos;executionStats&apos;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Remember, PostgreSQL can’t use GIN index in such a query.
 But multikey index in current data structure can work.&lt;/p&gt;

    &lt;p&gt;We have good selectivity for speed in this request:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &quot;winningPlan&quot; : {
     // ...
     &quot;indexName&quot; : &quot;attributes.name_1_attributes.value_1&quot;,
 }
 &quot;executionStats&quot; : {
     &quot;nReturned&quot; : 10536,
     &quot;executionTimeMillis&quot; : 160,
     &quot;totalKeysExamined&quot; : 62472,
     &quot;totalDocsExamined&quot; : 62472,
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Get laptops with CPU frequency equal to 2200 or 2400&lt;/p&gt;

    &lt;p&gt;Same as previous points.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;resume&quot;&gt;Resume&lt;/h3&gt;

&lt;p&gt;PostgreSQL 9.4 introduced new type jsonb. It can be used effectively in queries. And we can use single index to query on different json keys. Not all operations are available (for example greater than/less than, we need a separate index on particular key), but anyway this is incredibly useful for a wide range of tasks. And starting from Django 1.9 this functionality is available out of the box.&lt;/p&gt;

&lt;p&gt;MongoDB doesn’t have analogue to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@&amp;gt;&lt;/code&gt; operator. We can adopt the structure of data to make similar queries, using one index. But it is less effective, than in PostgreSQL. Because index is applied only to one key. On the other hand MongoDB support higher range of operations when filtering on &lt;em&gt;any&lt;/em&gt; &lt;em&gt;one&lt;/em&gt; key, using single index.&lt;/p&gt;

&lt;p&gt;I really like JSON in PostgreSQL, it can be used in many tasks. And we have all advantages of SQL: joins and transactions, that are not presented in MongoDB. And now it is supported by Django ORM.&lt;/p&gt;

&lt;h3 id=&quot;useful-links&quot;&gt;Useful links&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.djangoproject.com/en/dev/ref/contrib/postgres/fields/#jsonfield&quot;&gt;Django JSONField docs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.postgresql.org/docs/9.4/static/datatype-json.html&quot;&gt;PostgreSQL JSON type docs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.postgresql.org/docs/9.4/static/functions-json.html&quot;&gt;PostgreSQL JSON functions and operations docs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=78A2gJBgL9g&quot;&gt;Christophe Pettus - PostgreSQL Proficiency for Python People - PyCon 2015 (video)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://thebuild.com/presentations/json2015-pgconfus.pdf&quot;&gt;PostgreSQL and JSON: 2015. Christophe Pettus. PGConf US 2015 (slides)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://events.yandex.ru/lib/talks/1707/&quot;&gt;Asya Kamsky, Yandex 2014 MongoDB meetup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="database" /><category term="django" /><category term="mongodb" /><category term="postgresql" /><category term="sql" /><summary type="html">New JSONField will be added in Django 1.9, it can be used with PostgreSQL &amp;gt;= 9.4. Let’s try to work with it and find out, in what situations it can be useful.</summary></entry><entry><title type="html">OAuth and django rest framework</title><link href="https://st4lk.github.io/en/blog/2015/07/18/oauth-and-django-rest-framework.html" rel="alternate" type="text/html" title="OAuth and django rest framework" /><published>2015-07-18T18:19:43+00:00</published><updated>2015-07-18T18:19:43+00:00</updated><id>https://st4lk.github.io/en/blog/2015/07/18/oauth-and-django-rest-framework</id><content type="html" xml:base="https://st4lk.github.io/en/blog/2015/07/18/oauth-and-django-rest-framework.html">&lt;p&gt;&lt;a class=&quot;github-button&quot; href=&quot;https://github.com/st4lk/django-rest-social-auth&quot; data-color-scheme=&quot;no-preference: light; light: light; dark: dark;&quot; data-size=&quot;large&quot; data-show-count=&quot;true&quot; aria-label=&quot;Star st4lk/django-rest-social-auth on GitHub&quot;&gt;Star&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/en/blog/2015/07/18/oauth-and-django-rest-framework.html&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/6615/85893628.c69/0_18e574_16d44873_XL.png&quot; alt=&quot;OAuth and django rest framework&quot; title=&quot;OAuth and django rest framework&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a well known topic, but i can’t find the existing solution that will fully satisfy me. So i write it by myself :).&lt;/p&gt;

&lt;p&gt;Assume we have a “single page” web site, that is talking with backend via REST API. Client side can be written with ember, angularjs or some like this. Backend - django rest framework (DRF). We’ve got a task - add social login  (OAuth protocol).&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;How it will look like in case of simple “old-school” site? User press login, social network page is opening. Person confirms the access, resource redirects back to our web page, providing special code in redirected url. Using this code we do the login. For such process there are several existing libraries, my favourite is  &lt;a href=&quot;https://github.com/omab/python-social-auth&quot;&gt;python-social-auth&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In case of single page site we can do the same. But, often development of frontend and backend are separated. Moreover, API can run on different subdomen, so backend can’t handle redirected url.&lt;/p&gt;

&lt;p&gt;So instead following scheme looks the most optimal. User press login, new popup window is opened with social network confirmation. User says yes, popup gets parameters from social resource, propagates them back to parent window (our frontend application). Finally, frontend sends these parameters to backend to finish login process.&lt;/p&gt;

&lt;p&gt;Thus backend developer must implement API resource, that will take parameters from OAuth provider as input, and respond with user details as output, including session information (session id in cookies or token). Frontend will call this resource after receiving corresponding data from social network (OAuth provider).&lt;/p&gt;

&lt;p&gt;The question is, what data it is better to send to that resource? Let’s take OAuth 2.0. We have two choices: request token or access token. In first case server will need to exchange request token to access token by itself. In second case access token is already given (it was acquired by frontend). At first sight, the second approach is easier. But it has several disadvantages.&lt;/p&gt;

&lt;p&gt;First, access token acquired by frontend have very short lifetime (couple of hours). We could save the access token in database for later usage (for example write something on user’s wall). With short lifetime it will be not trivial. Second, access token will be sent by frontend to our server. It is a potential security issue. If our API is not running on HTTPS, then access token can be easily eavesdropped. This token is enough to make valid requests.&lt;/p&gt;

&lt;p&gt;After searching for existing solutions, i’ve found &lt;a href=&quot;https://github.com/Tivix/django-rest-auth&quot;&gt;django-rest-auth&lt;/a&gt;. 
It suggest resource, that takes access token as input. But there is no resource, that will take request token as input and do the rest of the work by itself. Also this package is built on top of &lt;a href=&quot;https://github.com/pennersr/django-allauth&quot;&gt;django-allauth&lt;/a&gt;, which is not my favourite.&lt;/p&gt;

&lt;p&gt;After summing all the things being said, i decided to write my own tool that will link django-rest-framework, python-social-auth and login resource with request token as input.&lt;/p&gt;

&lt;p&gt;Here it is: &lt;a href=&quot;https://github.com/st4lk/django-rest-social-auth&quot;&gt;&lt;strong&gt;django-rest-social-auth&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Details can be found in readme. This package is very small but useful (to my mind of course). All the customisation from python-social-auth is still available.&lt;/p&gt;

&lt;p&gt;Live working example - site &lt;a href=&quot;http://www.woobie.ru/&quot;&gt;woobie.ru&lt;/a&gt;, where this package is used.&lt;/p&gt;</content><author><name></name></author><category term="api" /><category term="django" /><category term="oauth" /><summary type="html">Star This is a well known topic, but i can’t find the existing solution that will fully satisfy me. So i write it by myself :). Assume we have a “single page” web site, that is talking with backend via REST API. Client side can be written with ember, angularjs or some like this. Backend - django rest framework (DRF). We’ve got a task - add social login (OAuth protocol).</summary></entry><entry><title type="html">Tornado and pgettext</title><link href="https://st4lk.github.io/en/blog/2015/06/05/tornado-and-pgettext.html" rel="alternate" type="text/html" title="Tornado and pgettext" /><published>2015-06-05T18:19:43+00:00</published><updated>2015-06-05T18:19:43+00:00</updated><id>https://st4lk.github.io/en/blog/2015/06/05/tornado-and-pgettext</id><content type="html" xml:base="https://st4lk.github.io/en/blog/2015/06/05/tornado-and-pgettext.html">&lt;p&gt;&lt;a href=&quot;/en/blog/2015/06/05/tornado-and-pgettext.html&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/15560/85893628.c68/0_18816d_971d97b2_L.png&quot; alt=&quot;Tornado and pgettext&quot; title=&quot;Tornado and pgettext&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Recently (26.05.2015) new &lt;a href=&quot;http://www.tornadoweb.org/en/latest/releases/v4.2.0.html&quot;&gt;tornado 4.2&lt;/a&gt; was released. It contains different updates, the most valuable i suppose are modules tornado.locks and tornado.queues. They migrated from package Toro, look detailed explanation in Jesse Jiryu Davis &lt;a href=&quot;http://emptysqua.re/blog/tornado-locks-and-queues/&quot;&gt;post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here i want to tell about another helpful function, that was added with my help - &lt;a href=&quot;http://www.tornadoweb.org/en/latest/locale.html#tornado.locale.GettextLocale.pgettext&quot;&gt;pgettext&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;It can be useful, when you are creating the translation for ambiguous strings. Let’s say we have word “bat” and we want to show it either in english, either in russian, depending on user’s preferred language. Special translate functions can be used to implement it.&lt;/p&gt;

&lt;p&gt;For example in html template:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;{{_(&quot;Bat&quot;)}}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next we’ll use util xgettext to create translation file, that will contain something like this (details of i18n process can be found &lt;a href=&quot;/en/i18n/async/tornado/2015/01/31/tornado-internationalization-and-localization.html&quot;&gt;here&lt;/a&gt;)&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msgid &quot;Bat&quot;
msgstr &quot;&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So now in place of empty string we need to put a translation. But what does the word “Bat” mean? Is it a mammal or a club? It will be very hard for translator to understand exact meaning without knowing the context.&lt;/p&gt;

&lt;p&gt;That’s where function pgettext will help, it accept context as the first argument:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;{{ pgettext(&quot;mammal&quot;, &quot;Bat&quot;) }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To generate translations add following options to xgettext:&lt;/p&gt;

&lt;p&gt;–keyword=pgettext:1c,2 –keyword=pgettext:1c,2,3&lt;/p&gt;

&lt;p&gt;After that translation will look like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msgctxt &quot;mammal&quot;
msgid &quot;Bat&quot;
msgstr &quot;&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now it is clear what was meant and we can translate definitely:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msgctxt &quot;mammal&quot;
msgid &quot;Bat&quot;
msgstr &quot;Летучая мышь&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Plural forms are also supported:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;{{ pgettext(&quot;mammal&quot;, &quot;Bat&quot;, &quot;Bats&quot;, 2) }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Python code example:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HomeHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tornado&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RequestHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;home.html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;locale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pgettext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mammal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Bat&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Bats&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Plural form translations:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msgctxt &quot;mammal&quot;
msgid &quot;Bat&quot;
msgid_plural &quot;Bats&quot;
msgstr[0] &quot;Летучая мышь&quot;
msgstr[1] &quot;Летучие мыши&quot;
msgstr[2] &quot;Летучих мышей&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="i18n" /><category term="tornado" /><summary type="html">Recently (26.05.2015) new tornado 4.2 was released. It contains different updates, the most valuable i suppose are modules tornado.locks and tornado.queues. They migrated from package Toro, look detailed explanation in Jesse Jiryu Davis post. Here i want to tell about another helpful function, that was added with my help - pgettext.</summary></entry><entry><title type="html">OAuth step by step</title><link href="https://st4lk.github.io/en/blog/2015/05/16/oauth-step-step.html" rel="alternate" type="text/html" title="OAuth step by step" /><published>2015-05-16T18:19:43+00:00</published><updated>2015-05-16T18:19:43+00:00</updated><id>https://st4lk.github.io/en/blog/2015/05/16/oauth-step-step</id><content type="html" xml:base="https://st4lk.github.io/en/blog/2015/05/16/oauth-step-step.html">&lt;div class=&quot;gist-wrp&quot;&gt;&lt;div class=&quot;github-btn&quot; id=&quot;github-btn&quot; style=&quot;float:right;&quot;&gt; &lt;a class=&quot;gh-btn&quot; id=&quot;gh-btn&quot; href=&quot;https://gist.github.com/st4lk/4b71b72007a666435f81&quot; target=&quot;_blank&quot;&gt; &lt;span class=&quot;gh-ico&quot;&gt;&lt;/span&gt; &lt;span class=&quot;gh-text&quot; id=&quot;gh-text&quot;&gt;Gist&lt;/span&gt; &lt;/a&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/en/blog/2015/05/16/oauth-step-step.html&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/9819/85893628.c68/0_185253_82b5fefa_M.png&quot; alt=&quot;OAuth step by step&quot; title=&quot;OAuth step by step&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OAuth protocol has two versions: 1.0 and 2.0.&lt;/p&gt;

&lt;p&gt;Most of services today use version 2.0, i suppose because it is easier to implement.
Also, 2.0 can be realized in standalone applications (those, that don’t have a server).&lt;/p&gt;

&lt;p&gt;To understand the protocols very useful to have a look at their realisation.
Here i’ll show several scripts that talk to OAuth providers of different versions.
Scripts will implement client application functionality.
Only standard python libraries are used. This help to overview the OAuth protocol - everything is on single screen and familiar. Of course, for production application we must use third party oauth libs, they handle many special cases and so on. Purpose of these scripts is just understanding of the protocol and nothing else.
It is often hard to keep the protocol flow in production-ready library, because it is splitted in many modules, some other packages are used. And the full vision is slipping out of sight.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Let’s refresh in mind some theory first.&lt;/p&gt;

&lt;p&gt;For sure you know, that there are two objectives: &lt;em&gt;authentication&lt;/em&gt; and &lt;em&gt;authoriztion&lt;/em&gt;.
They look very similar, but a little different in fact.
So, just to remember:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;authentication - process of identifying someone.&lt;/p&gt;

    &lt;p&gt;We need to know, does this person really an owner of google account with exact id?
  This information is enough for us. Just login him and that’s it, we don’t need additional information or do something on behalf of the owner of account.&lt;/p&gt;

    &lt;p&gt;Such work is done for example by OpenID protocol (although google suggest to to use &lt;a href=&quot;https://developers.google.com/identity/sign-in/auth-migration#sign-in&quot;&gt;another means&lt;/a&gt;, OpenID - &lt;a href=&quot;https://developers.google.com/identity/protocols/OpenID2&quot;&gt;deprecated&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;authorization - process of acquiring rights to do something.&lt;/p&gt;

    &lt;p&gt;Authorization already includes authentication, but gives more power.
  For example, not just identify some person, but also get his email and maybe post a message on his wall.&lt;/p&gt;

    &lt;p&gt;That is what OAuth protocol for.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To remember i use word “author”. If objective contains “author” - we are talking about permissions (authority). Otherwise just an identification.&lt;/p&gt;

&lt;h3 id=&quot;oauth-10&quot;&gt;OAuth 1.0&lt;/h3&gt;

&lt;p&gt;Specification: &lt;a href=&quot;http://tools.ietf.org/html/rfc5849&quot;&gt;http://tools.ietf.org/html/rfc5849&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The main part to remember about OAuth 1.0 - it signs &lt;strong&gt;all&lt;/strong&gt; requests with secret key.
Secret key must be kept in safe place, the only one is server.
Protocol provides fully security, even if https is not used.
By saying “security” i mean the following: once the request was eavesdropped, the hacker can’t create new valid request.
Of course he can get the data being transmitted, to hide the data we still need the https.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/st4lk/314e181faaea7d671d0e.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;oauth-10-less-legged-2-legged-1-legged-0-legged&quot;&gt;OAuth 1.0 less-legged (2-legged, 1-legged, 0-legged)&lt;/h3&gt;

&lt;p&gt;It is a modification of OAuth 1.0, were user is not interacted in process.
Formally speaking, it is not an OAuth anymore, as specification doesn’t describe such modification.
Just same means are used.
In this case client application is acting as a user. It can request either public resources, either his own resources (even private).&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/st4lk/719729c03cf0314179b4.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;oauth-20-with-server&quot;&gt;OAuth 2.0 with server&lt;/h3&gt;

&lt;p&gt;Specification: &lt;a href=&quot;http://tools.ietf.org/html/rfc6749&quot;&gt;http://tools.ietf.org/html/rfc6749&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Interesting, that in title of OAuth 2.0 specification it is called “framework”.
Whereas in title of OAuth 1.0 &lt;a href=&quot;http://tools.ietf.org/html/rfc5849&quot;&gt;specification&lt;/a&gt; it is called protocol.&lt;/p&gt;

&lt;p&gt;To get full security with OAuth 2.0, https is mandatory (service provider &lt;strong&gt;must&lt;/strong&gt; use https, for example facebook).
Once the access_token is acquired, secret key is not needed.
So if someone will steal the access_token, he can make a valid request. That is why https is needed, to hide access_token.
Also, during acquiring the access_token, secret key is transmitted by HTTP as is.&lt;/p&gt;

&lt;p&gt;access_token always have limited time to live.&lt;/p&gt;

&lt;p&gt;Because of all said above (and something else), one of creators of OAuth 1.0 protocol has left the OAuth 2.0 team, as 2.0 is very easy to implement insecurely.
For details follow this &lt;a href=&quot;http://hueniverse.com/2012/07/26/oauth-2-0-and-the-road-to-hell/&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is a sequence of steps to get OAuth 2.0 access_token, if you have a server.
Server use secret key to get an access_token. Pay attention, no crypto library is used.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/st4lk/4b71b72007a666435f81.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;oauth-20-without-server&quot;&gt;OAuth 2.0 without server&lt;/h3&gt;

&lt;p&gt;OAuth 2.0 client can be implemented without server. In that case we also get an access_token, but we don’t need to know the secret key at all! Usually such access_token have a small time to live (1-2 hours), whereas time to live of access_token, acquired by server, is longer (can be several tens of days).&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/st4lk/af1db97e36897b918f22.js&quot;&gt;&lt;/script&gt;</content><author><name></name></author><category term="api" /><category term="oauth" /><category term="security" /><summary type="html">Gist OAuth protocol has two versions: 1.0 and 2.0. Most of services today use version 2.0, i suppose because it is easier to implement. Also, 2.0 can be realized in standalone applications (those, that don’t have a server). To understand the protocols very useful to have a look at their realisation. Here i’ll show several scripts that talk to OAuth providers of different versions. Scripts will implement client application functionality. Only standard python libraries are used. This help to overview the OAuth protocol - everything is on single screen and familiar. Of course, for production application we must use third party oauth libs, they handle many special cases and so on. Purpose of these scripts is just understanding of the protocol and nothing else. It is often hard to keep the protocol flow in production-ready library, because it is splitted in many modules, some other packages are used. And the full vision is slipping out of sight.</summary></entry><entry><title type="html">Python tips &amp;amp; tricks</title><link href="https://st4lk.github.io/en/blog/2015/04/30/base-python-tips-tricks.html" rel="alternate" type="text/html" title="Python tips &amp;amp; tricks" /><published>2015-04-30T18:19:43+00:00</published><updated>2015-04-30T18:19:43+00:00</updated><id>https://st4lk.github.io/en/blog/2015/04/30/base-python-tips-tricks</id><content type="html" xml:base="https://st4lk.github.io/en/blog/2015/04/30/base-python-tips-tricks.html">&lt;p&gt;&lt;a href=&quot;/en/blog/2015/04/30/base-python-tips-tricks.html&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/9067/85893628.c68/0_181e3c_92d918ca_M.jpg&quot; alt=&quot;Python tips &amp;amp; tricks&quot; title=&quot;Python tips &amp;amp; tricks&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Recently i’ve read the book &lt;a href=&quot;http://shop.oreilly.com/product/0636920028154.do&quot;&gt;Learning Python, 5th Edition by Mark Lutz&lt;/a&gt;.
Here is a list of most interesting insights for me.&lt;/p&gt;

&lt;!--more--&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;set generation:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  {x for x in [1,2]}
  set(x for x in [1,2])
  assert set(x for x in [1,2]) == {x for x in [1,2]}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;dict generation:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  {x:x**2 for x in [1,2]}
  dict((x, x**2) for x in [1,2])
  assert {x:x**2 for x in [1,2]} == dict((x, x**2) for x in [1,2])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;division of integers&lt;/p&gt;

    &lt;p&gt;In python 3 division of integers returns float&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; 1 / 2
  0.5
  &amp;gt;&amp;gt;&amp;gt; - 1 / 2
  -0.5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;In python 2 division of integers - round to floor, it is not truncate&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; 1 / 2    # 0.5 round floor -&amp;gt; 0
  0
  &amp;gt;&amp;gt;&amp;gt; - 1 / 2  # -0.5 round floor -&amp;gt; -1 (not 0)
  -1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;In python 2 and 3 round to floor integer division&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; 1 // 2
  0
  &amp;gt;&amp;gt;&amp;gt; - 1 // 2
  -1
  &amp;gt;&amp;gt;&amp;gt; 13 // 2.0
  6.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is&lt;/code&gt; - check, that variables point to the same address, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;==&lt;/code&gt; - check, that variables have same values&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;python 3: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[1, &apos;spam&apos;].sort()&lt;/code&gt; raises exception (different types)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;python 3: dict().keys() returns iterator (view object, linked to dict). It is set-like object, we can apply set operations to it (union and so on)&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; dict(a=1, b=2).keys()
  dict_keys([&apos;b&apos;, &apos;a&apos;])
  &amp;gt;&amp;gt;&amp;gt; dict(a=1, b=2).keys() | {&apos;c&apos;, &apos;d&apos;}
  {&apos;b&apos;, &apos;d&apos;, &apos;a&apos;, &apos;c&apos;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;frozenset - immutable set, hashable, can be used as key in dict&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; fz = frozenset([1,2])
  &amp;gt;&amp;gt;&amp;gt; fz.add(3)
  AttributeError: &apos;frozenset&apos; object has no attribute &apos;add&apos;
  &amp;gt;&amp;gt;&amp;gt; {fz: 5}
  {frozenset([1, 2]): 5}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;list support compare operators: ==, &amp;lt;, &amp;gt;, &amp;lt;=, &amp;gt;=. List compare is similiar to string compare. In py3 all objects must be the same type&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; [1, 2] == [1, 2]
  True
  &amp;gt;&amp;gt;&amp;gt; [2, 2] &amp;gt; [1, 2]
  True
  &amp;gt;&amp;gt;&amp;gt; [1] &amp;gt; [&apos;sh&apos;]  # python2
  False
  &amp;gt;&amp;gt;&amp;gt; [1] &amp;gt; [&apos;sh&apos;]  # python3
  TypeError: unorderable types: int() &amp;gt; str()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;dict compare&lt;/p&gt;

    &lt;p&gt;python 2 and 3&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; dict(a=1) == dict(a=1)
  True
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;python 2 only&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; dict(a=3) &amp;gt; dict(a=2)
  True
  &amp;gt;&amp;gt;&amp;gt; dict(a=3) &amp;gt; dict(a=2, b=1)
  False
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;list + string, list + tuple is forbidden, but list += string is allowed&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; L = []
  &amp;gt;&amp;gt;&amp;gt; L + &apos;spam&apos;
  TypeError: can only concatenate list (not &quot;str&quot;) to list

  &amp;gt;&amp;gt;&amp;gt; L = []
  &amp;gt;&amp;gt;&amp;gt; L += &apos;spam&apos;
  &amp;gt;&amp;gt;&amp;gt; L
  [&apos;s&apos;, &apos;p&apos;, &apos;a&apos;, &apos;m&apos;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;L += a is faster than L = L + a.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;L += [1,2] is in place modification! (new list is not created)&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; L = []
  &amp;gt;&amp;gt;&amp;gt; id(L)
  4368997048
  &amp;gt;&amp;gt;&amp;gt; L += [1,2]
  &amp;gt;&amp;gt;&amp;gt; id(L)
  4368997048
  &amp;gt;&amp;gt;&amp;gt; L = L + [1,2]
  &amp;gt;&amp;gt;&amp;gt; id(L)
  4368996976
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;‘spam’[0][0][0] can last forever, every time we’ll get single-char-string ‘s’&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;variables unpack in python 3&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; a, *b = &apos;spam&apos;
  &amp;gt;&amp;gt;&amp;gt; a
  &apos;s&apos;
  &amp;gt;&amp;gt;&amp;gt; b
  [&apos;p&apos;, &apos;a&apos;, &apos;m&apos;]

  &amp;gt;&amp;gt;&amp;gt; *a, b = &apos;spam&apos;
  &amp;gt;&amp;gt;&amp;gt; a
  [&apos;s&apos;, &apos;p&apos;, &apos;a&apos;]
  &amp;gt;&amp;gt;&amp;gt; b
  &apos;m&apos;

  &amp;gt;&amp;gt;&amp;gt; a, *b, c = &apos;spam&apos;
  &amp;gt;&amp;gt;&amp;gt; a
  &apos;s&apos;
  &amp;gt;&amp;gt;&amp;gt; b
  [&apos;p&apos;, &apos;a&apos;]
  &amp;gt;&amp;gt;&amp;gt; c
  &apos;m&apos;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;python 2: True = 0, but not in python 3&lt;/p&gt;

    &lt;p&gt;python 2&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; True = 0
  &amp;gt;&amp;gt;&amp;gt; True
  0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;python 3&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; True = 0
  SyntaxError: can&apos;t assign to keyword
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;sys.stdout = open(‘temp.txt’, ‘w’) - all prints goes to file temp.txt&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;and&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;or&lt;/code&gt; returns object, not True/False&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;while&lt;/code&gt; has &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;else&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;python 3: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;...&lt;/code&gt; is the same as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pass&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;reversed works with lists, not generator&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; reversed([1,2,3])
  &amp;lt;list_reverseiterator object at 0x10127c550&amp;gt;
  &amp;gt;&amp;gt;&amp;gt; reversed((x for x in [1,2,3]))
  TypeError: argument to reversed() must be a sequence
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;zip iterates until the smallest sequence&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; [x for x in zip([1,2,3], [4,5])]
  [(1, 4), (2, 5)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;python 2: map(None, s1, s2) is the same as zip, but iterates until longest sequence. Insert None for elements without pair.&lt;/p&gt;

    &lt;p&gt;python 2&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; map(None, [1,2,3], [4,5])
  [(1, 4), (2, 5), (3, None)]
  &amp;gt;&amp;gt;&amp;gt; map(None, [1,2], [4,5,6])
  [(1, 4), (2, 5), (None, 6)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;python 3&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; list(map(None, [1,2,3], [4,5]))
  TypeError: &apos;NoneType&apos; object is not callable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;map can take more than one iterators (similiar to zip)&lt;/p&gt;

    &lt;p&gt;python 2&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; map(lambda x, y: (x, y), [1,2], [3,4])
  [(1, 3), (2, 4)]
  &amp;gt;&amp;gt;&amp;gt; map(lambda x, y: (x, y), [1,2], [3,4,5])
  [(1, 3), (2, 4), (None, 5)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;python 3&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; list(map(lambda x, y: (x, y), [1,2], [3,4]))
  [(1, 3), (2, 4)]
  &amp;gt;&amp;gt;&amp;gt; list(map(lambda x, y: (x, y), [1,2], [3,4,5]))
  [(1, 3), (2, 4)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;nested list comprehensions&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; [x+y for x in &apos;abc&apos; for y in &apos;lmn&apos;]
  [&apos;al&apos;, &apos;am&apos;, &apos;an&apos;, &apos;bl&apos;, &apos;bm&apos;, &apos;bn&apos;, &apos;cl&apos;, &apos;cm&apos;, &apos;cn&apos;]

  # flat list of lists
  &amp;gt;&amp;gt;&amp;gt; csv = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
  &amp;gt;&amp;gt;&amp;gt; [col for row in csv for col in row]
  [1, 2, 3, 4, 5, 6, 7, 8, 9]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;sorted returns list (not generator) in py2 and py3&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; sorted(x for x in [2,1,3])
  [1, 2, 3]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;*args accept any iterator, not only list&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;unzip: zip(*zip(a,b))&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; zip(*zip([1,2],[3,4]))
  [(1, 2), (3, 4)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;py3: map returns generator, it can be iterated only once&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; m = map(lambda x: x, [1,2,3])
  &amp;gt;&amp;gt;&amp;gt; [x for x in m]
  [1, 2, 3]
  &amp;gt;&amp;gt;&amp;gt; [x for x in m]
  []
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;py3: range is not a simple generator, it support len() and index access&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; r = range(10)
  &amp;gt;&amp;gt;&amp;gt; r
  range(0, 10)
  &amp;gt;&amp;gt;&amp;gt; len(r)
  10
  &amp;gt;&amp;gt;&amp;gt; r[3]
  3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;generator allows only single scan&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;cycle import works! But only for import without from&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;try has else, will be execution when no exception happened&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with&lt;/code&gt; similar to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;finally&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;except (name1, name2) - orders from top to bottom, from left to right&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;except Exception:&lt;/code&gt; vs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;except:&lt;/code&gt; - first doesn’t catch system errors (KeyboardInterrupt, SystemExit, GeneratorExit например)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;set().remove(x) - removes x or KeyError, set().discard(x) - removes x or nothing&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;py3.3+ accept u””, U”” for backwards compatibility with py2&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;default encoding is in sys module sys.getdefaultencoding()&lt;/p&gt;

    &lt;p&gt;python 2&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; sys.getdefaultencoding()
  &apos;ascii&apos;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;python 3&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; sys.getdefaultencoding()
  &apos;utf-8&apos;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[c for c in sorted([1,2,3], key=lambda c: -c)] - variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c&lt;/code&gt; will not conflict here&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;in py2 variable inside comprehension can change outer variables and also accessible after, in py3 - not&lt;/p&gt;

    &lt;p&gt;python 2&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; x = 1
  &amp;gt;&amp;gt;&amp;gt; [x for x in range(3)]
  [0, 1, 2]
  &amp;gt;&amp;gt;&amp;gt; x
  2
  # creates new var
  &amp;gt;&amp;gt;&amp;gt; [y for y in range(3)]
  [0, 1, 2]
  &amp;gt;&amp;gt;&amp;gt; y
  2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;python 3&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; x = 1
  &amp;gt;&amp;gt;&amp;gt; [x for x in range(3)]
  &amp;gt;&amp;gt;&amp;gt; x
  1
  # no new var
  &amp;gt;&amp;gt;&amp;gt; [y for y in range(3)]
  [0, 1, 2]
  &amp;gt;&amp;gt;&amp;gt; y
  NameError: name &apos;y&apos; is not defined
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;py3 has nonlocal statement. It is used to reference the variable in outer def block (in py2 it is not possible to access such variable)&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  def f():
      x = 2  # local for f
      def g():
          nonlocal x  # python3 only
          x = 3  # local for g
      g()
      print(x)
  &amp;gt;&amp;gt;&amp;gt; f()  # python3 only
  3
  &amp;gt;&amp;gt;&amp;gt; f()  # with commented nonlocal
  2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;LEGB rule (local, enclosing, global, builtin) or LNGB (N=nonlocal) - order of variable search in python&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;py3 exception variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;as name&lt;/code&gt; is removed after block execution (even if variable was declared before try block)&lt;/p&gt;

    &lt;p&gt;python 2&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; x = 1
  &amp;gt;&amp;gt;&amp;gt; try:
  ...     1/0
  ... except Exception as x:
  ...     pass
  &amp;gt;&amp;gt;&amp;gt; x
  ZeroDivisionError(&apos;integer division or modulo by zero&apos;,)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;python 3&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; x = 1
  &amp;gt;&amp;gt;&amp;gt; try:
  ...     1/0
  ... except Exception as x:
  ...     pass
  &amp;gt;&amp;gt;&amp;gt; x
  NameError: name &apos;x&apos; is not defined
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;override builtin and undo override&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; open = 99
  &amp;gt;&amp;gt;&amp;gt; open
  99
  &amp;gt;&amp;gt;&amp;gt; del open
  &amp;gt;&amp;gt;&amp;gt; open
  &amp;lt;built-in function open&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;py2 fun: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__builtins__.True = False&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;lambda can take default arguments&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;nonlocal functionality can be replaced by mutable object or function attribute&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  def f():
      x = [1]
      def g():
          print x[0]
          x.append(2)
      g()
      print x
  &amp;gt;&amp;gt;&amp;gt; f()
  1
  [1, 2]

  def f():
      x = 1
      def g():
          print g.x
          g.x = 2
      g.x = x
      g()
      print g.x
  &amp;gt;&amp;gt;&amp;gt; f()
  1
  2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;py3 keyword only arguments&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  def f(*args, name):
      print(&quot;args&quot;, args)
      print(&quot;name&quot;, name)
  &amp;gt;&amp;gt;&amp;gt; f(1, 2)
  TypeError: f() missing 1 required keyword-only argument: &apos;name&apos;
  &amp;gt;&amp;gt;&amp;gt; f(1, 2, name=3)
  args (1, 2)
  name 3

  def f(*args, name=3):
      print(&quot;args&quot;, args)
      print(&quot;name&quot;, name)
  &amp;gt;&amp;gt;&amp;gt; f(1, 2)
  args (1, 2)
  name 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;in py3 there is unpack of variables, it returns list. And arguments unpack in function call returns tuple&lt;/p&gt;

    &lt;p&gt;python 2 and 3&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  def f(a, *b):
      print(b)
  &amp;gt;&amp;gt;&amp;gt; f(1, *[2, 3])
  (2, 3)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;python 3&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; a, *b = [1, 2, 3]
  &amp;gt;&amp;gt;&amp;gt; print(b)
  [2, 3]
  &amp;gt;&amp;gt;&amp;gt; a, *b = (1, 2, 3)
  &amp;gt;&amp;gt;&amp;gt; print(b)
  [2, 3]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;add list to the beginning of existing list: L[:0] = [1, 2, 3]&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;get and set maximum recursion limit&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; sys.getrecursionlimit()  # 1000
  &amp;gt;&amp;gt;&amp;gt; sys.setrecursionlimit(10000)
  &amp;gt;&amp;gt;&amp;gt; help(sys.setrecursionlimit)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;function arguments&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; def f(a):
  ...     b = 1
  ... 
  &amp;gt;&amp;gt;&amp;gt; f.__name__
  &apos;f&apos;
  &amp;gt;&amp;gt;&amp;gt; f.__code__.co_varnames
  (&apos;a&apos;, &apos;b&apos;)
  &amp;gt;&amp;gt;&amp;gt; f.__code__.co_argcount
  1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;in py3 we can add annotations to function arguments. This information is saved in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;func.__annotations__&lt;/code&gt;. Nothing is done automatically with annotations, but we can work with them manually (for example for checking type and range of argument from decorator)&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; def func(a: &apos;spam&apos;, b: (1, 10), c: float):
  ...     return a + b + c
  &amp;gt;&amp;gt;&amp;gt; func.__annotations__
  {&apos;b&apos;: (1, 10), &apos;c&apos;: &amp;lt;class &apos;float&apos;&amp;gt;, &apos;a&apos;: &apos;spam&apos;}

  # default values
  &amp;gt;&amp;gt;&amp;gt; def func(a: &apos;spam&apos;=4, b: (1, 10)=5, c: float=0.1):
  ...     return a + b + c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;it is impossible to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;=&lt;/code&gt; in lambda, but it is possible to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setattr&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__dict__&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;operator module in std lib&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  import operator as op
  reduce(op.add, [2, 4, 6])
  # same as
  reduce(lambda x, y: x+y, [2, 4, 6])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;KISS: Keep It Simple [Sir/Stupid]&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;comprehension vs map in general (better test on your system)&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map(lambda x: x ..)&lt;/code&gt; slower than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[x for x ..]&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[ord(x) for x ..]&lt;/code&gt; slower than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map(ord for x ..)&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map(lambda x: L.append(x+10), range(10))&lt;/code&gt; even slower than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;for x in range(10): L.append(x+10)&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;unpacking in lambda differs in py2 and py3&lt;/p&gt;

    &lt;p&gt;python 2&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; map(lambda (a, b, c): a, [(0,1,2), (3,4,5)])
  [0, 3]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;python 3&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; list(map(lambda (a, b, c): a, [(0,1,2), (3,4,5)]))
  SyntaxError: invalid syntax
  &amp;gt;&amp;gt;&amp;gt; list(map(lambda a, b, c: a, [(0,1,2), (3,4,5)]))
  TypeError: &amp;lt;lambda&amp;gt;() missing 2 required positional arguments: &apos;b&apos; and &apos;c&apos;
  &amp;gt;&amp;gt;&amp;gt; list(map(lambda row: row[0], [(0,1,2), (3,4,5)]))
  [0, 3]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;many builtin functions accept generators, no additional parenthesis are needed&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; &quot;&quot;.join(str(x) for x in [1, 2])
  &apos;12&apos;
  &amp;gt;&amp;gt;&amp;gt; sorted(str(x) for x in [1, 2])
  [&apos;1&apos;, &apos;2&apos;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;but for args () is needed&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; sorted(str(x) for x in [1, 2], reverse=True)
  SyntaxError: Generator expression must be parenthesized if not sole argument
  &amp;gt;&amp;gt;&amp;gt; sorted((str(x) for x in [1, 2]), reverse=True)
  [&apos;2&apos;, &apos;1&apos;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;py3: yield from iterator (following functions are the same)&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  def f():
      for i in range(5):
          yield i

  def g():
      yield from range(5)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;put last list element to the beginning&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  L = L[1:] + L[:1]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;zip for single list&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; zip([1,2,3])
  [(1,), (2,), (3,)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;map and zip are similiar&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  map(lambda x,y: (x,y), S1, S2) == zip(S1, S2)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python -m script_name&lt;/code&gt; - runs module (module is a .py file), that can be found from current search path. Module can be placed somewhere in site-packages folder, but is run as main (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__name__ = &apos;__main__&apos;&lt;/code&gt;). If script_name is a package (folder with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__init__.py&lt;/code&gt;), then file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__main__.py&lt;/code&gt; will be launched. If no such file, then error. Some modules are smart and accepts arguments from command line, for example timeit: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python -m timeit &apos;&quot;-&quot;.join(str(n) for n in range(100))&apos;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;there is no direct way to use global and local variable with same name simultaneously. We can play with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__main__.my_global_var&lt;/code&gt;&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  # OK
  X = 99
  def f():
      print(X)
  &amp;gt;&amp;gt;&amp;gt; f()
  99

  # ERROR
  def f():
      print(X)  # &amp;lt;- error
      X = 99
  &amp;gt;&amp;gt;&amp;gt; f()
  UnboundLocalError: local variable &apos;X&apos; referenced before assignment

  # global everywhere
  def f():
      global X
      print(X)
      X = 88

  # hack with main
  def f():
      import __main__
      print(__main__.X)
      X = 88
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;square root performance&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  math.sqrt(x)  # fastest
  x ** .5  # fast
  pow(x, .5)  # slow
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;py3.2+ creates folder &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__pycache__&lt;/code&gt; for saving bytecode of different python versions there and to reuse them in future. There are no *.pyc files outside this folder now.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;.pyc for main script (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__name__ = &apos;__main__&apos;&lt;/code&gt;) is not created, only for import&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;import search order (look at sys.path):&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;home of program (+ in some versions current dir, from where program is launched, i.e. current dir)&lt;/li&gt;
      &lt;li&gt;PYTHONPATH&lt;/li&gt;
      &lt;li&gt;std lib dir&lt;/li&gt;
      &lt;li&gt;content of any .pth file (if exists)&lt;/li&gt;
      &lt;li&gt;site-packages dir&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;sys.path can be changed at runtime, this will impact all program&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;python -O creates a little bit optimized bytecode .pyo instead of .pyc, it ~5% faster. Also this flag removes all asserts from code. And changes value of var &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__debug__&lt;/code&gt;&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  # main.py
  print __debug__
  assert True == False

  # python main.py
  True
  AssertionError

  # python -O main.py
  False
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;in py2 in function we can do &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;from some_module import *&lt;/code&gt;, but with warning. In py3 - error&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  # python 2
  def f():
      from urllib import *
      print(&apos;after import&apos;)
  &amp;gt;&amp;gt;&amp;gt; f()
  SyntaxWarning: import * only allowed at module level
  after import

  # python 3
  &amp;gt;&amp;gt;&amp;gt; f()
  SyntaxError: import * only allowed at module level
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reload&lt;/code&gt; doesn’t update objects, that are loaded with from: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;from x import y&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt; will not be reloaded after &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reload(x)&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reload&lt;/code&gt; doesn’t update c modules&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;py3: in package there is &lt;strong&gt;no&lt;/strong&gt; package folder in sys.path. If module in package needs to import another module from the same package, relative import must be used: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;from . import smth&lt;/code&gt;. However, if module is launched as main program (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__main__&lt;/code&gt;), then package folder &lt;strong&gt;is&lt;/strong&gt; in sys.path.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;py2: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;from __future__ import absolute_import&lt;/code&gt; makes import in py2 the same as in py3. It allows to import module string from standard library in following case very easy:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  mypkg
  ├── __init__.py
  ├── main.py  # import string from std here?
  └── string.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;relative import is forbidden outside the package&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  # test.py
  from . import a

  # python 2
  python test.py
  ValueError: Attempted relative import in non-package

  # python 3
  python test.py
  SystemError: Parent module &apos;&apos; not loaded, cannot perform relative import
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;cons of relative import:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;module with relative imports can’t be used as script (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__main__&lt;/code&gt;). Solution: use absolute import with package name at the beginning&lt;/li&gt;
      &lt;li&gt;derives from previous point: we can’t launch tests, that are executed when running module as main program&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;in py3.3+ there are &lt;em&gt;namespace packages&lt;/em&gt;. They don’t have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__init__.py&lt;/code&gt;. Two (or more) namespace packages with same name can be placed in different locations in sys.path. Modules from those packages will be aggregated under same package name. If modules have same name - first found in sys.path will be taken. Namespace package always has lower priority under regular package (with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__init__.py&lt;/code&gt;). When regular package is found - all found namespace packages with that name are discarded, normal package is used instead. Namespace package import process is slow.&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  # collect modules in namespace package
  current_dir
  └── mypkg
      └── mymod1.py

  site-packages
  └── mypkg
      └── mymod2.py

  &amp;gt;&amp;gt;&amp;gt; import mypkg.mymod1
  &amp;gt;&amp;gt;&amp;gt; import mypkg.mymod2

  # redefine module in namespace package
  current_dir
  └── mypkg
      └── mymod1.py
      └── mymod2.py

  site-packages
  └── mypkg
      └── mymod2.py

  &amp;gt;&amp;gt;&amp;gt; import mypkg.mymod1
  &amp;gt;&amp;gt;&amp;gt; import mypkg.mymod2  # current_dir.mypkg.mymod2

  # regular package is used
  current_dir
  └── mypkg
      └── mymod1.py

  site-packages
  └── mypkg
      └── mymod2.py

  another-packages
  └── mypkg
      └── mymod1.py

  &amp;gt;&amp;gt;&amp;gt; import sys
  &amp;gt;&amp;gt;&amp;gt; sys.append(&apos;another-packages&apos;)
  &amp;gt;&amp;gt;&amp;gt; import mypkg.mymod1  # another-packages.mypkg.mymod1
  &amp;gt;&amp;gt;&amp;gt; import mypkg.mymod2
  ImportError: No module named &apos;mypkg.mymod2&apos;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In py2 and py3 new-style classes (inherent from object), when operator is applied, corresponding magic methods are searched in class, ignoring instance (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__getattr__&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__getattribute__&lt;/code&gt; are not invoked). But on direct call of magic method instance is not ignored (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__getattr__&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__getattribute__&lt;/code&gt; are invoked).&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  class A(object):
      def __repr__(self):
          return &quot;class level repr&quot;
      def normal_method(self):
          return &quot;class level normal method&quot;

  def instance_repr():
      return &quot;instance level repr&quot;
  def instance_normal_method():
      return &quot;instance level normal method&quot;

  a = A()
  print(a)  # class level repr
  print(a.normal_method())  # class level normal method

  a.__repr__ = instance_repr
  a.normal_method = instance_normal_method

  print(a)  # class level repr
  print(a.normal_method())  # instance level normal method

  print(a.__repr__())  # instance level repr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ZODB - object database for python objects, support ACID-compatible transactions (including savepoints)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;slice object:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  L[2:4] == L[slice(2,4)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;iteration context (for, while, …) will try&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__iter__&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__getitem__&lt;/code&gt;&lt;/p&gt;

        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; class Gen(object):
     def __getitem__(self, index):
         if index &amp;gt; 5:
             raise StopIteration()
         return index

 for x in Gen():
     print x,

 # output
 0 1 2 3 4 5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;for calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__iter__()&lt;/code&gt;. Then calls method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;returned_object.__next__()&lt;/code&gt; (in py2 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.next()&lt;/code&gt;), until &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StopIteration&lt;/code&gt;. It is possible to use yield &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__item__(): yield smth&lt;/code&gt;, then no need to define &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__next__&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__call__&lt;/code&gt; is invoked, when parentheses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;()&lt;/code&gt; are applied to instance, not to class&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  class A(object):
      def __call__(self):
          print(&quot;call&quot;)

  a = A()  # nothing
  a()  # print call
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__eq__&lt;/code&gt; = True doesn’t mean, that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__ne__&lt;/code&gt; = False&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;boolean context:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__bool__&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__nonzero__&lt;/code&gt; in py2)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__len__&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;True&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;OOP patterns&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;inheritance - “is a”&lt;/li&gt;
      &lt;li&gt;composition - “has a” (container stores other objects)&lt;/li&gt;
      &lt;li&gt;delegation - special case of composition, when only one object is stored. Wrapper implement same interface, but add some intermediate steps.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;class attributes (including methods), that start with double underscores &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__&lt;/code&gt;, but don’t end with them, have special behaviour. They do not overlap with same named attributes in child classes. In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__dict__&lt;/code&gt; they are stored as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_ClassName__attrname&lt;/code&gt;.&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  class A(object):
      __x = 1

      def show_a(self):
          print self.__x

  class B(A):

      def show_b(self):
          print self.__x

  &amp;gt;&amp;gt;&amp;gt; a = A()
  &amp;gt;&amp;gt;&amp;gt; a.show_a()
  1
  &amp;gt;&amp;gt;&amp;gt; b = B()
  &amp;gt;&amp;gt;&amp;gt; b.show_a()
  1
  &amp;gt;&amp;gt;&amp;gt; b.show_b()
  AttributeError: &apos;B&apos; object has no attribute &apos;_B__x&apos;

  class B(A):
      __x = 2

      def show_b(self):
          print self.__x

  &amp;gt;&amp;gt;&amp;gt; b = B()
  &amp;gt;&amp;gt;&amp;gt; b.show_a()
  1
  &amp;gt;&amp;gt;&amp;gt; b.show_b()
  2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;in py3 in class method we can suppress self argument and use that method only from class (not from instance) - it will behave as static method. But not in py2.&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  class A(object):
      def f():
          print(&quot;f&quot;)

  # python 2
  &amp;gt;&amp;gt;&amp;gt; A.f()
  TypeError: unbound method f() must be called with A instance as first argument (got nothing instead)

  # python 3
  &amp;gt;&amp;gt;&amp;gt; A.f()
  f
  &amp;gt;&amp;gt;&amp;gt; a = A()
  &amp;gt;&amp;gt;&amp;gt; a.f()
  TypeError: f() takes 0 positional arguments but 1 was given
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;bound function:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  class A(object):
      def f(self):
          pass

  a = A()
  print(a.f.__self__)  # that is where self is saved
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;attribute search in classic (old-style) and new-style classes:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;classic. DFLR: Depth First, Left to Right&lt;/li&gt;
      &lt;li&gt;new-style. Diamond pattern, L-R, D-F; MRO (more complex, that just LRDF)&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;MRO guards class, from which &amp;gt;= 2 other classes are subclassed, from being search twice. So class will be searched only once.&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  # python 2 old-style
  class A: attr = 1

  class B(A): pass

  class C(A): attr = 2

  class D(B,C): pass

  &amp;gt;&amp;gt;&amp;gt; x = D()
  &amp;gt;&amp;gt;&amp;gt; print(x.attr)  # x, D, B, A
  1

  # python 2 new-style
  class A(object): attr = 1

  class B(A): pass

  class C(A): attr = 2

  class D(B,C): pass

  &amp;gt;&amp;gt;&amp;gt; x = D()
  &amp;gt;&amp;gt;&amp;gt; print(x.attr)  # x, D, B, C
  2

  # scheme
  A     A
  |     |
  B     C
  \     /
     |
     D
     |
     X
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Check search order in new-style (mro algorithm):&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; D.__mro__
  (&amp;lt;class &apos;__main__.D&apos;&amp;gt;, &amp;lt;class &apos;__main__.B&apos;&amp;gt;, &amp;lt;class &apos;__main__.C&apos;&amp;gt;, &amp;lt;class &apos;__main__.A&apos;&amp;gt;, &amp;lt;type &apos;object&apos;&amp;gt;)
  &amp;gt;&amp;gt;&amp;gt; D.mro()  # same as list(D.__mro__)
  [&amp;lt;class &apos;__main__.D&apos;&amp;gt;, &amp;lt;class &apos;__main__.B&apos;&amp;gt;, &amp;lt;class &apos;__main__.C&apos;&amp;gt;, &amp;lt;class &apos;__main__.A&apos;&amp;gt;, &amp;lt;type &apos;object&apos;&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;format() calls method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__format__&lt;/code&gt;. If it is not exist, then TypeError in py2.&lt;/p&gt;

    &lt;p&gt;python 2&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; print(&apos;{0}&apos;.format(object))
  &amp;lt;type &apos;object&apos;&amp;gt;
  &amp;gt;&amp;gt;&amp;gt; print(&apos;{0}&apos;.format(object.__reduce__))
  TypeError: Type method_descriptor doesn&apos;t define __format__
  # call __str__ explictly
  &amp;gt;&amp;gt;&amp;gt; print(&apos;{0!s}&apos;.format(object.__reduce__))
  &amp;lt;method &apos;__reduce__&apos; of &apos;object&apos; objects&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;python 3.4&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; print(&apos;{0}&apos;.format(object.__reduce__))
  &amp;lt;method &apos;__reduce__&apos; of &apos;object&apos; objects&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;python 2 &amp;amp; 3&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  class A(object):
      def __format__(self, *args):
          return &quot;A.__format__&quot;

      def __str__(self):
          return &quot;A.__str__&quot;

  &amp;gt;&amp;gt;&amp;gt; a = A()
  &amp;gt;&amp;gt;&amp;gt; &quot;{0}&quot;.format(a)
  &apos;A.__format__&apos;
  &amp;gt;&amp;gt;&amp;gt; print(a)
  A.__str__
  &amp;gt;&amp;gt;&amp;gt; &apos;%s&apos; % a
  &apos;A.__str__&apos;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__dict__&lt;/code&gt; doesn’t contain “virtual” attributes:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;new-style properties (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@property&lt;/code&gt;)&lt;/li&gt;
      &lt;li&gt;slots&lt;/li&gt;
      &lt;li&gt;descriptors&lt;/li&gt;
      &lt;li&gt;dynamic attrs computed with tools like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__getattr__&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;MRO - method resolution order&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;diamond pattern - special case of ‘multi inheritance’, when 2 or more class can be child of the same class (object). This pattern is used in python.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;proxy object, returned by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;super()&lt;/code&gt;, doesn’t work with operators:&lt;/p&gt;

    &lt;p&gt;python 3&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  class A(list):
      def get_some(self):
          return super()[0]

  &amp;gt;&amp;gt;&amp;gt; a = A([1, 2])
  &amp;gt;&amp;gt;&amp;gt; a.get_some()
  TypeError: &apos;super&apos; object is not subscriptable

  class A(list):
      def get_some(self):
          return super().__getitem__(0)

  &amp;gt;&amp;gt;&amp;gt; a = A([1,2])
  &amp;gt;&amp;gt;&amp;gt; a.get_some()
  1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;python 2&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  class A(list):
      def get_some(self):
          return super(A, self)[0]

  &amp;gt;&amp;gt;&amp;gt; a = A([1,2])
  &amp;gt;&amp;gt;&amp;gt; a.get_some()
  TypeError: &apos;super&apos; object has no attribute &apos;__getitem__&apos;

  class A(list):
      def get_some(self):
          return super(A, self).__getitem__(0)

  &amp;gt;&amp;gt;&amp;gt; a = A([1,2])
  &amp;gt;&amp;gt;&amp;gt; a.get_some()
  1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;super()&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;super() pros:&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;if superclass need to be changed in runtime, we can’t do it without super: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C.__bases__ = (Y, )&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;calls sequence of inherited methods in multi inheritance class, in MRO order.&lt;/p&gt;

            &lt;p&gt;If we’ll try to do it without super, we can call method of some class twice.&lt;/p&gt;

            &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  class A(object):
      def __init__(self):
          print(&quot;A&quot;)

  class B(A):
      def __init__(self):
          print(&quot;B&quot;)
          super(B, self).__init__()

  class C(A):
      def __init__(self):
          print(&quot;C&quot;)
          super(C, self).__init__()

  class D(B, C):
      pass

  &amp;gt;&amp;gt;&amp;gt; d = D()
  B
  C
  A  # A only once
  &amp;gt;&amp;gt;&amp;gt; B.mro()
  [&amp;lt;class &apos;__main__.B&apos;&amp;gt;, &amp;lt;class &apos;__main__.A&apos;&amp;gt;, &amp;lt;type &apos;object&apos;&amp;gt;]
  &amp;gt;&amp;gt;&amp;gt; D.mro()
  [&amp;lt;class &apos;__main__.D&apos;&amp;gt;, &amp;lt;class &apos;__main__.B&apos;&amp;gt;, &amp;lt;class &apos;__main__.C&apos;&amp;gt;, &amp;lt;class &apos;__main__.A&apos;&amp;gt;, &amp;lt;type &apos;object&apos;&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;

            &lt;p&gt;Sequence of methods&lt;/p&gt;

            &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  class B(object):
      def __init__(self):
          print(&quot;B&quot;)
          # for B super is C here, by MRO order
          super(B, self).__init__()

  class C(object):
      def __init__(self):
          print(&quot;C&quot;)
          # it is ok here to call super().__init__
          # because object also has __init__
          super(C, self).__init__()

  class D(B, C):
      pass

  &amp;gt;&amp;gt;&amp;gt; d = D()
  B
  C
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;super will search attribute in MRO hierarchy. It will search all classes. So, for example hierarchy for super is the following: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; doesn’t have attribute, whereas &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt; has, then C.method will be used without error.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;super() cons (or features):&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;when super is used, all methods in sequence must accept same arguments&lt;/li&gt;
          &lt;li&gt;super().m - all classes must have method m and call super().m, except last one, that must not call super.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;inherit method from exact class:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  class A(B, C):
      other = C.other  # not B other
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;finally block will be called even if exception was happened in except or else block&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;exception - always instance, even if raise ExceptionClass (without &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;()&lt;/code&gt;). Instance will be created automatically (without arguments):&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  raise Exception  # == raise Exception()
  raise  # reraise caught exception
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;py2, look for builtin exceptions:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  import exceptions
  help(exceptions)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;the downside of reading bytes from file and further manual decoding: if we’ll read by chunks, then some nasty case can happen, when one byte of one symbol will fall in first chunk, and another byte of same symbol - in second chunk. So it is better to use codecs.open in py2.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When file name is given in unicode, python will automatically decode and encode from/to bytes. When file name is in bytes, then no encoding is happen. Default encoding for file names:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; sys.getfilesystemencoding()
  &apos;utf-8&apos;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;descriptor - class, that implement one of the following methods&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__get__&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__set__&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__delete__&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If descriptor doesn’t implement &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__set__&lt;/code&gt;, it doesn’t mean, that corresponding attribute is read-only. Attribute will be simply rewritten. To avoid it, implement &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__set__&lt;/code&gt; with exception.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;decorators can be combined, they will be called from bottom to top:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  @A
  @B
  @C
  def f(): pass

  # same as

  f = A(B(C(f)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;decorator can accept arguments&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  @dec(a, b)
  def f(): pass

  # same as

  f = dec(a, b)(f)

  # implementation:

  def dec(a, b):
      def actual_dec(f):
          return f
      return actual_dec
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;So decorator can include &lt;strong&gt;3 levels of callables&lt;/strong&gt;:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;callable to accept decorator args&lt;/li&gt;
      &lt;li&gt;callable to serve as decorator&lt;/li&gt;
      &lt;li&gt;callable to handle calls to the original function&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;during class creation, two methods of class type are called:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  type.__new__(type_class, class_name, super_classes, attr_dict)
  type.__init__(class, class_name, super_classes, attr_dict)

  # python 3
  class Eggs: pass

  class Spam(Eggs):
      data = 1
      def method(self, arg): pass

  # same as
  Eggs = type(&apos;Eggs&apos;, (), ...)  # in () object will be added automatically in python 3

  Spam = type(&apos;Spam&apos;, (Eggs, ), {&apos;data&apos;: 1, &apos;method&apos;: method, &apos;__module__&apos;: &apos;__main__&apos;})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Set metaclass&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;python 2&lt;/strong&gt;&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  class Spam(object):
      __metaclass__ = Meta
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Inherit from object is not mandatory, but if it is not present, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__metaclass__&lt;/code&gt;
  is used, then result will be new-style anyway, and in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__bases__&lt;/code&gt; object will be present.
  But better to use object explicitly, as there can be problems, for example with inheritance.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;python 3&lt;/strong&gt;&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  class Spam(Eggs, metaclass=Meta):
      pass
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;attribute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__metaclass__&lt;/code&gt; is just ignored&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Metaclass can not be a class itself. It just must return class. Function also can be a metaclass:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  def meta_func(class_name, bases, attr_dict):
      return type(class_name, bases, attr_dict)

  # python 2
  class Spam(object):
      __metaclass__ = meta_func
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Regular classes also have method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__new__&lt;/code&gt;. But it doesn’t create class, it is invoked at instance creation (takes class as input argument). This method calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__init__&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Magic methods of metaclass and class:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  class Meta(type): pass
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;on creation of class Class (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class Class(metaclass=Meta): ...&lt;/code&gt;) following methods are called:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  Meta.__new__
  Meta.__init__
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;on creation of instance of class Class (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;instance = Class(...)&lt;/code&gt;) following methods are called:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  Meta.__call__
      calls Class.__new__
          calls Class.__init__
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;on calling of instance of class Class (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;instance()&lt;/code&gt;) following method is called:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  Class.__call__
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It is not mandatory to subclass metaclass from type. We can use simple class with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__new__&lt;/code&gt; method as metaclass. But in that case methods &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__init__&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__call__&lt;/code&gt; will not be called:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  class MySimpleMetaClass(object):
      def __new__(cls, *args, **kwargs):
          new_class = type.__new__(type, *args, **kwargs)
          return new_class

      def __init__(new_class, *args, **kwargs):
          print(&quot;__init__ won&apos;t be called...&quot;)

      def __call__(*args, **kwargs):
          print(&quot;__call__ won&apos;t be called...&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Metaclass of some class will be invoked for all subclasses. When &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__new__&lt;/code&gt; of metaclass is called for parent class, bases will contain &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(&amp;lt;type &apos;object&apos;&amp;gt;,)&lt;/code&gt;, and for subclass - parent class.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Metaclass attributes are inherited by class, not by instances of class.&lt;/p&gt;

    &lt;p&gt;python 2 (python 3 has some syntax differences)&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  class MyMetaClass(type):
      attr = 2

      def __new__(*args, **kwargs):
          return type.__new__(*args, **kwargs)

      def toast(*args, **kwargs):
          print(args, kwargs)

  class A(object):
      __metaclass__ = MyMetaClass
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Metaclass is included in search sequence of class attributes&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; A.toast()
  ((&amp;lt;class &apos;__main__.A&apos;&amp;gt;,), {})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Interesting, that method from metaclass is bound, although is called from class, not from instance. In fact class - is an instance of metaclass:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; A.toast
  &amp;lt;bound method MyMetaClass.toast of &amp;lt;class &apos;__main__.A&apos;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;But metaclass is not present in instance attribute search sequence&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; a = A()
  &amp;gt;&amp;gt;&amp;gt; a.toast()
  AttributeError: &apos;A&apos; object has no attribute &apos;toast&apos;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;If some superclass has attribute with same name, as in metaclass, it has higher priority (no matter how deep superclass is)&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  class B(object):
      attr = 1

  class C(B):
      __metaclass__ = MyMetaClass

  &amp;gt;&amp;gt;&amp;gt; C.attr
  1  # MyMetaClass.attr = 2 is ignored
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Instance attributes are searched in its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__dict__&lt;/code&gt;, next in all &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__dict__&lt;/code&gt; of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__class__.__mro__&lt;/code&gt;
  Class attributes are searched also in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__class__.__mro__&lt;/code&gt;, it is different class, from instance it will be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__class__.__class__.__mro__&lt;/code&gt;.&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; inst = C()
  &amp;gt;&amp;gt;&amp;gt; inst.__class__ -&amp;gt; &amp;lt;class &apos;__main__.C&apos;&amp;gt;
  &amp;gt;&amp;gt;&amp;gt; C.__bases__    -&amp;gt; (&amp;lt;class &apos;__main__.B&apos;&amp;gt;,)
  &amp;gt;&amp;gt;&amp;gt; C.__class__    -&amp;gt; &amp;lt;class &apos;__main__.MyMetaClass&apos;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Instance inherit attributes from all superclasses. Class - from superclasses and metaclasses. Metaclasses - from super-metaclasses (and probably from meta-metaclasess).&lt;/p&gt;

    &lt;p&gt;Data descriptors (those, that define &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__set__&lt;/code&gt;) brings some changes in attribute search order for instances.
  For class instance, data descriptor will have higher priority in search, even if they are declared in superclasess:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  class DataDescriptor(object):
      def __get__(self, instance, owner):
          print(&quot;DataDescriptor.__get__&quot;)
          return 5
      def __set__(self, instance, value):
          print(&quot;DataDescriptor.__set__&quot;, value)


  class B(object):
      attr = DataDescriptor()

  class C(B):
      pass

  &amp;gt;&amp;gt;&amp;gt; c = C()
  &amp;gt;&amp;gt;&amp;gt; c.__dict__[&apos;attr&apos;] = 88
  &amp;gt;&amp;gt;&amp;gt; c.attr
  DataDescriptor.__get__
  5
  &amp;gt;&amp;gt;&amp;gt; c.attr = 8
  (&apos;DataDescriptor.__set__&apos;, 8)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Descriptor was called, in spite of attribute with same name is present in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c.__dict__&lt;/code&gt;.
  Attribute doesn’t hide descriptor of superclass.
  Such behaviour will not happen in case of nondata descriptor:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  class SimpleDescriptor(object):
      def __get__(self, instance, owner):
          print(&quot;SimpleDescriptor.__get__&quot;)
          return 5

  class B(object):
      attr = SimpleDescriptor()

  class C(B):
      pass

  &amp;gt;&amp;gt;&amp;gt; c = C()
  &amp;gt;&amp;gt;&amp;gt; c.attr
  SimpleDescriptor.__get__
  5
  &amp;gt;&amp;gt;&amp;gt; c.__dict__[&apos;attr&apos;] = 88
  &amp;gt;&amp;gt;&amp;gt; c.attr
  88
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Also, for builtin operators that call magic methods implicitly, the search order is special. It ignores &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;instance.__dict__&lt;/code&gt;, the search goes to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__dict__&lt;/code&gt; of classes from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__mro__&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;magic methods, that are called implicitly by builtin operators, are searched in metaclasses, ignoring the class (and all its superclasses)&lt;/p&gt;

    &lt;p&gt;python 2 (in python 3 syntax differs a little bit)&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  class MyMetaClass(type):
      def __new__(*args, **kwargs):
          return type.__new__(*args, **kwargs)
      def __str__(cls):
          return &quot;__str__ from meta&quot;

  class A(object):
      __metaclass__ = MyMetaClass
      def __str__(self):
          return &quot;__str__ from class A&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyMetaClass.__str__&lt;/code&gt; will be called, not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A.__str__&lt;/code&gt;&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; print A
  __str__ from meta
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;And here method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;object.__str__&lt;/code&gt; will be called:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; print MyMetaClass
  &amp;lt;class &apos;__main__.MyMetaClass&apos;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Author Mark Lutz is a little upset, that python become too complicated nowadays. It have more than one obvious way to do some things:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;str.format&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try/finally&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;It goes contrary with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import this&lt;/code&gt; Zen.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="python" /><summary type="html">Recently i’ve read the book Learning Python, 5th Edition by Mark Lutz. Here is a list of most interesting insights for me.</summary></entry><entry><title type="html">Listen wifi with wireshark</title><link href="https://st4lk.github.io/en/blog/2015/04/17/listen-wifi-with-wireshark.html" rel="alternate" type="text/html" title="Listen wifi with wireshark" /><published>2015-04-17T18:19:43+00:00</published><updated>2015-04-17T18:19:43+00:00</updated><id>https://st4lk.github.io/en/blog/2015/04/17/listen-wifi-with-wireshark</id><content type="html" xml:base="https://st4lk.github.io/en/blog/2015/04/17/listen-wifi-with-wireshark.html">&lt;p&gt;&lt;a href=&quot;/en/blog/2015/04/17/listen-wifi-with-wireshark.html&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/16098/85893628.c68/0_17f35c_4bf9a7fe_M.jpg&quot; alt=&quot;Listen wifi with wireshark&quot; title=&quot;Listen wifi with wireshark&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I always knew, that it is possible to catch wifi network packets. But haven’t done it in practise (i was analysing network packets, but not in HTTP protocol). So i decided to do it, as this is interesting and useful. Such experience help to understand TCP-IP and HTTP protocols and also to pay more attention for web security.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;We’ll spy the network traffic with Wireshark program. There are a lot of tools for such purpose (ngrep, tcpdump, mitmproxy), but Wireshark looks the most popular and have a reach functionality.&lt;/p&gt;

&lt;p&gt;Lets try to solve following tasks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#localhost&quot;&gt;listen network packets, that are sent/recieved &lt;strong&gt;inside local&lt;/strong&gt; machine&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#local_out&quot;&gt;listen network packets, that are sent/recieved by &lt;strong&gt;local&lt;/strong&gt; machine to/from outer world (internet)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#wifi_open_other&quot;&gt;listen network packets, that are sent/recieved by &lt;strong&gt;other members of public wifi&lt;/strong&gt; network&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#wifi_closed_other&quot;&gt;listen network packets, that are sent/recieved by &lt;strong&gt;other members of private wifi&lt;/strong&gt; network&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All actions i performed on laptop MacBook Pro with OS X Yosemite, so on other devices there can be some differences.&lt;/p&gt;

&lt;p&gt;Disclaimer: all actions are on your own responsibility. Do not apply described technics to make bad things.&lt;/p&gt;

&lt;h3 id=&quot;localhost-network-packets&quot;&gt;Localhost network packets&lt;a name=&quot;localhost&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Install wireshark. Launch it, go to Capture -&amp;gt; Intefaces.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://img-fotki.yandex.ru/get/4509/85893628.c67/0_17f346_a2cf0b57_orig.png&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/4509/85893628.c67/0_17f346_a2cf0b57_XL.png&quot; alt=&quot;ws interface&quot; title=&quot;ws interface&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My laptop is connected to wifi only (en0 interface).
As i understand, awdl0 is a cable network. No cable is connected, so we don’t see any packets.
And lo0 is a localhost interface, lets work with it now.&lt;/p&gt;

&lt;p&gt;Put checkbox at lo0 and press Start.
To concentrate on HTTP protocol, set &lt;em&gt;Display filter: http&lt;/em&gt; (this filter will be applied to already fetched and decoded packets, unlike Capture filter, which i’ll describe later):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://img-fotki.yandex.ru/get/15599/85893628.c67/0_17f347_e85f8329_orig.png&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/15599/85893628.c67/0_17f347_e85f8329_XL.png&quot; alt=&quot;ws http filter&quot; title=&quot;ws http filter&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are gonna catch packets, that will be sent from browser to django development server and back. There are some things about django server, that worth mentioning.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First, it respond HTTP 1.0, not HTTP 1.1&lt;/li&gt;
  &lt;li&gt;Second, the most important, response can &lt;strong&gt;not&lt;/strong&gt; include  &lt;br /&gt;
neither &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Content-Length: &amp;lt;response length&amp;gt;&lt;/code&gt;, neither &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Transfer-Encoding: chunked&lt;/code&gt;. In that case, to determine the end of HTTP response we need to wait for server to close the connection. But it will not happen. HTTP data can be transmitted in several TCP segments and wireshark smart enough to group those segments and to show final HTTP response. But, as wireshark can’t understand exactly when response is completed, it will not group them in HTTP frame.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well, this is not very bad, as we can always look for response to particular request by clicking on it and apply Analyse -&amp;gt; Follow TCP Stream. But, it will be great to see the HTTP response in frame list.&lt;/p&gt;

&lt;p&gt;To do it, prepend &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConditionalGetMiddleware&lt;/code&gt; to the list of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MIDDLEWARE_CLASSES&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if DEBUG:
    MIDDLEWARE_CLASSES = (
        &apos;django.middleware.http.ConditionalGetMiddleware&apos;,
    ) + MIDDLEWARE_CLASSES
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Middleware will set Content-Length header.&lt;/p&gt;

&lt;p&gt;It is not necessary, but useful in case of working with wireshark and django dev server. In other cases all work correctly: production servers usually set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Transfer-Encoding: chunked&lt;/code&gt; and respond HTTP by chunks (probably it is done by proxy server (nginx, apache, etc)).&lt;/p&gt;

&lt;p&gt;Now start django project. The main page just shows the name of current user and login form. If current user is anonymous, then his name will be “AnonymousUser”.&lt;/p&gt;

&lt;p&gt;For the purity of the experiment clean cookies in browser for 127.0.0.1.
Open page &lt;a href=&quot;http://127.0.0.1:8000/&quot;&gt;http://127.0.0.1:8000/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If we have &lt;strong&gt;not&lt;/strong&gt; add ‘ConditionalGetMiddleware’, then we’ll probably see only request:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://img-fotki.yandex.ru/get/4609/85893628.c68/0_17f349_2b69b414_orig.png&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/4609/85893628.c68/0_17f349_2b69b414_XL.png&quot; alt=&quot;localhost request only&quot; title=&quot;localhost request only&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The response still can be found, if we choose &lt;em&gt;Analyse-&amp;gt;Follow TCP Stream&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://img-fotki.yandex.ru/get/6210/85893628.c68/0_17f34a_b9583d43_orig.png&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/6210/85893628.c68/0_17f34a_b9583d43_XL.png&quot; alt=&quot;localhost request only follow tcp&quot; title=&quot;localhost request only follow tcp&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And with ‘ConditionalGetMiddleware’ the response will be visible in list of frames:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://img-fotki.yandex.ru/get/6307/85893628.c68/0_17f34b_617a4295_orig.png&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/6307/85893628.c68/0_17f34b_617a4295_XL.png&quot; alt=&quot;localhost request response&quot; title=&quot;localhost request response&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Content-Length is set:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://img-fotki.yandex.ru/get/5820/85893628.c68/0_17f34c_f706aca8_orig.png&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/5820/85893628.c68/0_17f34c_f706aca8_XL.png&quot; alt=&quot;localhost request response follow tcp&quot; title=&quot;localhost request response follow tcp&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well, it wasn’t very interesting. But lets try to login!&lt;/p&gt;

&lt;p&gt;Enter username and password and press Login. In wireshark we’ll see 4 new frames: POST request, redirect to main page (302 code), GET / request, response for GET:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://img-fotki.yandex.ru/get/16121/85893628.c68/0_17f34d_fc2e6c1b_orig.png&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/16121/85893628.c68/0_17f34d_fc2e6c1b_XL.png&quot; alt=&quot;localhost four new frames&quot; title=&quot;localhost four new frames&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Look at fetched data more carefully.&lt;/p&gt;

&lt;p&gt;Frame with POST request, along with HTTP headers contain form data. Here how they look like:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://img-fotki.yandex.ru/get/5703/85893628.c68/0_17f34e_e290f091_orig.png&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/5703/85893628.c68/0_17f34e_e290f091_XL.png&quot; alt=&quot;localhost login password&quot; title=&quot;localhost login password&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Login and password as plain text.&lt;/p&gt;

&lt;p&gt;Response to POST request was 302 redirect. In that response server ask client to store session id in cookies:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://img-fotki.yandex.ru/get/3110/85893628.c68/0_17f34f_664da61c_orig.png&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/3110/85893628.c68/0_17f34f_664da61c_XL.png&quot; alt=&quot;localhost 302 session&quot; title=&quot;localhost 302 session&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next goes GET request for main page, cookies now contain session id:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://img-fotki.yandex.ru/get/3110/85893628.c68/0_17f34f_664da61c_orig.png&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/5302/85893628.c68/0_17f350_c48d0b1d_XL.png&quot; alt=&quot;localhost session in request&quot; title=&quot;localhost session in request&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So this is how we can spy the network data, that is sent from client to server and back.
All these information will be transmitted in wifi network by the same way (if non secure HTTP protocol is used).
If we login - login and password are sent in plain text.
If we just make a requst - our session id is visible.&lt;/p&gt;

&lt;p&gt;With session id it is easy to access the site as the owner of that session.
For simplicity, we can check that with console tool (curl, httpie).
Example with httpie:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ http 127.0.0.1:8000 &quot;Cookie: sessionid=tmpocxkz6zsir6xe6i03kspucvlqq385&quot;
HTTP/1.0 200 OK
Content-Length: 567
Content-Type: text/html; charset=utf-8
Date: Thu, 16 Apr 2015 13:06:58 GMT
Server: WSGIServer/0.1 Python/2.7.6
Set-Cookie:  csrftoken=3bUoLB28WyzcH7qG5GXreWPm0Pj11861; expires=Thu, 14-Apr-2016 13:06:58 GMT; Max-Age=31449600; Path=/
Vary: Cookie
X-Frame-Options: SAMEORIGIN

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
            Hello, alex
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/login/&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;POST&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;username&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;hidden&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;next&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;hidden&apos;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;csrfmiddlewaretoken&apos;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;3bUoLB28WyzcH7qG5GXreWPm0Pj11861&apos;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;submit&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Login&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Login&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hello, alex&lt;/code&gt; is shown, so the server treat us as alex.&lt;/p&gt;

&lt;h3 id=&quot;network-packets-of-local-maching-sent-to-outer-world&quot;&gt;Network packets of local maching sent to outer world&lt;a name=&quot;local_out&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Listen for network packets of our computer.&lt;/p&gt;

&lt;p&gt;In wireshark choose Capture -&amp;gt; Intefaces, apply en0 interface and press Start:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://img-fotki.yandex.ru/get/3000/85893628.c68/0_17f35a_55441968_orig.png&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/3000/85893628.c68/0_17f35a_55441968_XL.png&quot; alt=&quot;my wifi interface&quot; title=&quot;my wifi interface&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I access the admin page of this site (lexev.org). In wireshark set Display filter&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http.request.full_uri contains lexev.org
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;to see data flow only with host lexev.org. Here what we get:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://img-fotki.yandex.ru/get/6841/85893628.c68/0_17f35b_e70a8cfa_orig.png&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/6841/85893628.c68/0_17f35b_e70a8cfa_XL.png&quot; alt=&quot;my wifi lexev&quot; title=&quot;my wifi lexev&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have now a session id of admin user.&lt;/p&gt;

&lt;h3 id=&quot;network-packets-of-other-members-of-public-wifi-network&quot;&gt;Network packets of other members of public wifi network&lt;a name=&quot;wifi_open_other&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;So far we were listening just our request and responses. But lets try to listen for other people.&lt;/p&gt;

&lt;p&gt;Go to cafe with public wifi, launch wireshark.
Choose corresponding interface in Capture -&amp;gt; Intefaces and press Options (not Start).&lt;/p&gt;

&lt;p&gt;We’ll see something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://img-fotki.yandex.ru/get/6830/85893628.c68/0_17f355_9d02aa03_orig.png&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/6830/85893628.c68/0_17f355_9d02aa03_XL.png&quot; alt=&quot;public wifi options&quot; title=&quot;public wifi options&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Double click on interface and put &lt;em&gt;Capture packets in monitor mode&lt;/em&gt; checkbox:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://img-fotki.yandex.ru/get/3107/85893628.c68/0_17f356_946d17dd_orig.png&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/3107/85893628.c68/0_17f356_946d17dd_XL.png&quot; alt=&quot;public wifi monitor model&quot; title=&quot;public wifi monitor model&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ok, Start. Now we are listening entire wifi network (excluding yourself).&lt;/p&gt;

&lt;p&gt;In public network fly a lot of packets, we can easily fetch more than Gb information in hour. Hard to work with such amount of data, that is where Capture filters can help. Packets that are discarded by capture filters will not be saved. Unlike display filters, they are applied to not yet processed and decrypted packets, therefore it is harder to construct the filter.&lt;/p&gt;

&lt;p&gt;Here is a capture filter for HTTP GET and POST requests only on 80 port:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;port 80 and tcp[&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;tcp[12:1] &amp;amp; 0xf0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; 2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:4] &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0x47455420&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; or &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;tcp dst port 80 and &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;tcp[&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;tcp[12:1] &amp;amp; 0xf0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; 2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:4] &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0x504f5354&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Apply it at interface Options:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://img-fotki.yandex.ru/get/15496/85893628.c68/0_17f357_7d774c65_orig.png&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/15496/85893628.c68/0_17f357_7d774c65_XL.png&quot; alt=&quot;public wifi capture filter&quot; title=&quot;public wifi capture filter&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lets try to connect to wifi from another device (phone for example) and send GET request to lexev.org from it.
For convenience add same display filter to show only requests to lexev.org (we can combine capture and display filters).
Session id is visible again:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://img-fotki.yandex.ru/get/3613/85893628.c68/0_17f358_8b8382aa_orig.png&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/3613/85893628.c68/0_17f358_8b8382aa_XL.png&quot; alt=&quot;public wifi admin session&quot; title=&quot;public wifi admin session&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just for fun, lets try to login. Look for my password everyone :):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://img-fotki.yandex.ru/get/15586/85893628.c68/0_17f359_d776258e_orig.png&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/15586/85893628.c68/0_17f359_d776258e_XL.png&quot; alt=&quot;public wifi admin login and password&quot; title=&quot;public wifi admin login and password&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;network-packets-of-other-members-of-private-wifi-network&quot;&gt;Network packets of other members of private wifi network&lt;a name=&quot;wifi_closed_other&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;For example we have a wifi with WPA protection.
Choose corresponding interface, enable monitor mode for it (the same way as for public network, just without capture filter) and listen.
We’ll see something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://img-fotki.yandex.ru/get/5113/85893628.c68/0_17f351_caf24487_orig.png&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/5113/85893628.c68/0_17f351_caf24487_XL.png&quot; alt=&quot;private undercrypted&quot; title=&quot;private undercrypted&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The data is encrypted. But, if we have a wifi password, we can decrypt it!&lt;/p&gt;

&lt;p&gt;Go to Edit -&amp;gt; Preferences. Choose Protocol -&amp;gt; IEEE 802.11.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://img-fotki.yandex.ru/get/5801/85893628.c68/0_17f352_eb1faebf_orig.png&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/5801/85893628.c68/0_17f352_eb1faebf_XL.png&quot; alt=&quot;private IEEE&quot; title=&quot;private IEEE&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Press Edit for Decryption Keys. Press new. In popup enter:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Key &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;: wpa-pwd
Key: password:wifiname
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://img-fotki.yandex.ru/get/4913/85893628.c68/0_17f353_f8d36ba3_orig.png&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/4913/85893628.c68/0_17f353_f8d36ba3_XL.png&quot; alt=&quot;private wifi password&quot; title=&quot;private add password&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Apply, ok.&lt;/p&gt;

&lt;p&gt;Now wireshark will decrypt the packets and we can see HTTP data as before:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://img-fotki.yandex.ru/get/52/85893628.c68/0_17f354_19d29c5e_orig.png&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/52/85893628.c68/0_17f354_19d29c5e_orig.png&quot; alt=&quot;private wifi decrypted&quot; title=&quot;private add decrypted&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;spy-public-wifi&quot;&gt;Spy public wifi&lt;/h3&gt;

&lt;p&gt;I went to macdonalds with public wifi and for about an hour run wireshark (save only GET and POST HTTP requests).
Saved fetched data into pcap file (File -&amp;gt; Save as).
The question is, how to analyse such big amount of frames? Sometimes it is useful to export interesting data into CSV.
Use &lt;a href=&quot;https://www.wireshark.org/docs/man-pages/tshark.html&quot;&gt;tshark&lt;/a&gt; tool for that.&lt;/p&gt;

&lt;p&gt;Save fields “frame number”, “HTTP method”, “full url” into results.csv:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tshark &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; macdak_pushkin_get_post_only.pcap &lt;span class=&quot;nt&quot;&gt;-T&lt;/span&gt; fields &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; frame.number &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; http.request.method &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; http.request.full_uri &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; results.csv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Also i wrote small python script, that will count number of requests for each second-level domain.
The first 20 results:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Domain&lt;/th&gt;
      &lt;th&gt;Number of requests&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;vk.com&lt;/td&gt;
      &lt;td&gt;6280&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;beeline.ru&lt;/td&gt;
      &lt;td&gt;5407&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;vk.me&lt;/td&gt;
      &lt;td&gt;2817&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;instagram.com&lt;/td&gt;
      &lt;td&gt;867&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;google.com&lt;/td&gt;
      &lt;td&gt;544&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;apple.com&lt;/td&gt;
      &lt;td&gt;536&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;yandex.ru&lt;/td&gt;
      &lt;td&gt;473&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;symcb.com&lt;/td&gt;
      &lt;td&gt;471&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;msftncsi.com&lt;/td&gt;
      &lt;td&gt;441&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;msn.com&lt;/td&gt;
      &lt;td&gt;304&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;yandex.net&lt;/td&gt;
      &lt;td&gt;302&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;trendmicro.com&lt;/td&gt;
      &lt;td&gt;292&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;co.uk&lt;/td&gt;
      &lt;td&gt;270&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;badoocdn.com&lt;/td&gt;
      &lt;td&gt;258&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;yadro.ru&lt;/td&gt;
      &lt;td&gt;188&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;marketgid.com&lt;/td&gt;
      &lt;td&gt;184&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;adfox.ru&lt;/td&gt;
      &lt;td&gt;183&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;mycdn.me&lt;/td&gt;
      &lt;td&gt;165&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;interfax.ru&lt;/td&gt;
      &lt;td&gt;154&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;scorecardresearch.com&lt;/td&gt;
      &lt;td&gt;137&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;And yes, i’ve got couple of interesting sessions. For example, for site mamba.ru, session is transmitted by insecure HTTP protocol. So i copy the session, paste it in chrome using &lt;a href=&quot;https://chrome.google.com/webstore/detail/editthiscookie/fngmhnnpilhplaeedifhccceomclgfbg&quot;&gt;EditThisCookie&lt;/a&gt; plugin and voila, i am Sergey. I can read messages, look preferences and so on. Well, i just didn’t want to harm Sergey, so i didn’t make any POST requests.&lt;/p&gt;

&lt;h3 id=&quot;how-to-protect&quot;&gt;How to protect&lt;/h3&gt;

&lt;p&gt;The only way to protect your site is to use TLS (HTTPS). To apply it well many things must be checked, but such discussion worth to make another post.&lt;/p&gt;

&lt;p&gt;HTTPS traffic in wireshark:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://img-fotki.yandex.ru/get/15564/85893628.c68/0_17f348_d9eec045_orig.png&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/15564/85893628.c68/0_17f348_d9eec045_orig.png&quot; alt=&quot;private wifi decrypted&quot; title=&quot;private add decrypted&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All data is encrypted, we can’t read it.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Use HTTPS were possible, especially if you deal with important user data (if it includes bank/card data, you must use https)&lt;/li&gt;
  &lt;li&gt;Being in public wifi network and accessing site by http, keep in mind, that it is very easy to spy for you. It applies to private network also, attacker just need to know the wifi password.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;useful-links&quot;&gt;Useful links&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=T-5p5ewqhVw&quot;&gt;Dan Callahan: Quick Wins for Better Website Security - PyCon 2014&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=SBQB_yS2K4M&quot;&gt;Hynek Schlawack: The Sorry State of SSL - PyCon 2014&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=4o-xqqidvKA&quot;&gt;Benjamin Peterson - A Dive into TLS - PyCon 2015&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=HqnUKTjxI1E&quot;&gt;Ashwini Oruganti, Christopher Armstrong - Introduction to HTTPS: A Comedy of Errors - PyCon 2015&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=f9XVNIeRxUo&quot;&gt;Getting comfortable with web security: A hands-on session - PyCon 2015&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="fun" /><category term="security" /><summary type="html">I always knew, that it is possible to catch wifi network packets. But haven’t done it in practise (i was analysing network packets, but not in HTTP protocol). So i decided to do it, as this is interesting and useful. Such experience help to understand TCP-IP and HTTP protocols and also to pay more attention for web security.</summary></entry><entry><title type="html">Debug SQL in django test</title><link href="https://st4lk.github.io/en/blog/2015/03/04/debug-sql-django-test.html" rel="alternate" type="text/html" title="Debug SQL in django test" /><published>2015-03-04T18:19:43+00:00</published><updated>2015-03-04T18:19:43+00:00</updated><id>https://st4lk.github.io/en/blog/2015/03/04/debug-sql-django-test</id><content type="html" xml:base="https://st4lk.github.io/en/blog/2015/03/04/debug-sql-django-test.html">&lt;p&gt;&lt;a href=&quot;/en/blog/2015/03/04/debug-sql-django-test.html&quot;&gt;&lt;img src=&quot;https://img-fotki.yandex.ru/get/4517/85893628.c67/0_1795f5_a958c090_orig.png&quot; alt=&quot;Debug SQL in django test&quot; title=&quot;Debug SQL in django test&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In django tests we can measure number of sql queries:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_home&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertNumQueries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;/&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If code in context of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assertNumQueries&lt;/code&gt; will make other number of DB attempts than expected (here 1), test will throw error. But when test fails it is sometimes hard to understand, what unexpected query was made. To debug such case very useful to log SQL expressions to console. Below is description how to do it.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;By the way, in Django 1.7+ when test fails all SQL queries will be also printed. So we don’t need to do anything else! If you use older version of django, then this article will be helpful.&lt;/p&gt;

&lt;h3 id=&quot;logging-settings-for-sql-output-in-console&quot;&gt;Logging settings for SQL output in console&lt;/h3&gt;

&lt;p&gt;Django will log SQL attempt only if one of the following condition is met:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DEBUG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;use_debug_cursor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By default tests always have &lt;em&gt;DEBUG = False&lt;/em&gt; regardless of your &lt;em&gt;settings.DEBUG&lt;/em&gt;. Testing is good with real environment.&lt;/p&gt;

&lt;p&gt;So we are left with &lt;em&gt;connection.use_debug_cursor&lt;/em&gt;, that is &lt;em&gt;None&lt;/em&gt; or &lt;em&gt;False&lt;/em&gt; by default (depending on version). But context manager &lt;em&gt;assertNumQueries&lt;/em&gt; set this to &lt;em&gt;True&lt;/em&gt; by itself for corresponding code block! We just need to set logging correctly.&lt;/p&gt;

&lt;p&gt;Create file settings_test.py. We’ll run tests with settings from this file, i recommend to do so.&lt;/p&gt;

&lt;p&gt;Project structure:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;project
├── project
│   ├── __init__.py
│   ├── settings.py
│   ├── settings_test.py
│   ├── urls.py
│   └── wsgi.py
│
├── spam  &lt;span class=&quot;c&quot;&gt;# some app&lt;/span&gt;
│   ├── __init__.py
│   ├── views.py
│   ├── tests.py
│   └── models.py
│
└── manage.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Module tests.py contains tests of spam app. It is not the best way to organise the app, better to create separate folder for tests, but for our simple example it is ok.&lt;/p&gt;

&lt;p&gt;settings_test.py:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;settings&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;settings&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOGGING&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ImportError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LOGGING&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;disable_existing_loggers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;handlers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loggers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# use database in memory to not lose your data!
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DATABASES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&apos;default&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&apos;ENGINE&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;django.db.backends.sqlite3&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&apos;NAME&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;:memory:&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&apos;USER&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&apos;PASSWORD&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&apos;TEST_CHARSET&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;utf8&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;LOGGING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;handlers&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;console&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&apos;level&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;DEBUG&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&apos;class&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;logging.StreamHandler&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;LOGGING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;loggers&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;django.db.backends&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&apos;handlers&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;console&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&apos;level&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;DEBUG&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&apos;propagate&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;LOGGING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;loggers&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;django.db.backends.schema&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&apos;propagate&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# don&apos;t log schema queries, django &amp;gt;= 1.7
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;tests.py:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.test&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestCase&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;spam.models&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpamTestCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_home&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertNumQueries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;/&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s see what we get using different test runners.&lt;/p&gt;

&lt;h4 id=&quot;django-14&quot;&gt;Django 1.4+&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ python manage.py test&lt;/code&gt; (no SQL):&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Creating &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;database &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;default&apos;&lt;/span&gt;...
&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;----------------------------------------------------------------------&lt;/span&gt;
Ran 1 &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;0.009s

OK
Destroying &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;database &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;default&apos;&lt;/span&gt;...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ python manage.py test  --settings=project.settings_test&lt;/code&gt; (SQL in console)&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Creating &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;database &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;default&apos;&lt;/span&gt;...
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; SELECT &lt;span class=&quot;s2&quot;&gt;&quot;spam_foo&quot;&lt;/span&gt;.&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;spam_foo&quot;&lt;/span&gt;.&lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt; FROM &lt;span class=&quot;s2&quot;&gt;&quot;spam_foo&quot;&lt;/span&gt; LIMIT 21&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=()&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;----------------------------------------------------------------------&lt;/span&gt;
Ran 1 &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;0.009s

OK
Destroying &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;database &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;default&apos;&lt;/span&gt;...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;django-14-and-django-nose&quot;&gt;Django 1.4+ and django-nose&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;pip install django-nose&lt;/li&gt;
  &lt;li&gt;in settings.py set &lt;em&gt;TEST_RUNNER = ‘django_nose.NoseTestSuiteRunner’&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ python manage.py test&lt;/code&gt; (no SQL):&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ python manage.py test  --settings=project.settings_test&lt;/code&gt; (SQL в консоле)&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;spam_foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;spam_foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;title&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;spam_foo&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;django-14-and-pytest-django&quot;&gt;Django 1.4+ and pytest-django&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;pip install pytest-django&lt;/li&gt;
  &lt;li&gt;create file pytest.ini next to manage.py and put following lines in it:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;pytest]
DJANGO_SETTINGS_MODULE &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; project.settings
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;rename tests.py to test_spam.py (default name pattern in py.test)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ py.test&lt;/code&gt; (no SQL):&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ py.test  --ds=project.settings_test&lt;/code&gt; (no SQL, py.test capture entire output)&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ py.test  --ds=project.settings_test -s&lt;/code&gt; (SQL in console)&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;spam_foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;spam_foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;title&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;spam_foo&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;summary&quot;&gt;Summary&lt;/h4&gt;

&lt;p&gt;As we can see from previous examples, SQL from block &lt;em&gt;assertNumQueries&lt;/em&gt; are logged to console when we use settings_test.&lt;/p&gt;

&lt;p&gt;If we’ll always run tests with such settings we soon become tired from all this SQL being printed. To avoid this just comment line &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos;handlers&apos;: [&apos;console&apos;],&lt;/code&gt;. And when you need to see SQL - uncomment it.&lt;/p&gt;

&lt;h3 id=&quot;error-output-from-assertnumqueries-and-django-17&quot;&gt;Error output from assertNumQueries and Django 1.7+&lt;/h3&gt;

&lt;p&gt;If &lt;em&gt;assertNumQueries&lt;/em&gt; registers not expected number of database attempts then we get a traceback with an error:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Traceback&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;most&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;AssertionError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queries&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;executed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But in django 1.7+ along with this we get SQL queries being made:&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Captured&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queries&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;were&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;QUERY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;SELECT &quot;spam_foo&quot;.&quot;id&quot;, &quot;spam_foo&quot;.&quot;title&quot; FROM &quot;spam_foo&quot; LIMIT 21&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PARAMS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Logging settings have to effect to this, very useful!&lt;/p&gt;

&lt;h3 id=&quot;show-sql-outside-of-assertnumqueries&quot;&gt;Show SQL outside of assertNumQueries&lt;/h3&gt;

&lt;p&gt;So far we were talking about &lt;em&gt;assertNumQueries&lt;/em&gt;, but what if we need to check queries outside of this manager?&lt;/p&gt;

&lt;p&gt;It is needed to manually set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;connection.use_debug_cursor = True&lt;/code&gt; before tests. It can be done in test runner or using hook in py.test.&lt;/p&gt;

&lt;h4 id=&quot;show-all-sql-django-14&quot;&gt;Show all SQL: Django 1.4+&lt;/h4&gt;

&lt;p&gt;Create file test_runner.py, put it next to settings.py and insert code:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.test.runner&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DiscoverRunner&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DjangoTestSuiteRunner&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ImportError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# django &amp;lt; 1.6
&lt;/span&gt;    &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.test.simple&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DjangoTestSuiteRunner&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.db&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEFAULT_DB_ALIAS&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SqlDebugTestSuiteRunner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DjangoTestSuiteRunner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup_test_environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SqlDebugTestSuiteRunner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setup_test_environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;connections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DEFAULT_DB_ALIAS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;use_debug_cursor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now either in settings (or settings_test if you use it) set runner:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;TEST_RUNNER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;project.test_runner.SqlDebugTestSuiteRunner&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Launch &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python manage.py test --settings=project.settings_test&lt;/code&gt; and see all SQL attempts made during test run.&lt;/p&gt;

&lt;p&gt;Either not set &lt;em&gt;TEST_RUNNER&lt;/em&gt; and use &lt;em&gt;–testrunner&lt;/em&gt; argument:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python manage.py test --settings=project.settings_test --testrunner=project.test_runner.SqlDebugTestSuiteRunner&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Result will be the same.&lt;/p&gt;

&lt;h4 id=&quot;show-all-sql-django-14-and-django-nose&quot;&gt;Show all SQL: Django 1.4+ and django-nose&lt;/h4&gt;

&lt;p&gt;For nose mostly everything is the same, but runner should sublcass NoseTestSuiteRunner.&lt;/p&gt;

&lt;p&gt;test_runner.py:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django_nose&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NoseTestSuiteRunner&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.db&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEFAULT_DB_ALIAS&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SqlDebugTestSuiteRunner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NoseTestSuiteRunner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup_test_environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SqlDebugTestSuiteRunner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setup_test_environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;connections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DEFAULT_DB_ALIAS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;use_debug_cursor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At the time when i write this post version of django-nose is 1.3. In this version argument &lt;em&gt;–testrunner&lt;/em&gt; is not supported. I’ve send &lt;a href=&quot;https://github.com/django-nose/django-nose/pull/187&quot;&gt;pull request&lt;/a&gt;, it could fall in release already.&lt;/p&gt;

&lt;h4 id=&quot;show-all-sql-django-14-and-pytest-django&quot;&gt;Show all SQL: Django 1.4+ and pytest-django&lt;/h4&gt;

&lt;p&gt;In py.test we must go another way, as it doesn’t use standard django runner. Instead we create a hook to set test environment.&lt;/p&gt;

&lt;p&gt;Create file plugin_debug_sql.py, put it next to settings.py, paste code:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pytest_runtest_setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.db&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEFAULT_DB_ALIAS&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;connections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DEFAULT_DB_ALIAS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;use_debug_cursor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Launch by such command:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PYTHONPATH=`pwd`:$PYTHONPATH py.test -s --ds=sql.settings_test -p project.plugin_debug_sql&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I have to put current path explicitly in PYTHONPATH here, as py.test won’t do it automatically for some reason.&lt;/p&gt;</content><author><name></name></author><category term="database" /><category term="django" /><category term="logging" /><category term="sql" /><summary type="html">In django tests we can measure number of sql queries: def test_home(self): with self.assertNumQueries(1): response = self.client.get(&apos;/&apos;) self.assertEqual(response.status_code, 200) If code in context of assertNumQueries will make other number of DB attempts than expected (here 1), test will throw error. But when test fails it is sometimes hard to understand, what unexpected query was made. To debug such case very useful to log SQL expressions to console. Below is description how to do it.</summary></entry></feed>