<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="https://st4lk.github.io/en/feed.xml" rel="self" type="application/atom+xml" /><link href="https://st4lk.github.io/en/" rel="alternate" type="text/html" hreflang="en" /><updated>2023-10-23T22:40:20+00:00</updated><id>https://st4lk.github.io/en/feed.xml</id><title type="html">Alexey Evseev</title><subtitle></subtitle><author><name>Alexey Evseev</name></author><entry><title type="html">Sublime Text and Language Server Protocol</title><link href="https://st4lk.github.io/en/blog/2019/02/19/sublime-text-and-language-server-protocol-lsp.html" rel="alternate" type="text/html" title="Sublime Text and Language Server Protocol" /><published>2019-02-19T18:19:43+00:00</published><updated>2019-02-19T18:19:43+00:00</updated><id>https://st4lk.github.io/en/blog/2019/02/19/sublime-text-and-language-server-protocol-lsp</id><author><name>Alexey Evseev</name></author><category term="python" /><category term="sublime" /><category term="lsp" /><summary type="html">Language Server Protocol (LSP) LSP - protocol for interactions between IDE and language server. The latter provides such means like autocompletion, goto implementation and etc. When IDE needs to show autocomplete choices on, for example, python language - it sends a request to the special server. And it responds with the necessary data. The cool part here is that it is an initiative of a big company - Microsoft.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://i.ibb.co/4K4zp06/sublime-256-lsp-light.png" /><media:content medium="image" url="https://i.ibb.co/4K4zp06/sublime-256-lsp-light.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Trap in counting related objects in Django</title><link href="https://st4lk.github.io/en/blog/2017/01/14/count-filtered-related-objects-django.html" rel="alternate" type="text/html" title="Trap in counting related objects in Django" /><published>2017-01-14T18:19:43+00:00</published><updated>2017-01-14T18:19:43+00:00</updated><id>https://st4lk.github.io/en/blog/2017/01/14/count-filtered-related-objects-django</id><author><name>Alexey Evseev</name></author><category term="database" /><category term="django" /><category term="sql" /><summary type="html">Task: for every object count number of related objects satisfying some conditions.</summary></entry><entry><title type="html">Django: signal or model method?</title><link href="https://st4lk.github.io/en/blog/2016/08/01/django-signal-or-model-method.html" rel="alternate" type="text/html" title="Django: signal or model method?" /><published>2016-08-01T18:19:43+00:00</published><updated>2016-08-01T18:19:43+00:00</updated><id>https://st4lk.github.io/en/blog/2016/08/01/django-signal-or-model-method</id><author><name>Alexey Evseev</name></author><category term="django" /><category term="signal" /><summary type="html">When I needed to implement some functionality on model saving, I always asked a question to myself - where to place it. In signal or in model method save()? Let’s see, what and when is more applicable.</summary></entry><entry><title type="html">Trying JSON in Django and PostgreSQL (and compare with MongoDB)</title><link href="https://st4lk.github.io/en/blog/2015/09/30/trying-json-combo-django-and-postgresql.html" rel="alternate" type="text/html" title="Trying JSON in Django and PostgreSQL (and compare with MongoDB)" /><published>2015-09-30T18:19:43+00:00</published><updated>2015-09-30T18:19:43+00:00</updated><id>https://st4lk.github.io/en/blog/2015/09/30/trying-json-combo-django-and-postgresql</id><author><name>Alexey Evseev</name></author><category term="database" /><category term="django" /><category term="mongodb" /><category term="postgresql" /><category term="sql" /><summary type="html">New JSONField will be added in Django 1.9, it can be used with PostgreSQL &amp;gt;= 9.4. Let’s try to work with it and find out, in what situations it can be useful.</summary></entry><entry><title type="html">OAuth and django rest framework</title><link href="https://st4lk.github.io/en/blog/2015/07/18/oauth-and-django-rest-framework.html" rel="alternate" type="text/html" title="OAuth and django rest framework" /><published>2015-07-18T18:19:43+00:00</published><updated>2015-07-18T18:19:43+00:00</updated><id>https://st4lk.github.io/en/blog/2015/07/18/oauth-and-django-rest-framework</id><author><name>Alexey Evseev</name></author><category term="api" /><category term="django" /><category term="oauth" /><summary type="html">Star This is a well known topic, but i can’t find the existing solution that will fully satisfy me. So i write it by myself :). Assume we have a “single page” web site, that is talking with backend via REST API. Client side can be written with ember, angularjs or some like this. Backend - django rest framework (DRF). We’ve got a task - add social login (OAuth protocol).</summary></entry><entry><title type="html">Tornado and pgettext</title><link href="https://st4lk.github.io/en/blog/2015/06/05/tornado-and-pgettext.html" rel="alternate" type="text/html" title="Tornado and pgettext" /><published>2015-06-05T18:19:43+00:00</published><updated>2015-06-05T18:19:43+00:00</updated><id>https://st4lk.github.io/en/blog/2015/06/05/tornado-and-pgettext</id><author><name>Alexey Evseev</name></author><category term="i18n" /><category term="tornado" /><summary type="html">Recently (26.05.2015) new tornado 4.2 was released. It contains different updates, the most valuable i suppose are modules tornado.locks and tornado.queues. They migrated from package Toro, look detailed explanation in Jesse Jiryu Davis post. Here i want to tell about another helpful function, that was added with my help - pgettext.</summary></entry><entry><title type="html">OAuth step by step</title><link href="https://st4lk.github.io/en/blog/2015/05/16/oauth-step-step.html" rel="alternate" type="text/html" title="OAuth step by step" /><published>2015-05-16T18:19:43+00:00</published><updated>2015-05-16T18:19:43+00:00</updated><id>https://st4lk.github.io/en/blog/2015/05/16/oauth-step-step</id><author><name>Alexey Evseev</name></author><category term="api" /><category term="oauth" /><category term="security" /><summary type="html">Gist OAuth protocol has two versions: 1.0 and 2.0. Most of services today use version 2.0, i suppose because it is easier to implement. Also, 2.0 can be realized in standalone applications (those, that don’t have a server). To understand the protocols very useful to have a look at their realisation. Here i’ll show several scripts that talk to OAuth providers of different versions. Scripts will implement client application functionality. Only standard python libraries are used. This help to overview the OAuth protocol - everything is on single screen and familiar. Of course, for production application we must use third party oauth libs, they handle many special cases and so on. Purpose of these scripts is just understanding of the protocol and nothing else. It is often hard to keep the protocol flow in production-ready library, because it is splitted in many modules, some other packages are used. And the full vision is slipping out of sight.</summary></entry><entry><title type="html">Python tips &amp;amp; tricks</title><link href="https://st4lk.github.io/en/blog/2015/04/30/base-python-tips-tricks.html" rel="alternate" type="text/html" title="Python tips &amp;amp; tricks" /><published>2015-04-30T18:19:43+00:00</published><updated>2015-04-30T18:19:43+00:00</updated><id>https://st4lk.github.io/en/blog/2015/04/30/base-python-tips-tricks</id><author><name>Alexey Evseev</name></author><category term="python" /><summary type="html">Recently i’ve read the book Learning Python, 5th Edition by Mark Lutz. Here is a list of most interesting insights for me.</summary></entry><entry><title type="html">Listen wifi with wireshark</title><link href="https://st4lk.github.io/en/blog/2015/04/17/listen-wifi-with-wireshark.html" rel="alternate" type="text/html" title="Listen wifi with wireshark" /><published>2015-04-17T18:19:43+00:00</published><updated>2015-04-17T18:19:43+00:00</updated><id>https://st4lk.github.io/en/blog/2015/04/17/listen-wifi-with-wireshark</id><author><name>Alexey Evseev</name></author><category term="fun" /><category term="security" /><summary type="html">I always knew, that it is possible to catch wifi network packets. But haven’t done it in practise (i was analysing network packets, but not in HTTP protocol). So i decided to do it, as this is interesting and useful. Such experience help to understand TCP-IP and HTTP protocols and also to pay more attention for web security.</summary></entry><entry><title type="html">Debug SQL in django test</title><link href="https://st4lk.github.io/en/blog/2015/03/04/debug-sql-django-test.html" rel="alternate" type="text/html" title="Debug SQL in django test" /><published>2015-03-04T18:19:43+00:00</published><updated>2015-03-04T18:19:43+00:00</updated><id>https://st4lk.github.io/en/blog/2015/03/04/debug-sql-django-test</id><author><name>Alexey Evseev</name></author><category term="database" /><category term="django" /><category term="logging" /><category term="sql" /><summary type="html">In django tests we can measure number of sql queries: def test_home(self): with self.assertNumQueries(1): response = self.client.get(&apos;/&apos;) self.assertEqual(response.status_code, 200) If code in context of assertNumQueries will make other number of DB attempts than expected (here 1), test will throw error. But when test fails it is sometimes hard to understand, what unexpected query was made. To debug such case very useful to log SQL expressions to console. Below is description how to do it.</summary></entry></feed>