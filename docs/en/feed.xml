<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="https://st4lk.github.io/en/feed.xml" rel="self" type="application/atom+xml" /><link href="https://st4lk.github.io/en/" rel="alternate" type="text/html" hreflang="en" /><updated>2022-11-20T22:09:55+00:00</updated><id>https://st4lk.github.io/en/feed.xml</id><title type="html">Developer articles</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Python function with mutable default arguments</title><link href="https://st4lk.github.io/en/python/2013/03/05/python-mutable-default-arguments.html" rel="alternate" type="text/html" title="Python function with mutable default arguments" /><published>2013-03-05T18:19:43+00:00</published><updated>2013-03-05T18:19:43+00:00</updated><id>https://st4lk.github.io/en/python/2013/03/05/python-mutable-default-arguments</id><content type="html" xml:base="https://st4lk.github.io/en/python/2013/03/05/python-mutable-default-arguments.html">&lt;p&gt;&lt;a href=&quot;/en/python/2013/03/05/python-mutable-default-arguments.html&quot;&gt;&lt;img src=&quot;/assets/images/posts/2013-03-05-python-mutable-default-arguments/jellyfish-1.jpeg&quot; alt=&quot;Python mutable default arguments&quot; title=&quot;Python mutable default arguments&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In python default function arguments are created during executing instruction def and not at each function call. If argument value is immutable object (for example string, integer, tuple) it is ok, but if value is mutable, then there can be a trap:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;x&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It seems, that every call to foo() will return list [‘x’]. But:
&lt;!--more--&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;x&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;x&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;x&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;x&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;x&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;x&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, if it is needed to create empty list at every call, you should do:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;x&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, sometimes this behaviour can be usefull. Here is a way to know function call count:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;itertools&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call_count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="python" /><summary type="html">In python default function arguments are created during executing instruction def and not at each function call. If argument value is immutable object (for example string, integer, tuple) it is ok, but if value is mutable, then there can be a trap: def foo(l=[]): l.append(&apos;x&apos;) return l It seems, that every call to foo() will return list [‘x’]. But:</summary></entry><entry><title type="html">Multilanguage site on django without redirects</title><link href="https://st4lk.github.io/en/django/i18n/2013/02/26/multilanguage-site-django-without-redirects.html" rel="alternate" type="text/html" title="Multilanguage site on django without redirects" /><published>2013-02-26T18:19:43+00:00</published><updated>2013-02-26T18:19:43+00:00</updated><id>https://st4lk.github.io/en/django/i18n/2013/02/26/multilanguage-site-django-without-redirects</id><content type="html" xml:base="https://st4lk.github.io/en/django/i18n/2013/02/26/multilanguage-site-django-without-redirects.html">&lt;p&gt;&lt;a class=&quot;github-button&quot; href=&quot;https://github.com/st4lk/django-solid-i18n-urls&quot; data-color-scheme=&quot;no-preference: light; light: light; dark: dark;&quot; data-size=&quot;large&quot; data-show-count=&quot;true&quot; aria-label=&quot;Star st4lk/django-solid-i18n-urls on GitHub&quot;&gt;Star&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Starting from django 1.4, it is possible to set &lt;a href=&quot;https://docs.djangoproject.com/en/dev/topics/i18n/translation/#language-prefix-in-url-patterns&quot;&gt;url prefix&lt;/a&gt; for each activated language. For example, we want site, that will have russian and english version.&lt;/p&gt;

&lt;p&gt;To do it, add following to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;settings.py&lt;/code&gt;:&lt;/p&gt;

&lt;!--more--&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# default language, it will be used, if django can&apos;t recognize user&apos;s language
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LANGUAGE_CODE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;ru&apos;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# list of activated languages
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LANGUAGES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;ru&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;Russian&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;en&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;English&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# enable django’s translation system
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;USE_I18N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# specify path for translation files
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOCALE_PATHS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PROJECT_DIR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;locale&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# add LocaleMiddleware
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MIDDLEWARE_CLASSES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;# ...
&lt;/span&gt;   &lt;span class=&quot;s&quot;&gt;&apos;django.middleware.locale.LocaleMiddleware&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;# ...
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;urls.py&lt;/code&gt; use i18n_patterns instead of patterns:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.conf.urls&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.conf.urls.i18n&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i18n_patterns&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i18n_patterns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;^about/$&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;about.view&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;about&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this case on access to /about/, django will &lt;a href=&quot;https://docs.djangoproject.com/en/dev/topics/i18n/translation/#how-django-discovers-language-preference&quot;&gt;try to discover&lt;/a&gt; language preference and make redirect to url with corresponding language prefix. Let’s say, that django has discovered russian language, then browser will be redirected to /ru/about/. But, if we’ll type url /en/about/, no redirects will occur and english version will be shown, because url already has prefix /en/.&lt;/p&gt;

&lt;p&gt;But with such pattern can be problems with site indexing by some search engines. For example yandex.ru refused to index my site for a long time, because it doesn’t fetched http code 200 from site root. With google there were no such problems, but anyway, in help page it is not recommended to use redirects. From &lt;a href=&quot;http://support.google.com/webmasters/bin/answer.py?hl=en&amp;amp;answer=182192&quot;&gt;http://support.google.com/webmasters/bin/answer.py?hl=en&amp;amp;answer=182192&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Avoid automatic redirection based on the user’s perceived language. These redirections could prevent users (and search engines) from viewing all the versions of your site.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;So i decided to make tool, that will work without redirects&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The algorithm is following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;If url doesn’t have language prefix, then default language will be used (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;settings.LANGUAGE_CODE&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;If url has prefix, then language will be determined from this prefix (/en/ = english), but for default language there is no prefix.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Luckily, it is needed a little peace of code for this, we need just to change LocaleMiddleware and i18n_patterns. I’ve made it in repo &lt;a href=&quot;https://github.com/st4lk/django-solid-i18n-urls&quot;&gt;https://github.com/st4lk/django-solid-i18n-urls&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Installation:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Setup django-solid-i18n-urls, for example using pip:&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; pip &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;solid_i18n
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Change LocaleMiddleware to SolidLocaleMiddleware:&lt;/p&gt;

    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;MIDDLEWARE_CLASSES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# remove &apos;django.middleware.locale.LocaleMiddleware&apos;,
&lt;/span&gt;    &lt;span class=&quot;s&quot;&gt;&apos;solid_i18n.middleware.SolidLocaleMiddleware&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;c1&quot;&gt;# ...
&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use solid_i18n_patterns instead of i18n_patterns:&lt;/p&gt;

    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.conf.urls&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;
 &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;solid_i18n.urls&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solid_i18n_patterns&lt;/span&gt;
  
 &lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solid_i18n_patterns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;^about/$&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;about.view&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;about&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Repo on github: &lt;a href=&quot;https://github.com/st4lk/django-solid-i18n-urls&quot;&gt;https://github.com/st4lk/django-solid-i18n-urls&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;updated&quot;&gt;UPDATED&lt;/h3&gt;

&lt;p&gt;Option &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;settings.SOLID_I18N_USE_REDIRECTS&lt;/code&gt; is added (False by default). If it is True, then redirects will be used with following rules:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;On request to url without language prefix, for example &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos;/&apos;&lt;/code&gt;, language will be determied from &lt;a href=&quot;https://docs.djangoproject.com/en/dev/topics/i18n/translation/#how-django-discovers-language-preference&quot;&gt;user preferences&lt;/a&gt;. If that language is not equal to default (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;settings.LANGUAGE_CODE&lt;/code&gt;), then he will be redirected to corresponding url with prefix. But if it is equal, then url without prefix will be shown.&lt;/li&gt;
  &lt;li&gt;On request to url with language prefix behaviour remains the same, i.e. language from prefix is used.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# settings.py: 
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LANGUAGE_CODE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;ru&apos;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SOLID_I18N_USE_REDIRECTS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Suppose preferred user language is english.&lt;/p&gt;

&lt;p&gt;Then at request to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos;/&apos;&lt;/code&gt; will be redirect to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos;/en/&apos;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And if preferred language is russian, then no redirect will occur, i.e. on request to ‘/’ exactly that url will be rendered.&lt;/p&gt;

&lt;h4 id=&quot;note&quot;&gt;Note&lt;/h4&gt;
&lt;p&gt;In such approach there is some nasty case. Imagine, that preferred browser language - english. But user wants to see russian version, that is rendered at url without prefix. If for switching language simple links are used like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;a href=&quot;{{ specific language url}}&quot;&amp;gt;&lt;/code&gt;, then user will be always redirected to english version (from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos;/&apos;&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos;/en/&apos;&lt;/code&gt;). To avoid this, it is needed to write information about choosen language to user cookies. It can be done using builtin django &lt;a href=&quot;https://docs.djangoproject.com/en/dev/topics/i18n/translation/#the-set-language-redirect-view&quot;&gt;set_language&lt;/a&gt; view.&lt;/p&gt;</content><author><name></name></author><category term="django" /><category term="i18n" /><summary type="html">Star Starting from django 1.4, it is possible to set url prefix for each activated language. For example, we want site, that will have russian and english version. To do it, add following to settings.py:</summary></entry><entry><title type="html">Script for downloading music from vkontakte</title><link href="https://st4lk.github.io/en/api/free/python/2013/02/04/script-downloading-music-vkcom-vkontakteru.html" rel="alternate" type="text/html" title="Script for downloading music from vkontakte" /><published>2013-02-04T18:19:43+00:00</published><updated>2013-02-04T18:19:43+00:00</updated><id>https://st4lk.github.io/en/api/free/python/2013/02/04/script-downloading-music-vkcom-vkontakteru</id><content type="html" xml:base="https://st4lk.github.io/en/api/free/python/2013/02/04/script-downloading-music-vkcom-vkontakteru.html">&lt;div class=&quot;gist-wrp&quot;&gt;&lt;div class=&quot;github-btn&quot; id=&quot;github-btn&quot; style=&quot;float:right;&quot;&gt; &lt;a class=&quot;gh-btn&quot; id=&quot;gh-btn&quot; href=&quot;https://gist.github.com/st4lk/4708673&quot; target=&quot;_blank&quot;&gt; &lt;span class=&quot;gh-ico&quot;&gt;&lt;/span&gt; &lt;span class=&quot;gh-text&quot; id=&quot;gh-text&quot;&gt;Gist&lt;/span&gt; &lt;/a&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/en/api/free/python/2013/02/04/script-downloading-music-vkcom-vkontakteru.html&quot;&gt;&lt;img src=&quot;/assets/images/posts/2013-02-04-script-downloading-music-vkcom-vkontakteru/vk_audio.jpeg&quot; alt=&quot;Script for downloading music from vkontakte&quot; title=&quot;Script for downloading music from vkontakte&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A quick search of corresponding python script doesn’t give results. In &lt;a href=&quot;http://habrahabr.ru/post/143860/&quot;&gt;post&lt;/a&gt; on habra link is broken. So i decided to write my own bicycle, it is avaliable &lt;a href=&quot;https://gist.github.com/4708673&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Launch (needs installed &lt;a href=&quot;http://www.python.org/download/releases/2.7.4/&quot;&gt;python interpreter&lt;/a&gt;):&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python vkcom_audio_download.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Tested on python 2.6 and 2.7. No external libraries required.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;algorithm&quot;&gt;Algorithm&lt;/h3&gt;

&lt;p&gt;Script checks saved access_token. If it doesn’t exists or expired, then page with authorisation is opened in browser. After confirmation you will be redirected to &lt;a href=&quot;https://oauth.vk.com/blank.htm#&quot;&gt;https://oauth.vk.com/blank.htm#&lt;/a&gt;… It is needed to copy this url and paste to script console. After that downloading is started. If audio track is present on disk - no downloading happens for it.&lt;/p&gt;

&lt;p&gt;You account info will be requested by application with app_id = 3358129. It is possible to create your own Standalone-application with audio access at &lt;a href=&quot;http://vk.com/editapp?act=create&quot;&gt;http://vk.com/editapp?act=create&lt;/a&gt;. And replace APP_ID with yours.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Script avaliable here&lt;/strong&gt;: &lt;a href=&quot;https://gist.github.com/4708673&quot;&gt;https://gist.github.com/4708673&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Script code:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/st4lk/4708673.js&quot;&gt;&lt;/script&gt;</content><author><name></name></author><category term="api" /><category term="free" /><category term="python" /><summary type="html">Gist A quick search of corresponding python script doesn’t give results. In post on habra link is broken. So i decided to write my own bicycle, it is avaliable here. Launch (needs installed python interpreter): python vkcom_audio_download.py Tested on python 2.6 and 2.7. No external libraries required.</summary></entry><entry><title type="html">Sublime text and github gists</title><link href="https://st4lk.github.io/en/django/python/2013/01/03/sublime-text-and-github-gists.html" rel="alternate" type="text/html" title="Sublime text and github gists" /><published>2013-01-03T18:19:43+00:00</published><updated>2013-01-03T18:19:43+00:00</updated><id>https://st4lk.github.io/en/django/python/2013/01/03/sublime-text-and-github-gists</id><content type="html" xml:base="https://st4lk.github.io/en/django/python/2013/01/03/sublime-text-and-github-gists.html">&lt;p&gt;&lt;a href=&quot;/en/django/python/2013/01/03/sublime-text-and-github-gists.html&quot;&gt;&lt;img src=&quot;/assets/images/posts/2013-01-03-sublime-text-and-github-gists/logo_full.jpeg&quot; alt=&quot;Sublime and github gist&quot; title=&quot;Sublime and github gist&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;http://www.sublimetext.com/&quot;&gt;Sublime text&lt;/a&gt; there are big variety of useful tools, that help to write code. I’ve learned only a small part of them, currently i’m trying to write in Vintage mode (vim style cursor management). But now i want to tell about integration &lt;a href=&quot;https://gist.github.com/&quot;&gt;github gists&lt;/a&gt; with sublime text. If you don’t now, github gists let you save snippets as a separate file without creation full repository. But it have many repository features - versions, possibility to fork.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;what-well-have-at-the-end&quot;&gt;What we’ll have at the end&lt;/h3&gt;

&lt;p&gt;Save snippet from sublime, give to it description with key words. Then again from sublime we can find snippet by key words and see it in editor. All snippets are saved in github, so they are avaliable from other computers.&lt;/p&gt;

&lt;p&gt;Remember, that sublime text has its own snippet functionality. But it is more preferable for small auto insertion. For example, when you write &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;def&lt;/code&gt; in python, insert function template:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Github gist are more suitable for something bigger - some function for exact purpose.&lt;/p&gt;

&lt;h3 id=&quot;lets-setup-this-functionality&quot;&gt;Lets setup this functionality&lt;/h3&gt;

&lt;h4 id=&quot;gist-plugin-setup&quot;&gt;Gist plugin setup&lt;/h4&gt;

&lt;p&gt;The easiest way to do it is with sublime package manager. &lt;a href=&quot;http://wbond.net/sublime_packages/package_control/installation&quot;&gt;Here&lt;/a&gt; is instruction for setup. In sublime press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ctrl + shift + p&lt;/code&gt;, enter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;install&lt;/code&gt; and then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gist&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/2013-01-03-sublime-text-and-github-gists/1_package_control_install.jpeg&quot; alt=&quot;Sublime install package&quot; title=&quot;Sublime install package&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/2013-01-03-sublime-text-and-github-gists/2_package_control_gist.jpeg&quot; alt=&quot;Sublime install gist package&quot; title=&quot;Sublime install gist package&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;give-access-to-your-github-account&quot;&gt;Give access to your github account&lt;/h4&gt;

&lt;p&gt;Press Preferences-&amp;gt;Package settigns-&amp;gt;Gist-&amp;gt;Settings User.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/2013-01-03-sublime-text-and-github-gists/3_gist_settings_menu.jpeg&quot; alt=&quot;Gist sublime Preferences&quot; title=&quot;Gist sublime Preferences&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can either set login + password, either token. If needed settings are not in Settings User, then they can be copied from Settings Default. But don’t change default settings. To receive token, run in system command line (&lt;a href=&quot;http://curl.haxx.se/&quot;&gt;curl&lt;/a&gt; must be installed):&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; USERNAME &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST https://api.github.com/authorizations &lt;span class=&quot;nt&quot;&gt;--data&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;{&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;scopes&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;gist&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;]}&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;where USERNAME - your github login&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/2013-01-03-sublime-text-and-github-gists/4_gist_auth.jpeg&quot; alt=&quot;Gist sublime settings&quot; title=&quot;Gist sublime settings&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;gist-creation&quot;&gt;Gist creation&lt;/h4&gt;

&lt;p&gt;Write code of your snippet in new sublime tab. I wrote code for taking content of csv file as list of lists. Press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ctrl + shift + p&lt;/code&gt;, then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gist create public&lt;/code&gt; and enter. Here is avaliable fuzzy searching, so i just enter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/2013-01-03-sublime-text-and-github-gists/5_gist_create_public.jpeg&quot; alt=&quot;Gist sublime create&quot; title=&quot;Gist sublime create&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Give description to our snippet. It is important to include meaningful words, because search will use them. I write “Python: Get csv lines”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/2013-01-03-sublime-text-and-github-gists/6_gist_set_description.jpeg&quot; alt=&quot;Gist sublime description&quot; title=&quot;Gist sublime description&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There will be also request for file name, it can be skipped by pressing enter.&lt;/p&gt;

&lt;h4 id=&quot;search-for-a-gist&quot;&gt;Search for a gist&lt;/h4&gt;

&lt;p&gt;Open sublime command line by pressing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ctrl + shift + p&lt;/code&gt; and enter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gist open&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/2013-01-03-sublime-text-and-github-gists/7_gist_open.jpeg&quot; alt=&quot;Gist sublime open&quot; title=&quot;Gist sublime open&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then enter key words “python csv”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/2013-01-03-sublime-text-and-github-gists/8_gist_find_by_descr.jpeg&quot; alt=&quot;Gist sublime find&quot; title=&quot;Gist sublime find&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And see our snippet.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/2013-01-03-sublime-text-and-github-gists/9_gist_opened.jpeg&quot; alt=&quot;Gist sublime opened&quot; title=&quot;Gist sublime opened&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This snippet is also created at github: &lt;a href=&quot;https://gist.github.com/3931305&quot;&gt;https://gist.github.com/3931305&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;links&quot;&gt;Links&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Code editor &lt;a href=&quot;http://www.sublimetext.com/&quot;&gt;sublime text&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/condemil/Gist&quot;&gt;Repo&lt;/a&gt; of Gist plugin&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tutsplus.com/lesson/sexy-code-snippet-management-with-gists/&quot;&gt;Video lesson&lt;/a&gt; about sublime and gist at &lt;a href=&quot;http://tutsplus.com/&quot;&gt;tutsplus.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tutsplus.com/course/improve-workflow-in-sublime-text-2/&quot;&gt;Video course&lt;/a&gt; about sublime at &lt;a href=&quot;http://tutsplus.com/&quot;&gt;tutsplus.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="django" /><category term="python" /><summary type="html">In Sublime text there are big variety of useful tools, that help to write code. I’ve learned only a small part of them, currently i’m trying to write in Vintage mode (vim style cursor management). But now i want to tell about integration github gists with sublime text. If you don’t now, github gists let you save snippets as a separate file without creation full repository. But it have many repository features - versions, possibility to fork.</summary></entry><entry><title type="html">MobileESP: Easily detect mobile web site visitors</title><link href="https://st4lk.github.io/en/django/python/2012/11/29/mobileesp-easily-detect-mobile-web-site-visitors.html" rel="alternate" type="text/html" title="MobileESP: Easily detect mobile web site visitors" /><published>2012-11-29T18:19:43+00:00</published><updated>2012-11-29T18:19:43+00:00</updated><id>https://st4lk.github.io/en/django/python/2012/11/29/mobileesp-easily-detect-mobile-web-site-visitors</id><content type="html" xml:base="https://st4lk.github.io/en/django/python/2012/11/29/mobileesp-easily-detect-mobile-web-site-visitors.html">&lt;p&gt;Script will be useful, if you want to show different version of site for desktop computers and mobile devices. Big variety of methods to detect mobile type. Avaliable in different languages, including python. The port to python was made by me with help from my freelance customer.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Here how it can be used in django project:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;mobileesp&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mdetect&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;user_agent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;META&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;HTTP_USER_AGENT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;http_accept&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;META&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;HTTP_ACCEPT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_agent&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http_accept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;agent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mdetect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UAgentInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userAgent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_agent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpAccept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http_accept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#Do first! For iPhone, Android, Windows Phone 7, etc.
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;agent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;detectTierIphone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;HttpResponseRedirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;/myapp/i/&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#Then catch all other mobile devices
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;agent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;detectMobileQuick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;HttpResponseRedirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;/myapp/m/&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#For traditional computers and tablets (iPad, Android, etc.)
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponseRedirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;/myapp/d/&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Script on &lt;a href=&quot;http://code.google.com/p/mobileesp/source/browse/Python/mdetect.py&quot;&gt;code.google.com&lt;/a&gt;, all methods have comments with description.&lt;/p&gt;

&lt;p&gt;Description at &lt;a href=&quot;http://blog.mobileesp.com/?cat=10&quot;&gt;project site&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="django" /><category term="python" /><summary type="html">Script will be useful, if you want to show different version of site for desktop computers and mobile devices. Big variety of methods to detect mobile type. Avaliable in different languages, including python. The port to python was made by me with help from my freelance customer.</summary></entry><entry><title type="html">Debug django project with embedded python debugger pdb</title><link href="https://st4lk.github.io/en/django/python/sublime/2012/11/18/debug-django-project-embedded-python-debugger-pdb.html" rel="alternate" type="text/html" title="Debug django project with embedded python debugger pdb" /><published>2012-11-18T18:19:43+00:00</published><updated>2012-11-18T18:19:43+00:00</updated><id>https://st4lk.github.io/en/django/python/sublime/2012/11/18/debug-django-project-embedded-python-debugger-pdb</id><content type="html" xml:base="https://st4lk.github.io/en/django/python/sublime/2012/11/18/debug-django-project-embedded-python-debugger-pdb.html">&lt;p&gt;I use &lt;a href=&quot;http://www.sublimetext.com/&quot;&gt;sublime-text&lt;/a&gt; as code editor. It doesn’t have a debugger, so to debug django projects i often used&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var_name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and look for output in local development server console. I use this approach today also, but sometimes it is great to run code step by step to see variables at each step.&lt;/p&gt;

&lt;p&gt;It can be done with embedded python debugger pdb:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pdb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pdb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;!--more--&gt;

&lt;p&gt;I.e. we put this line in needed place of code, where we want so stop. It is a breakpoint. Now refresh project page in browser. When project code will reach this line, browser will hang and in console we’ll see:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pdb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We now inside debugger and can input &lt;a href=&quot;http://docs.python.org/2/library/pdb.html#debugger-commands&quot;&gt;commands&lt;/a&gt;, for example these:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;l - (list), look the source code&lt;/li&gt;
  &lt;li&gt;n - (step next) step to next line without entering inside function&lt;/li&gt;
  &lt;li&gt;s - (step in) step inside to next line, i.e. if we are standing at function call, we’ll go inside this function&lt;/li&gt;
  &lt;li&gt;r - (step out) step to first line after current block of code. For example, if current line is inside cycle and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r&lt;/code&gt; is pressed, next line will be first line after this cycle.&lt;/li&gt;
  &lt;li&gt;c - (continue) continue until next breakpoint, i.e. until &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pdb.set_trace()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;p - (print) execude python code or just show variable: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p var_name&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;p&gt;Suppose we have such a view:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/2012-11-18-debug-django-project-embedded-python-debugger-pdb/view.jpeg&quot; alt=&quot;view&quot; title=&quot;view&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Insert &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import pdb; pdb.set_trace()&lt;/code&gt; in needed place and run dev server, if it not already started:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/2012-11-18-debug-django-project-embedded-python-debugger-pdb/view_pdb.jpeg&quot; alt=&quot;view_pdb&quot; title=&quot;view_pdb&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In browser access the page, that calls this view. The page will hang:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/2012-11-18-debug-django-project-embedded-python-debugger-pdb/browser_hang.jpeg&quot; alt=&quot;browser_hang&quot; title=&quot;browser_hang&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In console we see (Pdb):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/2012-11-18-debug-django-project-embedded-python-debugger-pdb/pdb_console.jpeg&quot; alt=&quot;pdb_console&quot; title=&quot;pdb_console&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lets look, where we now by command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;l&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/2012-11-18-debug-django-project-embedded-python-debugger-pdb/pdb_l.jpeg&quot; alt=&quot;pdb_l&quot; title=&quot;pdb_l&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Make two next steps with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/2012-11-18-debug-django-project-embedded-python-debugger-pdb/pdb_nn.jpeg&quot; alt=&quot;pdb_nn&quot; title=&quot;pdb_nn&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Look value of variables &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;about&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;about.content&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/2012-11-18-debug-django-project-embedded-python-debugger-pdb/pdb_p.jpeg&quot; alt=&quot;pdb_p&quot; title=&quot;pdb_p&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Continue with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/2012-11-18-debug-django-project-embedded-python-debugger-pdb/pdb_c.jpeg&quot; alt=&quot;pdb_c&quot; title=&quot;pdb_c&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Page is shown in browser:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/2012-11-18-debug-django-project-embedded-python-debugger-pdb/browser_done.jpeg&quot; alt=&quot;browser_done&quot; title=&quot;browser_done&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="django" /><category term="python" /><category term="sublime" /><summary type="html">I use sublime-text as code editor. It doesn’t have a debugger, so to debug django projects i often used print var_name and look for output in local development server console. I use this approach today also, but sometimes it is great to run code step by step to see variables at each step. It can be done with embedded python debugger pdb: import pdb; pdb.set_trace()</summary></entry><entry><title type="html">Cloud service Openshift</title><link href="https://st4lk.github.io/en/free/openshift/python/2012/10/08/cloud-service-openshift.html" rel="alternate" type="text/html" title="Cloud service Openshift" /><published>2012-10-08T18:19:43+00:00</published><updated>2012-10-08T18:19:43+00:00</updated><id>https://st4lk.github.io/en/free/openshift/python/2012/10/08/cloud-service-openshift</id><content type="html" xml:base="https://st4lk.github.io/en/free/openshift/python/2012/10/08/cloud-service-openshift.html">&lt;p&gt;&lt;a href=&quot;/en/free/openshift/python/2012/10/08/cloud-service-openshift.html&quot;&gt;&lt;img src=&quot;/assets/images/posts/2012-10-08-cloud-service-openshift/openshift-icon.png&quot; alt=&quot;Cloud service Openshift&quot; title=&quot;Cloud service Openshift&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I know a few hosting providers with free account and python availability. It is &lt;a href=&quot;https://appengine.google.com/&quot;&gt;Google App Engine&lt;/a&gt; and &lt;a href=&quot;https://www.alwaysdata.com/&quot;&gt;Alwaysdata&lt;/a&gt;. But recently i found great project &lt;a href=&quot;https://openshift.redhat.com/&quot;&gt;Openshift&lt;/a&gt; from RedHat and this blog site is working on it. Let me describe mentioned hostings first.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;google-app-engine&quot;&gt;Google app engine&lt;/h3&gt;

&lt;p&gt;The main trouble of google app engine - limited amount of python libraries. Of course, you can use pure python libs, but you can’t setup libs that requires C compilation. For example, pycurl library can’t be used. Also GAE uses special data bases, so libs to work with them are also special. Therefore starting of django application is not trivial, because django works with SQL databases. In additional, django can be used only with version 1.2, 1.3 (while 1.4 currently avaliable). Anyway, here some useful links: &lt;a href=&quot;https://developers.google.com/appengine/docs/python/tools/libraries27&quot;&gt;list of avaliable libraries&lt;/a&gt;, &lt;a href=&quot;http://django-rocket-engine.readthedocs.org/&quot;&gt;django-rocket-engine project&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;alwaysdata&quot;&gt;Alwaysdata&lt;/h3&gt;

&lt;p&gt;With free account you can’t setup libraries, that requires C compilation. But here we have familiar data bases - mysql, postgres, mongodb. So usual django application can be started easily. I often use this hosting to demonstrate simple projects.&lt;/p&gt;

&lt;h2 id=&quot;openshift&quot;&gt;Openshift&lt;/h2&gt;

&lt;p&gt;Openshift - it is PaaS, i.e. platform as a service. We don’t have root access to operating system. The system is provided to us by service in a working state, and we can make only limited amount of actions on it. It is similiar to google app engine, but here we have much more freedom.&lt;/p&gt;

&lt;p&gt;First of all it is great, that many things can be installed manually. Any version of python, django. If you want SQL/Postgres/mongodb as data base - you are welcome. You can setup libraries and compile them. There are additional cool things: cron, statistics, phpmyadmin and etc. I’ve mentioned django, but it is possible to use any framework, it just what i’ve tried.&lt;/p&gt;

&lt;p&gt;Handy style of deploying appliction on server. Just type git push special_application_url from you git-repository and thats it! Files automaticly refreshes on server and server restarts. Process of restarting can be managed by special scripts. For example, you can tell the script to setup necessary libraries from requirements.txt, compile static files (manage.py collectstatic) and so on. This script will be runned at every server restart.&lt;/p&gt;

&lt;p&gt;For free account it is available 1 Gb of disc space and 3 small ‘gears’. As I understand, gear - it is some isolated environment with its RAM. For a small gear size of RAM is equal to 512. If power of one gear is not enough, then second is started, then third and so on. To keep it simple, here is example of load, that simple DLE site can process (from &lt;a href=&quot;https://openshift.redhat.com/community/developers/pricing&quot;&gt;openshift&lt;/a&gt; description):&lt;/p&gt;

&lt;p&gt;&lt;em&gt;15 pages/second, Hundreds of articles, 50k visitors per month&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;For a simple site it is quite enough. For one account you can create 3 applications (at least for free). Of course, there is possibility, that this freebie will end at some time. But existing code you can always run at other hosting - it doesn’t have special featers as GAE does. Finally you can buy payment account at openshift.&lt;/p&gt;

&lt;p&gt;On openshift site it is described in detail, how to start application. I will describe my experience.&lt;/p&gt;

&lt;h4 id=&quot;steps-to-start-python-273--django-application&quot;&gt;Steps to start python 2.7.3 + django application&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;register&lt;/li&gt;
  &lt;li&gt;setup git (if not already)&lt;/li&gt;
  &lt;li&gt;setup special program “rhc” (it can be skipped, but this program helps a lot), manul: &lt;a href=&quot;https://openshift.redhat.com/community/get-started&quot;&gt;get-started&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;follow instructions &lt;a href=&quot;https://github.com/ehazlett/openshift-diy-py27-django&quot;&gt;https://github.com/ehazlett/openshift-diy-py27-django&lt;/a&gt; (simple application without data base)&lt;/li&gt;
  &lt;li&gt;or follow instructions &lt;a href=&quot;https://github.com/st4lk/lexev&quot;&gt;https://github.com/st4lk/lexev&lt;/a&gt; (application with mysql, the code of this blog)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That it! Application is available at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://&amp;lt;app_name&amp;gt;-&amp;lt;namespace&amp;gt;.rhcloud.com/&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;link-to-domain&quot;&gt;Link to domain&lt;/h3&gt;

&lt;p&gt;Well, not quite yet. It will be nice to have normal address… Suppose we have domain (for example lexev.org). Lets link our application to that domain.&lt;/p&gt;

&lt;p&gt;Openshift doesn’t have DNS servers, that can be set for domain. Instead of it Openshift sujest to use &lt;a href=&quot;http://en.wikipedia.org/wiki/CNAME_record&quot;&gt;CNAME&lt;/a&gt;. It can be done in domain management page.&lt;/p&gt;

&lt;p&gt;That all nice, but i’ve bought my domain at nic.ru. To create CNAME record there i must buy additional access… But, as it turned out, there is way out! Let’s use free service &lt;a href=&quot;http://freedns.afraid.org/&quot;&gt;http://freedns.afraid.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;register at freedns.afraid.org&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;set DNS servers for domain:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  ns1.afraid.org
  ns2.afraid.org
  ns3.afraid.org
  ns4.afraid.org
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;add domain at afraid.org: &lt;a href=&quot;http://freedns.afraid.org/domain/add.php&quot;&gt;http://freedns.afraid.org/domain/add.php&lt;/a&gt;, in my case it is lexev.org. Don’t forget to select Shared State: Private, or you domain will be avaliable to all users at afraid.org&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;for newly created domain add subdomen with type CNAME, as on picture (replace lexev.org to needed domain and set correct url of application at destination field):&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/posts/2012-10-08-cloud-service-openshift/afraid.com-1.png&quot; alt=&quot;afraid.org CNAME&quot; title=&quot;afraid.org CNAME&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;at subdomens page we see two records: one with CNAME and one without (it is on top probably)&lt;/li&gt;
  &lt;li&gt;press record without CNAME&lt;/li&gt;
  &lt;li&gt;change nothing, but click “Forward to a URL”&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;type as on picture (again replace lexev.org to needed domain):&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/posts/2012-10-08-cloud-service-openshift/afraid.com-2.png&quot; alt=&quot;afraid.org Forward to a URL&quot; title=&quot;afraid.org Forward to a URL&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;finally the subdomens must be:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/posts/2012-10-08-cloud-service-openshift/afraid.com-3.png&quot; alt=&quot;afraid.org subdomain&quot; title=&quot;afraid.org subdomain&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For now looks that all done. Some time will be needed for new DNS servers to start work with newly domain.&lt;/p&gt;

&lt;p&gt;Request to lexev.org will be redirected to &lt;a href=&quot;http://www.lexev.org/&quot;&gt;www.lexev.org&lt;/a&gt;. And &lt;a href=&quot;http://www.lexev.org/&quot;&gt;www.lexev.org&lt;/a&gt; points to application at openshift.&lt;/p&gt;

&lt;p&gt;It should be noted, that openshift also supports PHP, Ruby, Java, Node.js, Perl !&lt;/p&gt;

&lt;p&gt;Thanks for reading and sorry for my english! :)&lt;/p&gt;</content><author><name></name></author><category term="free" /><category term="openshift" /><category term="python" /><summary type="html">I know a few hosting providers with free account and python availability. It is Google App Engine and Alwaysdata. But recently i found great project Openshift from RedHat and this blog site is working on it. Let me describe mentioned hostings first.</summary></entry><entry><title type="html">Aphorism messenger</title><link href="https://st4lk.github.io/en/api/java/2012/08/31/aphorism-messenger.html" rel="alternate" type="text/html" title="Aphorism messenger" /><published>2012-08-31T18:19:43+00:00</published><updated>2012-08-31T18:19:43+00:00</updated><id>https://st4lk.github.io/en/api/java/2012/08/31/aphorism-messenger</id><content type="html" xml:base="https://st4lk.github.io/en/api/java/2012/08/31/aphorism-messenger.html">&lt;p&gt;&lt;a href=&quot;/en/api/java/2012/08/31/aphorism-messenger.html&quot;&gt;&lt;img src=&quot;/assets/images/posts/2012-08-31-aphorism-messenger/owl_48x48.png&quot; alt=&quot;Aphorism messenger&quot; title=&quot;Aphorism messenger&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have an interesting project I want to tell you about. The idea to create it was born when I was learning Java. I have read couple of books, made some small task programs but I would like to create something bigger.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h3 id=&quot;project-summary&quot;&gt;Project summary&lt;/h3&gt;

&lt;p&gt;Desktop program (client), that lives in a tray and periodically shows aphorisms. It takes aphorisms from web-service (server), so data base with aphorisms lives in one place and it doesn’t attached with each client. Aphorims have rating - it is amount of likes. When pop-up window with quotation arrives, user sees its rating and can edit it by giving or remove likes. Along with aphorism in the window there is an author. User can click it and look for an author biography. Also, there is an ability to look for your favorite aphorisms and list of top favorite aphorisms.&lt;/p&gt;

&lt;p&gt;The result (&lt;a href=&quot;https://sourceforge.net/projects/bwtclient/&quot;&gt;download, only in russian&lt;/a&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/2012-08-31-aphorism-messenger/just-aphorism.png&quot; alt=&quot;Aphorism example&quot; title=&quot;Aphorism example&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Full project (client and server) is written in Java. Server hosts at &lt;strong&gt;google app engine&lt;/strong&gt;, provides resources in xml format. It is a REST web service, so it can be used in many ways, for example for web site. Specification is avaliable &lt;a href=&quot;https://bestwisethoughts.appspot.com/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is an example of resource: &lt;a href=&quot;https://bestwisethoughts.appspot.com/1.0/thought/get/random&quot;&gt;show random aphorism&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Links:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://freehabr.ru/blog/gotome/2104.html&quot;&gt;detailed description of project (russian)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://sourceforge.net/projects/bwtclient/&quot;&gt;client program&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://bestwisethoughts.appspot.com/&quot;&gt;server&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://sourceforge.net/p/bwtclient/code/&quot;&gt;client source&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://sourceforge.net/p/bwtserver/code/&quot;&gt;server source&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=AIJywgQKatY&quot;&gt;video review&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="api" /><category term="java" /><summary type="html">I have an interesting project I want to tell you about. The idea to create it was born when I was learning Java. I have read couple of books, made some small task programs but I would like to create something bigger.</summary></entry></feed>